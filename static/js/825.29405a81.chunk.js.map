{"version":3,"file":"static/js/825.29405a81.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/TDSLoader.js"],"sourcesContent":["import {\r\n\tAdditiveBlending,\r\n\tBufferGeometry,\r\n\tColor,\r\n\tDoubleSide,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tGroup,\r\n\tLoader,\r\n\tLoaderUtils,\r\n\tMatrix4,\r\n\tMesh,\r\n\tMeshPhongMaterial,\r\n\tTextureLoader\r\n} from '../../../build/three';\r\n\r\n/**\r\n * Autodesk 3DS three.js file loader, based on lib3ds.\r\n *\r\n * Loads geometry with uv and materials basic properties with texture support.\r\n *\r\n * @class TDSLoader\r\n * @constructor\r\n */\r\n\r\nclass TDSLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.debug = false;\r\n\r\n\t\tthis.group = null;\r\n\r\n\t\tthis.materials = [];\r\n\t\tthis.meshes = [];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Load 3ds file from url.\r\n\t *\r\n\t * @method load\r\n\t * @param {[type]} url URL for the file.\r\n\t * @param {Function} onLoad onLoad callback, receives group Object3D as argument.\r\n\t * @param {Function} onProgress onProgress callback.\r\n\t * @param {Function} onError onError callback.\r\n\t */\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\r\n\t\tloader.load( url, function ( data ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( data, path ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Parse arraybuffer data and load 3ds file.\r\n\t *\r\n\t * @method parse\r\n\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\r\n\t * @param {String} path Path for external resources.\r\n\t * @return {Group} Group loaded from 3ds file.\r\n\t */\r\n\tparse( arraybuffer, path ) {\r\n\r\n\t\tthis.group = new Group();\r\n\t\tthis.materials = [];\r\n\t\tthis.meshes = [];\r\n\r\n\t\tthis.readFile( arraybuffer, path );\r\n\r\n\t\tfor ( let i = 0; i < this.meshes.length; i ++ ) {\r\n\r\n\t\t\tthis.group.add( this.meshes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.group;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decode file content to read 3ds data.\r\n\t *\r\n\t * @method readFile\r\n\t * @param {ArrayBuffer} arraybuffer Arraybuffer data to be loaded.\r\n\t * @param {String} path Path for external resources.\r\n\t */\r\n\treadFile( arraybuffer, path ) {\r\n\r\n\t\tconst data = new DataView( arraybuffer );\r\n\t\tconst chunk = new Chunk( data, 0, this.debugMessage );\r\n\r\n\t\tif ( chunk.id === MLIBMAGIC || chunk.id === CMAGIC || chunk.id === M3DMAGIC ) {\r\n\r\n\t\t\tlet next = chunk.readChunk();\r\n\r\n\t\t\twhile ( next ) {\r\n\r\n\t\t\t\tif ( next.id === M3D_VERSION ) {\r\n\r\n\t\t\t\t\tconst version = next.readDWord();\r\n\t\t\t\t\tthis.debugMessage( '3DS file version: ' + version );\r\n\r\n\t\t\t\t} else if ( next.id === MDATA ) {\r\n\r\n\t\t\t\t\tthis.readMeshData( next, path );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.debugMessage( 'Unknown main chunk: ' + next.hexId );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnext = chunk.readChunk();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.debugMessage( 'Parsed ' + this.meshes.length + ' meshes' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read mesh data chunk.\r\n\t *\r\n\t * @method readMeshData\r\n\t * @param {Chunk} chunk to read mesh from\r\n\t * @param {String} path Path for external resources.\r\n\t */\r\n\treadMeshData( chunk, path ) {\r\n\r\n\t\tlet next = chunk.readChunk();\r\n\r\n\t\twhile ( next ) {\r\n\r\n\t\t\tif ( next.id === MESH_VERSION ) {\r\n\r\n\t\t\t\tconst version = + next.readDWord();\r\n\t\t\t\tthis.debugMessage( 'Mesh Version: ' + version );\r\n\r\n\t\t\t} else if ( next.id === MASTER_SCALE ) {\r\n\r\n\t\t\t\tconst scale = next.readFloat();\r\n\t\t\t\tthis.debugMessage( 'Master scale: ' + scale );\r\n\t\t\t\tthis.group.scale.set( scale, scale, scale );\r\n\r\n\t\t\t} else if ( next.id === NAMED_OBJECT ) {\r\n\r\n\t\t\t\tthis.debugMessage( 'Named Object' );\r\n\t\t\t\tthis.readNamedObject( next );\r\n\r\n\t\t\t} else if ( next.id === MAT_ENTRY ) {\r\n\r\n\t\t\t\tthis.debugMessage( 'Material' );\r\n\t\t\t\tthis.readMaterialEntry( next, path );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.debugMessage( 'Unknown MDATA chunk: ' + next.hexId );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnext = chunk.readChunk();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read named object chunk.\r\n\t *\r\n\t * @method readNamedObject\r\n\t * @param {Chunk} chunk Chunk in use.\r\n\t */\r\n\treadNamedObject( chunk ) {\r\n\r\n\t\tconst name = chunk.readString();\r\n\r\n\t\tlet next = chunk.readChunk();\r\n\t\twhile ( next ) {\r\n\r\n\t\t\tif ( next.id === N_TRI_OBJECT ) {\r\n\r\n\t\t\t\tconst mesh = this.readMesh( next );\r\n\t\t\t\tmesh.name = name;\r\n\t\t\t\tthis.meshes.push( mesh );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.debugMessage( 'Unknown named object chunk: ' + next.hexId );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnext = chunk.readChunk( );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read material data chunk and add it to the material list.\r\n\t *\r\n\t * @method readMaterialEntry\r\n\t * @param {Chunk} chunk Chunk in use.\r\n\t * @param {String} path Path for external resources.\r\n\t */\r\n\treadMaterialEntry( chunk, path ) {\r\n\r\n\t\tlet next = chunk.readChunk();\r\n\t\tconst material = new MeshPhongMaterial();\r\n\r\n\t\twhile ( next ) {\r\n\r\n\t\t\tif ( next.id === MAT_NAME ) {\r\n\r\n\t\t\t\tmaterial.name = next.readString();\r\n\t\t\t\tthis.debugMessage( '   Name: ' + material.name );\r\n\r\n\t\t\t} else if ( next.id === MAT_WIRE ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   Wireframe' );\r\n\t\t\t\tmaterial.wireframe = true;\r\n\r\n\t\t\t} else if ( next.id === MAT_WIRE_SIZE ) {\r\n\r\n\t\t\t\tconst value = next.readByte();\r\n\t\t\t\tmaterial.wireframeLinewidth = value;\r\n\t\t\t\tthis.debugMessage( '   Wireframe Thickness: ' + value );\r\n\r\n\t\t\t} else if ( next.id === MAT_TWO_SIDE ) {\r\n\r\n\t\t\t\tmaterial.side = DoubleSide;\r\n\t\t\t\tthis.debugMessage( '   DoubleSided' );\r\n\r\n\t\t\t} else if ( next.id === MAT_ADDITIVE ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   Additive Blending' );\r\n\t\t\t\tmaterial.blending = AdditiveBlending;\r\n\r\n\t\t\t} else if ( next.id === MAT_DIFFUSE ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   Diffuse Color' );\r\n\t\t\t\tmaterial.color = this.readColor( next );\r\n\r\n\t\t\t} else if ( next.id === MAT_SPECULAR ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   Specular Color' );\r\n\t\t\t\tmaterial.specular = this.readColor( next );\r\n\r\n\t\t\t} else if ( next.id === MAT_AMBIENT ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   Ambient color' );\r\n\t\t\t\tmaterial.color = this.readColor( next );\r\n\r\n\t\t\t} else if ( next.id === MAT_SHININESS ) {\r\n\r\n\t\t\t\tconst shininess = this.readPercentage( next );\r\n\t\t\t\tmaterial.shininess = shininess * 100;\r\n\t\t\t\tthis.debugMessage( '   Shininess : ' + shininess );\r\n\r\n\t\t\t} else if ( next.id === MAT_TRANSPARENCY ) {\r\n\r\n\t\t\t\tconst transparency = this.readPercentage( next );\r\n\t\t\t\tmaterial.opacity = 1 - transparency;\r\n\t\t\t\tthis.debugMessage( '  Transparency : ' + transparency );\r\n\t\t\t\tmaterial.transparent = material.opacity < 1 ? true : false;\r\n\r\n\t\t\t} else if ( next.id === MAT_TEXMAP ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   ColorMap' );\r\n\t\t\t\tmaterial.map = this.readMap( next, path );\r\n\r\n\t\t\t} else if ( next.id === MAT_BUMPMAP ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   BumpMap' );\r\n\t\t\t\tmaterial.bumpMap = this.readMap( next, path );\r\n\r\n\t\t\t} else if ( next.id === MAT_OPACMAP ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   OpacityMap' );\r\n\t\t\t\tmaterial.alphaMap = this.readMap( next, path );\r\n\r\n\t\t\t} else if ( next.id === MAT_SPECMAP ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   SpecularMap' );\r\n\t\t\t\tmaterial.specularMap = this.readMap( next, path );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.debugMessage( '   Unknown material chunk: ' + next.hexId );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnext = chunk.readChunk();\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials[ material.name ] = material;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read mesh data chunk.\r\n\t *\r\n\t * @method readMesh\r\n\t * @param {Chunk} chunk Chunk in use.\r\n\t * @return {Mesh} The parsed mesh.\r\n\t */\r\n\treadMesh( chunk ) {\r\n\r\n\t\tlet next = chunk.readChunk( );\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\tconst material = new MeshPhongMaterial();\r\n\t\tconst mesh = new Mesh( geometry, material );\r\n\t\tmesh.name = 'mesh';\r\n\r\n\t\twhile ( next ) {\r\n\r\n\t\t\tif ( next.id === POINT_ARRAY ) {\r\n\r\n\t\t\t\tconst points = next.readWord( );\r\n\r\n\t\t\t\tthis.debugMessage( '   Vertex: ' + points );\r\n\r\n\t\t\t\t//BufferGeometry\r\n\r\n\t\t\t\tconst vertices = [];\r\n\r\n\t\t\t\tfor ( let i = 0; i < points; i ++ )\t\t{\r\n\r\n\t\t\t\t\tvertices.push( next.readFloat( ) );\r\n\t\t\t\t\tvertices.push( next.readFloat( ) );\r\n\t\t\t\t\tvertices.push( next.readFloat( ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\r\n\t\t\t} else if ( next.id === FACE_ARRAY ) {\r\n\r\n\t\t\t\tthis.readFaceArray( next, mesh );\r\n\r\n\t\t\t} else if ( next.id === TEX_VERTS ) {\r\n\r\n\t\t\t\tconst texels = next.readWord( );\r\n\r\n\t\t\t\tthis.debugMessage( '   UV: ' + texels );\r\n\r\n\t\t\t\t//BufferGeometry\r\n\r\n\t\t\t\tconst uvs = [];\r\n\r\n\t\t\t\tfor ( let i = 0; i < texels; i ++ ) {\r\n\r\n\t\t\t\t\tuvs.push( next.readFloat( ) );\r\n\t\t\t\t\tuvs.push( next.readFloat( ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\r\n\t\t\t} else if ( next.id === MESH_MATRIX ) {\r\n\r\n\t\t\t\tthis.debugMessage( '   Tranformation Matrix (TODO)' );\r\n\r\n\t\t\t\tconst values = [];\r\n\t\t\t\tfor ( let i = 0; i < 12; i ++ ) {\r\n\r\n\t\t\t\t\tvalues[ i ] = next.readFloat( );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst matrix = new Matrix4();\r\n\r\n\t\t\t\t//X Line\r\n\t\t\t\tmatrix.elements[ 0 ] = values[ 0 ];\r\n\t\t\t\tmatrix.elements[ 1 ] = values[ 6 ];\r\n\t\t\t\tmatrix.elements[ 2 ] = values[ 3 ];\r\n\t\t\t\tmatrix.elements[ 3 ] = values[ 9 ];\r\n\r\n\t\t\t\t//Y Line\r\n\t\t\t\tmatrix.elements[ 4 ] = values[ 2 ];\r\n\t\t\t\tmatrix.elements[ 5 ] = values[ 8 ];\r\n\t\t\t\tmatrix.elements[ 6 ] = values[ 5 ];\r\n\t\t\t\tmatrix.elements[ 7 ] = values[ 11 ];\r\n\r\n\t\t\t\t//Z Line\r\n\t\t\t\tmatrix.elements[ 8 ] = values[ 1 ];\r\n\t\t\t\tmatrix.elements[ 9 ] = values[ 7 ];\r\n\t\t\t\tmatrix.elements[ 10 ] = values[ 4 ];\r\n\t\t\t\tmatrix.elements[ 11 ] = values[ 10 ];\r\n\r\n\t\t\t\t//W Line\r\n\t\t\t\tmatrix.elements[ 12 ] = 0;\r\n\t\t\t\tmatrix.elements[ 13 ] = 0;\r\n\t\t\t\tmatrix.elements[ 14 ] = 0;\r\n\t\t\t\tmatrix.elements[ 15 ] = 1;\r\n\r\n\t\t\t\tmatrix.transpose();\r\n\r\n\t\t\t\tconst inverse = new Matrix4();\r\n\t\t\t\tinverse.copy( matrix ).invert();\r\n\t\t\t\tgeometry.applyMatrix4( inverse );\r\n\r\n\t\t\t\tmatrix.decompose( mesh.position, mesh.quaternion, mesh.scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.debugMessage( '   Unknown mesh chunk: ' + next.hexId );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnext = chunk.readChunk( );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.computeVertexNormals();\r\n\r\n\t\treturn mesh;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read face array data chunk.\r\n\t *\r\n\t * @method readFaceArray\r\n\t * @param {Chunk} chunk Chunk in use.\r\n\t * @param {Mesh} mesh Mesh to be filled with the data read.\r\n\t */\r\n\treadFaceArray( chunk, mesh ) {\r\n\r\n\t\tconst faces = chunk.readWord( );\r\n\r\n\t\tthis.debugMessage( '   Faces: ' + faces );\r\n\r\n\t\tconst index = [];\r\n\r\n\t\tfor ( let i = 0; i < faces; ++ i ) {\r\n\r\n\t\t\tindex.push( chunk.readWord( ), chunk.readWord( ), chunk.readWord( ) );\r\n\r\n\t\t\tchunk.readWord( ); // visibility\r\n\r\n\t\t}\r\n\r\n\t\tmesh.geometry.setIndex( index );\r\n\r\n\t\t//The rest of the FACE_ARRAY chunk is subchunks\r\n\r\n\t\tlet materialIndex = 0;\r\n\t\tlet start = 0;\r\n\r\n\t\twhile ( ! chunk.endOfChunk ) {\r\n\r\n\t\t\tconst subchunk = chunk.readChunk( );\r\n\r\n\t\t\tif ( subchunk.id === MSH_MAT_GROUP ) {\r\n\r\n\t\t\t\tthis.debugMessage( '      Material Group' );\r\n\r\n\t\t\t\tconst group = this.readMaterialGroup( subchunk );\r\n\t\t\t\tconst count = group.index.length * 3; // assuming successive indices\r\n\r\n\t\t\t\tmesh.geometry.addGroup( start, count, materialIndex );\r\n\r\n\t\t\t\tstart += count;\r\n\t\t\t\tmaterialIndex ++;\r\n\r\n\t\t\t\tconst material = this.materials[ group.name ];\r\n\r\n\t\t\t\tif ( Array.isArray( mesh.material ) === false ) mesh.material = [];\r\n\r\n\t\t\t\tif ( material !== undefined )\t{\r\n\r\n\t\t\t\t\tmesh.material.push( material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.debugMessage( '      Unknown face array chunk: ' + subchunk.hexId );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( mesh.material.length === 1 ) mesh.material = mesh.material[ 0 ]; // for backwards compatibility\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read texture map data chunk.\r\n\t *\r\n\t * @method readMap\r\n\t * @param {Chunk} chunk Chunk in use.\r\n\t * @param {String} path Path for external resources.\r\n\t * @return {Texture} Texture read from this data chunk.\r\n\t */\r\n\treadMap( chunk, path ) {\r\n\r\n\t\tlet next = chunk.readChunk( );\r\n\t\tlet texture = {};\r\n\r\n\t\tconst loader = new TextureLoader( this.manager );\r\n\t\tloader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\r\n\r\n\t\twhile ( next ) {\r\n\r\n\t\t\tif ( next.id === MAT_MAPNAME ) {\r\n\r\n\t\t\t\tconst name = next.readString();\r\n\t\t\t\ttexture = loader.load( name );\r\n\r\n\t\t\t\tthis.debugMessage( '      File: ' + path + name );\r\n\r\n\t\t\t} else if ( next.id === MAT_MAP_UOFFSET ) {\r\n\r\n\t\t\t\ttexture.offset.x = next.readFloat( );\r\n\t\t\t\tthis.debugMessage( '      OffsetX: ' + texture.offset.x );\r\n\r\n\t\t\t} else if ( next.id === MAT_MAP_VOFFSET ) {\r\n\r\n\t\t\t\ttexture.offset.y = next.readFloat( );\r\n\t\t\t\tthis.debugMessage( '      OffsetY: ' + texture.offset.y );\r\n\r\n\t\t\t} else if ( next.id === MAT_MAP_USCALE ) {\r\n\r\n\t\t\t\ttexture.repeat.x = next.readFloat( );\r\n\t\t\t\tthis.debugMessage( '      RepeatX: ' + texture.repeat.x );\r\n\r\n\t\t\t} else if ( next.id === MAT_MAP_VSCALE ) {\r\n\r\n\t\t\t\ttexture.repeat.y = next.readFloat( );\r\n\t\t\t\tthis.debugMessage( '      RepeatY: ' + texture.repeat.y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.debugMessage( '      Unknown map chunk: ' + next.hexId );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnext = chunk.readChunk( );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read material group data chunk.\r\n\t *\r\n\t * @method readMaterialGroup\r\n\t * @param {Chunk} chunk Chunk in use.\r\n\t * @return {Object} Object with name and index of the object.\r\n\t */\r\n\treadMaterialGroup( chunk ) {\r\n\r\n\t\tconst name = chunk.readString();\r\n\t\tconst numFaces = chunk.readWord();\r\n\r\n\t\tthis.debugMessage( '         Name: ' + name );\r\n\t\tthis.debugMessage( '         Faces: ' + numFaces );\r\n\r\n\t\tconst index = [];\r\n\t\tfor ( let i = 0; i < numFaces; ++ i ) {\r\n\r\n\t\t\tindex.push( chunk.readWord( ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn { name: name, index: index };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read a color value.\r\n\t *\r\n\t * @method readColor\r\n\t * @param {Chunk} chunk Chunk.\r\n\t * @return {Color} Color value read..\r\n\t */\r\n\treadColor( chunk ) {\r\n\r\n\t\tconst subChunk = chunk.readChunk( );\r\n\t\tconst color = new Color();\r\n\r\n\t\tif ( subChunk.id === COLOR_24 || subChunk.id === LIN_COLOR_24 ) {\r\n\r\n\t\t\tconst r = subChunk.readByte( );\r\n\t\t\tconst g = subChunk.readByte( );\r\n\t\t\tconst b = subChunk.readByte( );\r\n\r\n\t\t\tcolor.setRGB( r / 255, g / 255, b / 255 );\r\n\r\n\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\r\n\r\n\t\t}\telse if ( subChunk.id === COLOR_F || subChunk.id === LIN_COLOR_F ) {\r\n\r\n\t\t\tconst r = subChunk.readFloat( );\r\n\t\t\tconst g = subChunk.readFloat( );\r\n\t\t\tconst b = subChunk.readFloat( );\r\n\r\n\t\t\tcolor.setRGB( r, g, b );\r\n\r\n\t\t\tthis.debugMessage( '      Color: ' + color.r + ', ' + color.g + ', ' + color.b );\r\n\r\n\t\t}\telse {\r\n\r\n\t\t\tthis.debugMessage( '      Unknown color chunk: ' + subChunk.hexId );\r\n\r\n\t\t}\r\n\r\n\t\treturn color;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read percentage value.\r\n\t *\r\n\t * @method readPercentage\r\n\t * @param {Chunk} chunk Chunk to read data from.\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadPercentage( chunk ) {\r\n\r\n\t\tconst subChunk = chunk.readChunk( );\r\n\r\n\t\tswitch ( subChunk.id ) {\r\n\r\n\t\t\tcase INT_PERCENTAGE:\r\n\t\t\t\treturn ( subChunk.readShort( ) / 100 );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase FLOAT_PERCENTAGE:\r\n\t\t\t\treturn subChunk.readFloat( );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthis.debugMessage( '      Unknown percentage chunk: ' + subChunk.hexId );\r\n\t\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Print debug message to the console.\r\n\t *\r\n\t * Is controlled by a flag to show or hide debug messages.\r\n\t *\r\n\t * @method debugMessage\r\n\t * @param {Object} message Debug message to print to the console.\r\n\t */\r\n\tdebugMessage( message ) {\r\n\r\n\t\tif ( this.debug ) {\r\n\r\n\t\t\tconsole.log( message );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n/** Read data/sub-chunks from chunk */\r\nclass Chunk {\r\n\r\n\t/**\r\n\t * Create a new chunk\r\n\t *\r\n\t * @class Chunk\r\n\t * @param {DataView} data DataView to read from.\r\n\t * @param {Number} position in data.\r\n\t * @param {Function} debugMessage logging callback.\r\n\t */\r\n\tconstructor( data, position, debugMessage ) {\r\n\r\n\t\tthis.data = data;\r\n\t\t// the offset to the begin of this chunk\r\n\t\tthis.offset = position;\r\n\t\t// the current reading position\r\n\t\tthis.position = position;\r\n\t\tthis.debugMessage = debugMessage;\r\n\r\n\t\tif ( this.debugMessage instanceof Function ) {\r\n\r\n\t\t\tthis.debugMessage = function () {};\r\n\r\n\t\t}\r\n\r\n\t\tthis.id = this.readWord();\r\n\t\tthis.size = this.readDWord();\r\n\t\tthis.end = this.offset + this.size;\r\n\r\n\t\tif ( this.end > data.byteLength ) {\r\n\r\n\t\t\tthis.debugMessage( 'Bad chunk size for chunk at ' + position );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * read a sub cchunk.\r\n\t *\r\n\t * @method readChunk\r\n\t * @return {Chunk | null} next sub chunk\r\n\t */\r\n\treadChunk() {\r\n\r\n\t\tif ( this.endOfChunk ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst next = new Chunk( this.data, this.position, this.debugMessage );\r\n\t\t\tthis.position += next.size;\r\n\t\t\treturn next;\r\n\r\n\t\t}\tcatch ( e ) {\r\n\r\n\t\t\tthis.debugMessage( 'Unable to read chunk at ' + this.position );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * return the ID of this chunk as Hex\r\n\t *\r\n\t * @method idToString\r\n\t * @return {String} hex-string of id\r\n\t */\r\n\tget hexId() {\r\n\r\n\t\treturn this.id.toString( 16 );\r\n\r\n\t}\r\n\r\n\tget endOfChunk() {\r\n\r\n\t\treturn this.position >= this.end;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read byte value.\r\n\t *\r\n\t * @method readByte\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadByte() {\r\n\r\n\t\tconst v = this.data.getUint8( this.position, true );\r\n\t\tthis.position += 1;\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read 32 bit float value.\r\n\t *\r\n\t * @method readFloat\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadFloat() {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tconst v = this.data.getFloat32( this.position, true );\r\n\t\t\tthis.position += 4;\r\n\t\t\treturn v;\r\n\r\n\t\t}\tcatch ( e ) {\r\n\r\n\t\t\tthis.debugMessage( e + ' ' + this.position + ' ' + this.data.byteLength );\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read 32 bit signed integer value.\r\n\t *\r\n\t * @method readInt\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadInt() {\r\n\r\n\t\tconst v = this.data.getInt32( this.position, true );\r\n\t\tthis.position += 4;\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read 16 bit signed integer value.\r\n\t *\r\n\t * @method readShort\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadShort() {\r\n\r\n\t\tconst v = this.data.getInt16( this.position, true );\r\n\t\tthis.position += 2;\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read 64 bit unsigned integer value.\r\n\t *\r\n\t * @method readDWord\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadDWord() {\r\n\r\n\t\tconst v = this.data.getUint32( this.position, true );\r\n\t\tthis.position += 4;\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read 32 bit unsigned integer value.\r\n\t *\r\n\t * @method readWord\r\n\t * @return {Number} Data read from the dataview.\r\n\t */\r\n\treadWord() {\r\n\r\n\t\tconst v = this.data.getUint16( this.position, true );\r\n\t\tthis.position += 2;\r\n\t\treturn v;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Read NULL terminated ASCII string value from chunk-pos.\r\n\t *\r\n\t * @method readString\r\n\t * @return {String} Data read from the dataview.\r\n\t */\r\n\treadString() {\r\n\r\n\t\tlet s = '';\r\n\t\tlet c = this.readByte();\r\n\t\twhile ( c ) {\r\n\r\n\t\t\ts += String.fromCharCode( c );\r\n\t\t\tc = this.readByte();\r\n\r\n\t\t}\r\n\r\n\t\treturn s;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// const NULL_CHUNK = 0x0000;\r\nconst M3DMAGIC = 0x4D4D;\r\n// const SMAGIC = 0x2D2D;\r\n// const LMAGIC = 0x2D3D;\r\nconst MLIBMAGIC = 0x3DAA;\r\n// const MATMAGIC = 0x3DFF;\r\nconst CMAGIC = 0xC23D;\r\nconst M3D_VERSION = 0x0002;\r\n// const M3D_KFVERSION = 0x0005;\r\nconst COLOR_F = 0x0010;\r\nconst COLOR_24 = 0x0011;\r\nconst LIN_COLOR_24 = 0x0012;\r\nconst LIN_COLOR_F = 0x0013;\r\nconst INT_PERCENTAGE = 0x0030;\r\nconst FLOAT_PERCENTAGE = 0x0031;\r\nconst MDATA = 0x3D3D;\r\nconst MESH_VERSION = 0x3D3E;\r\nconst MASTER_SCALE = 0x0100;\r\n// const LO_SHADOW_BIAS = 0x1400;\r\n// const HI_SHADOW_BIAS = 0x1410;\r\n// const SHADOW_MAP_SIZE = 0x1420;\r\n// const SHADOW_SAMPLES = 0x1430;\r\n// const SHADOW_RANGE = 0x1440;\r\n// const SHADOW_FILTER = 0x1450;\r\n// const RAY_BIAS = 0x1460;\r\n// const O_CONSTS = 0x1500;\r\n// const AMBIENT_LIGHT = 0x2100;\r\n// const BIT_MAP = 0x1100;\r\n// const SOLID_BGND = 0x1200;\r\n// const V_GRADIENT = 0x1300;\r\n// const USE_BIT_MAP = 0x1101;\r\n// const USE_SOLID_BGND = 0x1201;\r\n// const USE_V_GRADIENT = 0x1301;\r\n// const FOG = 0x2200;\r\n// const FOG_BGND = 0x2210;\r\n// const LAYER_FOG = 0x2302;\r\n// const DISTANCE_CUE = 0x2300;\r\n// const DCUE_BGND = 0x2310;\r\n// const USE_FOG = 0x2201;\r\n// const USE_LAYER_FOG = 0x2303;\r\n// const USE_DISTANCE_CUE = 0x2301;\r\nconst MAT_ENTRY = 0xAFFF;\r\nconst MAT_NAME = 0xA000;\r\nconst MAT_AMBIENT = 0xA010;\r\nconst MAT_DIFFUSE = 0xA020;\r\nconst MAT_SPECULAR = 0xA030;\r\nconst MAT_SHININESS = 0xA040;\r\n// const MAT_SHIN2PCT = 0xA041;\r\nconst MAT_TRANSPARENCY = 0xA050;\r\n// const MAT_XPFALL = 0xA052;\r\n// const MAT_USE_XPFALL = 0xA240;\r\n// const MAT_REFBLUR = 0xA053;\r\n// const MAT_SHADING = 0xA100;\r\n// const MAT_USE_REFBLUR = 0xA250;\r\n// const MAT_SELF_ILLUM = 0xA084;\r\nconst MAT_TWO_SIDE = 0xA081;\r\n// const MAT_DECAL = 0xA082;\r\nconst MAT_ADDITIVE = 0xA083;\r\nconst MAT_WIRE = 0xA085;\r\n// const MAT_FACEMAP = 0xA088;\r\n// const MAT_TRANSFALLOFF_IN = 0xA08A;\r\n// const MAT_PHONGSOFT = 0xA08C;\r\n// const MAT_WIREABS = 0xA08E;\r\nconst MAT_WIRE_SIZE = 0xA087;\r\nconst MAT_TEXMAP = 0xA200;\r\n// const MAT_SXP_TEXT_DATA = 0xA320;\r\n// const MAT_TEXMASK = 0xA33E;\r\n// const MAT_SXP_TEXTMASK_DATA = 0xA32A;\r\n// const MAT_TEX2MAP = 0xA33A;\r\n// const MAT_SXP_TEXT2_DATA = 0xA321;\r\n// const MAT_TEX2MASK = 0xA340;\r\n// const MAT_SXP_TEXT2MASK_DATA = 0xA32C;\r\nconst MAT_OPACMAP = 0xA210;\r\n// const MAT_SXP_OPAC_DATA = 0xA322;\r\n// const MAT_OPACMASK = 0xA342;\r\n// const MAT_SXP_OPACMASK_DATA = 0xA32E;\r\nconst MAT_BUMPMAP = 0xA230;\r\n// const MAT_SXP_BUMP_DATA = 0xA324;\r\n// const MAT_BUMPMASK = 0xA344;\r\n// const MAT_SXP_BUMPMASK_DATA = 0xA330;\r\nconst MAT_SPECMAP = 0xA204;\r\n// const MAT_SXP_SPEC_DATA = 0xA325;\r\n// const MAT_SPECMASK = 0xA348;\r\n// const MAT_SXP_SPECMASK_DATA = 0xA332;\r\n// const MAT_SHINMAP = 0xA33C;\r\n// const MAT_SXP_SHIN_DATA = 0xA326;\r\n// const MAT_SHINMASK = 0xA346;\r\n// const MAT_SXP_SHINMASK_DATA = 0xA334;\r\n// const MAT_SELFIMAP = 0xA33D;\r\n// const MAT_SXP_SELFI_DATA = 0xA328;\r\n// const MAT_SELFIMASK = 0xA34A;\r\n// const MAT_SXP_SELFIMASK_DATA = 0xA336;\r\n// const MAT_REFLMAP = 0xA220;\r\n// const MAT_REFLMASK = 0xA34C;\r\n// const MAT_SXP_REFLMASK_DATA = 0xA338;\r\n// const MAT_ACUBIC = 0xA310;\r\nconst MAT_MAPNAME = 0xA300;\r\n// const MAT_MAP_TILING = 0xA351;\r\n// const MAT_MAP_TEXBLUR = 0xA353;\r\nconst MAT_MAP_USCALE = 0xA354;\r\nconst MAT_MAP_VSCALE = 0xA356;\r\nconst MAT_MAP_UOFFSET = 0xA358;\r\nconst MAT_MAP_VOFFSET = 0xA35A;\r\n// const MAT_MAP_ANG = 0xA35C;\r\n// const MAT_MAP_COL1 = 0xA360;\r\n// const MAT_MAP_COL2 = 0xA362;\r\n// const MAT_MAP_RCOL = 0xA364;\r\n// const MAT_MAP_GCOL = 0xA366;\r\n// const MAT_MAP_BCOL = 0xA368;\r\nconst NAMED_OBJECT = 0x4000;\r\n// const N_DIRECT_LIGHT = 0x4600;\r\n// const DL_OFF = 0x4620;\r\n// const DL_OUTER_RANGE = 0x465A;\r\n// const DL_INNER_RANGE = 0x4659;\r\n// const DL_MULTIPLIER = 0x465B;\r\n// const DL_EXCLUDE = 0x4654;\r\n// const DL_ATTENUATE = 0x4625;\r\n// const DL_SPOTLIGHT = 0x4610;\r\n// const DL_SPOT_ROLL = 0x4656;\r\n// const DL_SHADOWED = 0x4630;\r\n// const DL_LOCAL_SHADOW2 = 0x4641;\r\n// const DL_SEE_CONE = 0x4650;\r\n// const DL_SPOT_RECTANGULAR = 0x4651;\r\n// const DL_SPOT_ASPECT = 0x4657;\r\n// const DL_SPOT_PROJECTOR = 0x4653;\r\n// const DL_SPOT_OVERSHOOT = 0x4652;\r\n// const DL_RAY_BIAS = 0x4658;\r\n// const DL_RAYSHAD = 0x4627;\r\n// const N_CAMERA = 0x4700;\r\n// const CAM_SEE_CONE = 0x4710;\r\n// const CAM_RANGES = 0x4720;\r\n// const OBJ_HIDDEN = 0x4010;\r\n// const OBJ_VIS_LOFTER = 0x4011;\r\n// const OBJ_DOESNT_CAST = 0x4012;\r\n// const OBJ_DONT_RECVSHADOW = 0x4017;\r\n// const OBJ_MATTE = 0x4013;\r\n// const OBJ_FAST = 0x4014;\r\n// const OBJ_PROCEDURAL = 0x4015;\r\n// const OBJ_FROZEN = 0x4016;\r\nconst N_TRI_OBJECT = 0x4100;\r\nconst POINT_ARRAY = 0x4110;\r\n// const POINT_FLAG_ARRAY = 0x4111;\r\nconst FACE_ARRAY = 0x4120;\r\nconst MSH_MAT_GROUP = 0x4130;\r\n// const SMOOTH_GROUP = 0x4150;\r\n// const MSH_BOXMAP = 0x4190;\r\nconst TEX_VERTS = 0x4140;\r\nconst MESH_MATRIX = 0x4160;\r\n// const MESH_COLOR = 0x4165;\r\n// const MESH_TEXTURE_INFO = 0x4170;\r\n// const KFDATA = 0xB000;\r\n// const KFHDR = 0xB00A;\r\n// const KFSEG = 0xB008;\r\n// const KFCURTIME = 0xB009;\r\n// const AMBIENT_NODE_TAG = 0xB001;\r\n// const OBJECT_NODE_TAG = 0xB002;\r\n// const CAMERA_NODE_TAG = 0xB003;\r\n// const TARGET_NODE_TAG = 0xB004;\r\n// const LIGHT_NODE_TAG = 0xB005;\r\n// const L_TARGET_NODE_TAG = 0xB006;\r\n// const SPOTLIGHT_NODE_TAG = 0xB007;\r\n// const NODE_ID = 0xB030;\r\n// const NODE_HDR = 0xB010;\r\n// const PIVOT = 0xB013;\r\n// const INSTANCE_NAME = 0xB011;\r\n// const MORPH_SMOOTH = 0xB015;\r\n// const BOUNDBOX = 0xB014;\r\n// const POS_TRACK_TAG = 0xB020;\r\n// const COL_TRACK_TAG = 0xB025;\r\n// const ROT_TRACK_TAG = 0xB021;\r\n// const SCL_TRACK_TAG = 0xB022;\r\n// const MORPH_TRACK_TAG = 0xB026;\r\n// const FOV_TRACK_TAG = 0xB023;\r\n// const ROLL_TRACK_TAG = 0xB024;\r\n// const HOT_TRACK_TAG = 0xB027;\r\n// const FALL_TRACK_TAG = 0xB028;\r\n// const HIDE_TRACK_TAG = 0xB029;\r\n// const POLY_2D = 0x5000;\r\n// const SHAPE_OK = 0x5010;\r\n// const SHAPE_NOT_OK = 0x5011;\r\n// const SHAPE_HOOK = 0x5020;\r\n// const PATH_3D = 0x6000;\r\n// const PATH_MATRIX = 0x6005;\r\n// const SHAPE_2D = 0x6010;\r\n// const M_SCALE = 0x6020;\r\n// const M_TWIST = 0x6030;\r\n// const M_TEETER = 0x6040;\r\n// const M_FIT = 0x6050;\r\n// const M_BEVEL = 0x6060;\r\n// const XZ_CURVE = 0x6070;\r\n// const YZ_CURVE = 0x6080;\r\n// const INTERPCT = 0x6090;\r\n// const DEFORM_LIMIT = 0x60A0;\r\n// const USE_CONTOUR = 0x6100;\r\n// const USE_TWEEN = 0x6110;\r\n// const USE_SCALE = 0x6120;\r\n// const USE_TWIST = 0x6130;\r\n// const USE_TEETER = 0x6140;\r\n// const USE_FIT = 0x6150;\r\n// const USE_BEVEL = 0x6160;\r\n// const DEFAULT_VIEW = 0x3000;\r\n// const VIEW_TOP = 0x3010;\r\n// const VIEW_BOTTOM = 0x3020;\r\n// const VIEW_LEFT = 0x3030;\r\n// const VIEW_RIGHT = 0x3040;\r\n// const VIEW_FRONT = 0x3050;\r\n// const VIEW_BACK = 0x3060;\r\n// const VIEW_USER = 0x3070;\r\n// const VIEW_CAMERA = 0x3080;\r\n// const VIEW_WINDOW = 0x3090;\r\n// const VIEWPORT_LAYOUT_OLD = 0x7000;\r\n// const VIEWPORT_DATA_OLD = 0x7010;\r\n// const VIEWPORT_LAYOUT = 0x7001;\r\n// const VIEWPORT_DATA = 0x7011;\r\n// const VIEWPORT_DATA_3 = 0x7012;\r\n// const VIEWPORT_SIZE = 0x7020;\r\n// const NETWORK_VIEW = 0x7030;\r\n\r\nexport { TDSLoader };\r\n"],"names":["TDSLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","debug","group","materials","meshes","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","arraybuffer","Group","readFile","i","length","add","DataView","chunk","Chunk","debugMessage","id","MLIBMAGIC","CMAGIC","M3DMAGIC","next","readChunk","M3D_VERSION","version","readDWord","MDATA","readMeshData","hexId","MESH_VERSION","MASTER_SCALE","scale","readFloat","set","NAMED_OBJECT","readNamedObject","MAT_ENTRY","readMaterialEntry","name","readString","N_TRI_OBJECT","mesh","readMesh","push","material","MeshPhongMaterial","MAT_NAME","MAT_WIRE","wireframe","MAT_WIRE_SIZE","readByte","wireframeLinewidth","MAT_TWO_SIDE","side","DoubleSide","MAT_ADDITIVE","blending","AdditiveBlending","MAT_DIFFUSE","color","readColor","MAT_SPECULAR","specular","MAT_AMBIENT","MAT_SHININESS","shininess","readPercentage","MAT_TRANSPARENCY","transparency","opacity","transparent","MAT_TEXMAP","map","readMap","MAT_BUMPMAP","bumpMap","MAT_OPACMAP","alphaMap","MAT_SPECMAP","specularMap","geometry","BufferGeometry","Mesh","POINT_ARRAY","points","readWord","vertices","setAttribute","Float32BufferAttribute","FACE_ARRAY","readFaceArray","TEX_VERTS","texels","uvs","MESH_MATRIX","values","matrix","Matrix4","elements","transpose","inverse","copy","invert","applyMatrix4","decompose","position","quaternion","computeVertexNormals","faces","index","setIndex","materialIndex","start","endOfChunk","subchunk","MSH_MAT_GROUP","readMaterialGroup","count","addGroup","Array","isArray","undefined","texture","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","MAT_MAPNAME","MAT_MAP_UOFFSET","offset","x","MAT_MAP_VOFFSET","y","MAT_MAP_USCALE","repeat","MAT_MAP_VSCALE","numFaces","subChunk","Color","COLOR_24","LIN_COLOR_24","r","g","b","setRGB","COLOR_F","LIN_COLOR_F","INT_PERCENTAGE","readShort","FLOAT_PERCENTAGE","message","log","Loader","Function","size","end","byteLength","get","toString","v","getUint8","getFloat32","getInt32","getInt16","getUint32","getUint16","s","c","String","fromCharCode"],"sourceRoot":""}