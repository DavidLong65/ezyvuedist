{"version":3,"file":"static/js/8874.72664cb5.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/USDZLoader.js"],"sourcesContent":["import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tClampToEdgeWrapping,\r\n\tFileLoader,\r\n\tGroup,\r\n\tLoader,\r\n\tMesh,\r\n\tMeshStandardMaterial,\r\n\tMirroredRepeatWrapping,\r\n\tRepeatWrapping,\r\n\tsRGBEncoding,\r\n\tTextureLoader,\r\n\tObject3D,\r\n} from '../../../build/three';\r\n\r\nimport * as fflate from '../libs/fflate.module.js';\r\n\r\nclass USDAParser {\r\n\r\n\tparse( text ) {\r\n\r\n\t\tconst data = {};\r\n\r\n\t\tconst lines = text.split( '\\n' );\r\n\t\tconst length = lines.length;\r\n\r\n\t\tlet current = 0;\r\n\t\tlet string = null;\r\n\t\tlet target = data;\r\n\r\n\t\tconst stack = [ data ];\r\n\r\n\t\t// debugger;\r\n\r\n\t\tfunction parseNextLine() {\r\n\r\n\t\t\tconst line = lines[ current ];\r\n\r\n\t\t\t// console.log( line );\r\n\r\n\t\t\tif ( line.includes( '=' ) ) {\r\n\r\n\t\t\t\tconst assignment = line.split( '=' );\r\n\r\n\t\t\t\tconst lhs = assignment[ 0 ].trim();\r\n\t\t\t\tconst rhs = assignment[ 1 ].trim();\r\n\r\n\t\t\t\tif ( rhs.endsWith( '{' ) ) {\r\n\r\n\t\t\t\t\tconst group = {};\r\n\t\t\t\t\tstack.push( group );\r\n\r\n\t\t\t\t\ttarget[ lhs ] = group;\r\n\t\t\t\t\ttarget = group;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttarget[ lhs ] = rhs;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( line.endsWith( '{' ) ) {\r\n\r\n\t\t\t\tconst group = target[ string ] || {};\r\n\t\t\t\tstack.push( group );\r\n\r\n\t\t\t\ttarget[ string ] = group;\r\n\t\t\t\ttarget = group;\r\n\r\n\t\t\t} else if ( line.endsWith( '}' ) ) {\r\n\r\n\t\t\t\tstack.pop();\r\n\r\n\t\t\t\tif ( stack.length === 0 ) return;\r\n\r\n\t\t\t\ttarget = stack[ stack.length - 1 ];\r\n\r\n\t\t\t} else if ( line.endsWith( '(' ) ) {\r\n\r\n\t\t\t\tconst meta = {};\r\n\t\t\t\tstack.push( meta );\r\n\r\n\t\t\t\tstring = line.split( '(' )[ 0 ].trim() || string;\r\n\r\n\t\t\t\ttarget[ string ] = meta;\r\n\t\t\t\ttarget = meta;\r\n\r\n\t\t\t} else if ( line.endsWith( ')' ) ) {\r\n\r\n\t\t\t\tstack.pop();\r\n\r\n\t\t\t\ttarget = stack[ stack.length - 1 ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstring = line.trim();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrent ++;\r\n\r\n\t\t\tif ( current < length ) {\r\n\r\n\t\t\t\tparseNextLine();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tparseNextLine();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass USDZLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( buffer ) {\r\n\r\n\t\tconst parser = new USDAParser();\r\n\r\n\t\tfunction parseAssets( zip ) {\r\n\r\n\t\t\tconst data = {};\r\n\t\t\tconst loader = new FileLoader();\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\t\tfor ( const filename in zip ) {\r\n\r\n\t\t\t\tif ( filename.endsWith( 'png' ) ) {\r\n\r\n\t\t\t\t\tconst blob = new Blob( [ zip[ filename ] ], { type: { type: 'image/png' } } );\r\n\t\t\t\t\tdata[ filename ] = URL.createObjectURL( blob );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( filename.endsWith( 'usd' ) ) {\r\n\r\n\t\t\t\t\tconst text = fflate.strFromU8( zip[ filename ] );\r\n\t\t\t\t\tdata[ filename ] = parser.parse( text );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tfunction findUSD( zip ) {\r\n\r\n\t\t\tfor ( const filename in zip ) {\r\n\r\n\t\t\t\tif ( filename.endsWith( 'usda' ) ) {\r\n\r\n\t\t\t\t\treturn zip[ filename ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst zip = fflate.unzipSync( new Uint8Array( buffer ) );\r\n\r\n\t\t// console.log( zip );\r\n\r\n\t\tconst assets = parseAssets( zip );\r\n\r\n\t\t// console.log( assets )\r\n\r\n\t\tconst file = findUSD( zip );\r\n\r\n\t\tif ( file === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.USDZLoader: No usda file found.' );\r\n\r\n\t\t\treturn new Group();\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// Parse file\r\n\r\n\t\tconst text = fflate.strFromU8( file );\r\n\t\tconst root = parser.parse( text );\r\n\r\n\t\t// Build scene\r\n\r\n\t\tfunction findMeshGeometry( data ) {\r\n\r\n\t\t\tif ( ! data ) return undefined;\r\n\r\n\t\t\tif ( 'prepend references' in data ) {\r\n\r\n\t\t\t\tconst reference = data[ 'prepend references' ];\r\n\t\t\t\tconst parts = reference.split( '@' );\r\n\t\t\t\tconst path = parts[ 1 ].replace( /^.\\//, '' );\r\n\t\t\t\tconst id = parts[ 2 ].replace( /^<\\//, '' ).replace( />$/, '' );\r\n\r\n\t\t\t\treturn findGeometry( assets[ path ], id );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn findGeometry( data );\r\n\r\n\t\t}\r\n\r\n\t\tfunction findGeometry( data, id ) {\r\n\r\n\t\t\tif ( id !== undefined ) {\r\n\r\n\t\t\t\tconst def = `def \"${id}\"`;\r\n\r\n\t\t\t\tif ( def in data ) {\r\n\r\n\t\t\t\t\treturn data[ def ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( const name in data ) {\r\n\r\n\t\t\t\tconst object = data[ name ];\r\n\r\n\t\t\t\tif ( name.startsWith( 'def Mesh' ) ) {\r\n\r\n\t\t\t\t\t// Move points to Mesh\r\n\r\n\t\t\t\t\tif ( 'point3f[] points' in data ) {\r\n\r\n\t\t\t\t\t\tobject[ 'point3f[] points' ] = data[ 'point3f[] points' ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Move st to Mesh\r\n\r\n\t\t\t\t\tif ( 'float2[] primvars:st' in data ) {\r\n\r\n\t\t\t\t\t\tobject[ 'float2[] primvars:st' ] = data[ 'float2[] primvars:st' ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Move st indices to Mesh\r\n\r\n\t\t\t\t\tif ( 'int[] primvars:st:indices' in data ) {\r\n\r\n\t\t\t\t\t\tobject[ 'int[] primvars:st:indices' ] = data[ 'int[] primvars:st:indices' ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ( typeof object === 'object' ) {\r\n\r\n\t\t\t\t\tconst geometry = findGeometry( object );\r\n\r\n\t\t\t\t\tif ( geometry ) return geometry;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildGeometry( data ) {\r\n\r\n\t\t\tif ( ! data ) return undefined;\r\n\r\n\t\t\tlet geometry = new BufferGeometry();\r\n\r\n\t\t\tif ( 'int[] faceVertexIndices' in data ) {\r\n\r\n\t\t\t\tconst indices = JSON.parse( data[ 'int[] faceVertexIndices' ] );\r\n\t\t\t\tgeometry.setIndex( new BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 'point3f[] points' in data ) {\r\n\r\n\t\t\t\tconst positions = JSON.parse( data[ 'point3f[] points' ].replace( /[()]*/g, '' ) );\r\n\t\t\t\tconst attribute = new BufferAttribute( new Float32Array( positions ), 3 );\r\n\t\t\t\tgeometry.setAttribute( 'position', attribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 'normal3f[] normals' in data ) {\r\n\r\n\t\t\t\tconst normals = JSON.parse( data[ 'normal3f[] normals' ].replace( /[()]*/g, '' ) );\r\n\t\t\t\tconst attribute = new BufferAttribute( new Float32Array( normals ), 3 );\r\n\t\t\t\tgeometry.setAttribute( 'normal', attribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgeometry.computeVertexNormals();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 'float2[] primvars:st' in data ) {\r\n\r\n\t\t\t\tdata[ 'texCoord2f[] primvars:st' ] = data[ 'float2[] primvars:st' ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 'texCoord2f[] primvars:st' in data ) {\r\n\r\n\t\t\t\tconst uvs = JSON.parse( data[ 'texCoord2f[] primvars:st' ].replace( /[()]*/g, '' ) );\r\n\t\t\t\tconst attribute = new BufferAttribute( new Float32Array( uvs ), 2 );\r\n\r\n\t\t\t\tif ( 'int[] primvars:st:indices' in data ) {\r\n\r\n\t\t\t\t\tgeometry = geometry.toNonIndexed();\r\n\r\n\t\t\t\t\tconst indices = JSON.parse( data[ 'int[] primvars:st:indices' ] );\r\n\t\t\t\t\tgeometry.setAttribute( 'uv', toFlatBufferAttribute( attribute, indices ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgeometry.setAttribute( 'uv', attribute );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\tfunction toFlatBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\tconst array = attribute.array;\r\n\t\t\tconst itemSize = attribute.itemSize;\r\n\r\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tlet index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( array2, itemSize );\r\n\r\n\t\t}\r\n\r\n\t\tfunction findMeshMaterial( data ) {\r\n\r\n\t\t\tif ( ! data ) return undefined;\r\n\r\n\t\t\tif ( 'rel material:binding' in data ) {\r\n\r\n\t\t\t\tconst reference = data[ 'rel material:binding' ];\r\n\t\t\t\tconst id = reference.replace( /^<\\//, '' ).replace( />$/, '' );\r\n\t\t\t\tconst parts = id.split( '/' );\r\n\r\n\t\t\t\treturn findMaterial( root, ` \"${ parts[ 1 ] }\"` );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn findMaterial( data );\r\n\r\n\t\t}\r\n\r\n\t\tfunction findMaterial( data, id = '' ) {\r\n\r\n\t\t\tfor ( const name in data ) {\r\n\r\n\t\t\t\tconst object = data[ name ];\r\n\r\n\t\t\t\tif ( name.startsWith( 'def Material' + id ) ) {\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( typeof object === 'object' ) {\r\n\r\n\t\t\t\t\tconst material = findMaterial( object, id );\r\n\r\n\t\t\t\t\tif ( material ) return material;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildMaterial( data ) {\r\n\r\n\t\t\tconst material = new MeshStandardMaterial();\r\n\r\n\t\t\tif ( data !== undefined ) {\r\n\r\n\t\t\t\tif ( 'def Shader \"PreviewSurface\"' in data ) {\r\n\r\n\t\t\t\t\tconst surface = data[ 'def Shader \"PreviewSurface\"' ];\r\n\r\n\t\t\t\t\tif ( 'color3f inputs:diffuseColor.connect' in surface ) {\r\n\r\n\t\t\t\t\t\tconst path = surface[ 'color3f inputs:diffuseColor.connect' ];\r\n\t\t\t\t\t\tconst sampler = findTexture( root, /(\\w+).output/.exec( path )[ 1 ] );\r\n\r\n\t\t\t\t\t\tmaterial.map = buildTexture( sampler );\r\n\t\t\t\t\t\tmaterial.map.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t\t} else if ( 'color3f inputs:diffuseColor' in surface ) {\r\n\r\n\t\t\t\t\t\tconst color = surface[ 'color3f inputs:diffuseColor' ].replace( /[()]*/g, '' );\r\n\t\t\t\t\t\tmaterial.color.fromArray( JSON.parse( '[' + color + ']' ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( 'normal3f inputs:normal.connect' in surface ) {\r\n\r\n\t\t\t\t\t\tconst path = surface[ 'normal3f inputs:normal.connect' ];\r\n\t\t\t\t\t\tconst sampler = findTexture( root, /(\\w+).output/.exec( path )[ 1 ] );\r\n\r\n\t\t\t\t\t\tmaterial.normalMap = buildTexture( sampler );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( 'float inputs:roughness' in surface ) {\r\n\r\n\t\t\t\t\t\tmaterial.roughness = parseFloat( surface[ 'float inputs:roughness' ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( 'float inputs:metallic' in surface ) {\r\n\r\n\t\t\t\t\t\tmaterial.metalness = parseFloat( surface[ 'float inputs:metallic' ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 'def Shader \"diffuseColor_texture\"' in data ) {\r\n\r\n\t\t\t\t\tconst sampler = data[ 'def Shader \"diffuseColor_texture\"' ];\r\n\r\n\t\t\t\t\tmaterial.map = buildTexture( sampler );\r\n\t\t\t\t\tmaterial.map.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 'def Shader \"normal_texture\"' in data ) {\r\n\r\n\t\t\t\t\tconst sampler = data[ 'def Shader \"normal_texture\"' ];\r\n\r\n\t\t\t\t\tmaterial.normalMap = buildTexture( sampler );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction findTexture( data, id ) {\r\n\r\n\t\t\tfor ( const name in data ) {\r\n\r\n\t\t\t\tconst object = data[ name ];\r\n\r\n\t\t\t\tif ( name.startsWith( `def Shader \"${ id }\"` ) ) {\r\n\r\n\t\t\t\t\treturn object;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( typeof object === 'object' ) {\r\n\r\n\t\t\t\t\tconst texture = findTexture( object, id );\r\n\r\n\t\t\t\t\tif ( texture ) return texture;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildTexture( data ) {\r\n\r\n\t\t\tif ( 'asset inputs:file' in data ) {\r\n\r\n\t\t\t\tconst path = data[ 'asset inputs:file' ].replace( /@*/g, '' );\r\n\r\n\t\t\t\tconst loader = new TextureLoader();\r\n\r\n\t\t\t\tconst texture = loader.load( assets[ path ] );\r\n\r\n\t\t\t\tconst map = {\r\n\t\t\t\t\t'\"clamp\"': ClampToEdgeWrapping,\r\n\t\t\t\t\t'\"mirror\"': MirroredRepeatWrapping,\r\n\t\t\t\t\t'\"repeat\"': RepeatWrapping\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif ( 'token inputs:wrapS' in data ) {\r\n\r\n\t\t\t\t\ttexture.wrapS = map[ data[ 'token inputs:wrapS' ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 'token inputs:wrapT' in data ) {\r\n\r\n\t\t\t\t\ttexture.wrapT = map[ data[ 'token inputs:wrapT' ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildObject( data ) {\r\n\r\n\t\t\tconst geometry = buildGeometry( findMeshGeometry( data ) );\r\n\t\t\tconst material = buildMaterial( findMeshMaterial( data ) );\r\n\r\n\t\t\tconst mesh = geometry ? new Mesh( geometry, material ) : new Object3D();\r\n\r\n\t\t\tif ( 'matrix4d xformOp:transform' in data ) {\r\n\r\n\t\t\t\tconst array = JSON.parse( '[' + data[ 'matrix4d xformOp:transform' ].replace( /[()]*/g, '' ) + ']' );\r\n\r\n\t\t\t\tmesh.matrix.fromArray( array );\r\n\t\t\t\tmesh.matrix.decompose( mesh.position, mesh.quaternion, mesh.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn mesh;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildHierarchy( data, group ) {\r\n\r\n\t\t\tfor ( const name in data ) {\r\n\r\n\t\t\t\tif ( name.startsWith( 'def Scope' ) ) {\r\n\r\n\t\t\t\t\tbuildHierarchy( data[ name ], group );\r\n\r\n\t\t\t\t} else if ( name.startsWith( 'def Xform' ) ) {\r\n\r\n\t\t\t\t\tconst mesh = buildObject( data[ name ] );\r\n\r\n\t\t\t\t\tif ( /def Xform \"(\\w+)\"/.test( name ) ) {\r\n\r\n\t\t\t\t\t\tmesh.name = /def Xform \"(\\w+)\"/.exec( name )[ 1 ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgroup.add( mesh );\r\n\r\n\t\t\t\t\tbuildHierarchy( data[ name ], mesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst group = new Group();\r\n\r\n\t\tbuildHierarchy( root, group );\r\n\r\n\t\treturn group;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { USDZLoader };\r\n"],"names":["USDAParser","_classCallCheck","_createClass","key","value","text","data","lines","split","length","current","string","target","stack","parseNextLine","line","includes","assignment","lhs","trim","rhs","endsWith","group","push","pop","meta","USDZLoader","_Loader","_inherits","_super","_createSuper","manager","call","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","parse","e","console","error","itemError","buffer","parser","zip","fflate","Uint8Array","assets","filename","blob","Blob","type","URL","createObjectURL","parseAssets","file","findUSD","undefined","warn","Group","root","findGeometry","id","def","concat","name","object","startsWith","geometry","buildGeometry","BufferGeometry","indices","JSON","setIndex","BufferAttribute","Uint16Array","positions","replace","attribute","Float32Array","setAttribute","normals","computeVertexNormals","uvs","toNonIndexed","array","itemSize","array2","constructor","index","index2","i","l","j","toFlatBufferAttribute","findMaterial","arguments","material","findTexture","texture","buildTexture","TextureLoader","map","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","wrapS","wrapT","buildObject","parts","findMeshGeometry","MeshStandardMaterial","surface","sampler","exec","encoding","sRGBEncoding","color","fromArray","normalMap","roughness","parseFloat","metalness","buildMaterial","findMeshMaterial","mesh","Mesh","Object3D","matrix","decompose","position","quaternion","scale","buildHierarchy","test","add","Loader"],"sourceRoot":""}