{"version":3,"file":"static/js/997.865831a9.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/VOXLoader.js"],"sourcesContent":["import {\r\n\tBufferGeometry,\r\n\tData3DTexture,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tLoader,\r\n\tLinearFilter,\r\n\tMesh,\r\n\tMeshStandardMaterial,\r\n\tNearestFilter,\r\n\tRedFormat\r\n} from '../../../build/three';\r\n\r\nclass VOXLoader extends Loader {\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( buffer ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( buffer ) {\r\n\r\n\t\tconst data = new DataView( buffer );\r\n\r\n\t\tconst id = data.getUint32( 0, true );\r\n\t\tconst version = data.getUint32( 4, true );\r\n\r\n\t\tif ( id !== 542658390 || version !== 150 ) {\r\n\r\n\t\t\tconsole.error( 'Not a valid VOX file' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst DEFAULT_PALETTE = [\r\n\t\t\t0x00000000, 0xffffffff, 0xffccffff, 0xff99ffff, 0xff66ffff, 0xff33ffff, 0xff00ffff, 0xffffccff,\r\n\t\t\t0xffccccff, 0xff99ccff, 0xff66ccff, 0xff33ccff, 0xff00ccff, 0xffff99ff, 0xffcc99ff, 0xff9999ff,\r\n\t\t\t0xff6699ff, 0xff3399ff, 0xff0099ff, 0xffff66ff, 0xffcc66ff, 0xff9966ff, 0xff6666ff, 0xff3366ff,\r\n\t\t\t0xff0066ff, 0xffff33ff, 0xffcc33ff, 0xff9933ff, 0xff6633ff, 0xff3333ff, 0xff0033ff, 0xffff00ff,\r\n\t\t\t0xffcc00ff, 0xff9900ff, 0xff6600ff, 0xff3300ff, 0xff0000ff, 0xffffffcc, 0xffccffcc, 0xff99ffcc,\r\n\t\t\t0xff66ffcc, 0xff33ffcc, 0xff00ffcc, 0xffffcccc, 0xffcccccc, 0xff99cccc, 0xff66cccc, 0xff33cccc,\r\n\t\t\t0xff00cccc, 0xffff99cc, 0xffcc99cc, 0xff9999cc, 0xff6699cc, 0xff3399cc, 0xff0099cc, 0xffff66cc,\r\n\t\t\t0xffcc66cc, 0xff9966cc, 0xff6666cc, 0xff3366cc, 0xff0066cc, 0xffff33cc, 0xffcc33cc, 0xff9933cc,\r\n\t\t\t0xff6633cc, 0xff3333cc, 0xff0033cc, 0xffff00cc, 0xffcc00cc, 0xff9900cc, 0xff6600cc, 0xff3300cc,\r\n\t\t\t0xff0000cc, 0xffffff99, 0xffccff99, 0xff99ff99, 0xff66ff99, 0xff33ff99, 0xff00ff99, 0xffffcc99,\r\n\t\t\t0xffcccc99, 0xff99cc99, 0xff66cc99, 0xff33cc99, 0xff00cc99, 0xffff9999, 0xffcc9999, 0xff999999,\r\n\t\t\t0xff669999, 0xff339999, 0xff009999, 0xffff6699, 0xffcc6699, 0xff996699, 0xff666699, 0xff336699,\r\n\t\t\t0xff006699, 0xffff3399, 0xffcc3399, 0xff993399, 0xff663399, 0xff333399, 0xff003399, 0xffff0099,\r\n\t\t\t0xffcc0099, 0xff990099, 0xff660099, 0xff330099, 0xff000099, 0xffffff66, 0xffccff66, 0xff99ff66,\r\n\t\t\t0xff66ff66, 0xff33ff66, 0xff00ff66, 0xffffcc66, 0xffcccc66, 0xff99cc66, 0xff66cc66, 0xff33cc66,\r\n\t\t\t0xff00cc66, 0xffff9966, 0xffcc9966, 0xff999966, 0xff669966, 0xff339966, 0xff009966, 0xffff6666,\r\n\t\t\t0xffcc6666, 0xff996666, 0xff666666, 0xff336666, 0xff006666, 0xffff3366, 0xffcc3366, 0xff993366,\r\n\t\t\t0xff663366, 0xff333366, 0xff003366, 0xffff0066, 0xffcc0066, 0xff990066, 0xff660066, 0xff330066,\r\n\t\t\t0xff000066, 0xffffff33, 0xffccff33, 0xff99ff33, 0xff66ff33, 0xff33ff33, 0xff00ff33, 0xffffcc33,\r\n\t\t\t0xffcccc33, 0xff99cc33, 0xff66cc33, 0xff33cc33, 0xff00cc33, 0xffff9933, 0xffcc9933, 0xff999933,\r\n\t\t\t0xff669933, 0xff339933, 0xff009933, 0xffff6633, 0xffcc6633, 0xff996633, 0xff666633, 0xff336633,\r\n\t\t\t0xff006633, 0xffff3333, 0xffcc3333, 0xff993333, 0xff663333, 0xff333333, 0xff003333, 0xffff0033,\r\n\t\t\t0xffcc0033, 0xff990033, 0xff660033, 0xff330033, 0xff000033, 0xffffff00, 0xffccff00, 0xff99ff00,\r\n\t\t\t0xff66ff00, 0xff33ff00, 0xff00ff00, 0xffffcc00, 0xffcccc00, 0xff99cc00, 0xff66cc00, 0xff33cc00,\r\n\t\t\t0xff00cc00, 0xffff9900, 0xffcc9900, 0xff999900, 0xff669900, 0xff339900, 0xff009900, 0xffff6600,\r\n\t\t\t0xffcc6600, 0xff996600, 0xff666600, 0xff336600, 0xff006600, 0xffff3300, 0xffcc3300, 0xff993300,\r\n\t\t\t0xff663300, 0xff333300, 0xff003300, 0xffff0000, 0xffcc0000, 0xff990000, 0xff660000, 0xff330000,\r\n\t\t\t0xff0000ee, 0xff0000dd, 0xff0000bb, 0xff0000aa, 0xff000088, 0xff000077, 0xff000055, 0xff000044,\r\n\t\t\t0xff000022, 0xff000011, 0xff00ee00, 0xff00dd00, 0xff00bb00, 0xff00aa00, 0xff008800, 0xff007700,\r\n\t\t\t0xff005500, 0xff004400, 0xff002200, 0xff001100, 0xffee0000, 0xffdd0000, 0xffbb0000, 0xffaa0000,\r\n\t\t\t0xff880000, 0xff770000, 0xff550000, 0xff440000, 0xff220000, 0xff110000, 0xffeeeeee, 0xffdddddd,\r\n\t\t\t0xffbbbbbb, 0xffaaaaaa, 0xff888888, 0xff777777, 0xff555555, 0xff444444, 0xff222222, 0xff111111\r\n\t\t];\r\n\r\n\t\tlet i = 8;\r\n\r\n\t\tlet chunk;\r\n\t\tconst chunks = [];\r\n\r\n\t\twhile ( i < data.byteLength ) {\r\n\r\n\t\t\tlet id = '';\r\n\r\n\t\t\tfor ( let j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\tid += String.fromCharCode( data.getUint8( i ++ ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst chunkSize = data.getUint32( i, true ); i += 4;\r\n\t\t\ti += 4; // childChunks\r\n\r\n\t\t\tif ( id === 'SIZE' ) {\r\n\r\n\t\t\t\tconst x = data.getUint32( i, true ); i += 4;\r\n\t\t\t\tconst y = data.getUint32( i, true ); i += 4;\r\n\t\t\t\tconst z = data.getUint32( i, true ); i += 4;\r\n\r\n\t\t\t\tchunk = {\r\n\t\t\t\t\tpalette: DEFAULT_PALETTE,\r\n\t\t\t\t\tsize: { x: x, y: y, z: z },\r\n\t\t\t\t};\r\n\r\n\t\t\t\tchunks.push( chunk );\r\n\r\n\t\t\t\ti += chunkSize - ( 3 * 4 );\r\n\r\n\t\t\t} else if ( id === 'XYZI' ) {\r\n\r\n\t\t\t\tconst numVoxels = data.getUint32( i, true ); i += 4;\r\n\t\t\t\tchunk.data = new Uint8Array( buffer, i, numVoxels * 4 );\r\n\r\n\t\t\t\ti += numVoxels * 4;\r\n\r\n\t\t\t} else if ( id === 'RGBA' ) {\r\n\r\n\t\t\t\tconst palette = [ 0 ];\r\n\r\n\t\t\t\tfor ( let j = 0; j < 256; j ++ ) {\r\n\r\n\t\t\t\t\tpalette[ j + 1 ] = data.getUint32( i, true ); i += 4;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchunk.palette = palette;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// console.log( id, chunkSize, childChunks );\r\n\r\n\t\t\t\ti += chunkSize;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass VOXMesh extends Mesh {\r\n\r\n\tconstructor( chunk ) {\r\n\r\n\t\tconst data = chunk.data;\r\n\t\tconst size = chunk.size;\r\n\t\tconst palette = chunk.palette;\r\n\r\n\t\t//\r\n\r\n\t\tconst vertices = [];\r\n\t\tconst colors = [];\r\n\r\n\t\tconst nx = [ 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1 ];\r\n\t\tconst px = [ 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0 ];\r\n\t\tconst py = [ 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1 ];\r\n\t\tconst ny = [ 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0 ];\r\n\t\tconst nz = [ 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0 ];\r\n\t\tconst pz = [ 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1 ];\r\n\r\n\t\tfunction add( tile, x, y, z, r, g, b ) {\r\n\r\n\t\t\tx -= size.x / 2;\r\n\t\t\ty -= size.z / 2;\r\n\t\t\tz += size.y / 2;\r\n\r\n\t\t\tfor ( let i = 0; i < 18; i += 3 ) {\r\n\r\n\t\t\t\tvertices.push( tile[ i + 0 ] + x, tile[ i + 1 ] + y, tile[ i + 2 ] + z );\r\n\t\t\t\tcolors.push( r, g, b );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Store data in a volume for sampling\r\n\r\n\t\tconst offsety = size.x;\r\n\t\tconst offsetz = size.x * size.y;\r\n\r\n\t\tconst array = new Uint8Array( size.x * size.y * size.z );\r\n\r\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\r\n\r\n\t\t\tconst x = data[ j + 0 ];\r\n\t\t\tconst y = data[ j + 1 ];\r\n\t\t\tconst z = data[ j + 2 ];\r\n\r\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\r\n\r\n\t\t\tarray[ index ] = 255;\r\n\r\n\t\t}\r\n\r\n\t\t// Construct geometry\r\n\r\n\t\tlet hasColors = false;\r\n\r\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\r\n\r\n\t\t\tconst x = data[ j + 0 ];\r\n\t\t\tconst y = data[ j + 1 ];\r\n\t\t\tconst z = data[ j + 2 ];\r\n\t\t\tconst c = data[ j + 3 ];\r\n\r\n\t\t\tconst hex = palette[ c ];\r\n\t\t\tconst r = ( hex >> 0 & 0xff ) / 0xff;\r\n\t\t\tconst g = ( hex >> 8 & 0xff ) / 0xff;\r\n\t\t\tconst b = ( hex >> 16 & 0xff ) / 0xff;\r\n\r\n\t\t\tif ( r > 0 || g > 0 || b > 0 ) hasColors = true;\r\n\r\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\r\n\r\n\t\t\tif ( array[ index + 1 ] === 0 || x === size.x - 1 ) add( px, x, z, - y, r, g, b );\r\n\t\t\tif ( array[ index - 1 ] === 0 || x === 0 ) add( nx, x, z, - y, r, g, b );\r\n\t\t\tif ( array[ index + offsety ] === 0 || y === size.y - 1 ) add( ny, x, z, - y, r, g, b );\r\n\t\t\tif ( array[ index - offsety ] === 0 || y === 0 ) add( py, x, z, - y, r, g, b );\r\n\t\t\tif ( array[ index + offsetz ] === 0 || z === size.z - 1 ) add( pz, x, z, - y, r, g, b );\r\n\t\t\tif ( array[ index - offsetz ] === 0 || z === 0 ) add( nz, x, z, - y, r, g, b );\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.computeVertexNormals();\r\n\r\n\t\tconst material = new MeshStandardMaterial();\r\n\r\n\t\tif ( hasColors ) {\r\n\r\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\r\n\t\t\tmaterial.vertexColors = true;\r\n\r\n\t\t}\r\n\r\n\t\tsuper( geometry, material );\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass VOXData3DTexture extends Data3DTexture {\r\n\r\n\tconstructor( chunk ) {\r\n\r\n\t\tconst data = chunk.data;\r\n\t\tconst size = chunk.size;\r\n\r\n\t\tconst offsety = size.x;\r\n\t\tconst offsetz = size.x * size.y;\r\n\r\n\t\tconst array = new Uint8Array( size.x * size.y * size.z );\r\n\r\n\t\tfor ( let j = 0; j < data.length; j += 4 ) {\r\n\r\n\t\t\tconst x = data[ j + 0 ];\r\n\t\t\tconst y = data[ j + 1 ];\r\n\t\t\tconst z = data[ j + 2 ];\r\n\r\n\t\t\tconst index = x + ( y * offsety ) + ( z * offsetz );\r\n\r\n\t\t\tarray[ index ] = 255;\r\n\r\n\t\t}\r\n\r\n\t\tsuper( array, size.x, size.y, size.z );\r\n\r\n\t\tthis.format = RedFormat;\r\n\t\tthis.minFilter = NearestFilter;\r\n\t\tthis.magFilter = LinearFilter;\r\n\t\tthis.unpackAlignment = 1;\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { VOXLoader, VOXMesh, VOXData3DTexture };\r\n"],"names":["VOXLoader","_Loader","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","manager","setPath","path","setResponseType","setRequestHeader","requestHeader","load","buffer","parse","e","console","error","itemError","data","DataView","id","getUint32","version","chunk","DEFAULT_PALETTE","i","chunks","byteLength","j","String","fromCharCode","getUint8","chunkSize","x","y","z","palette","size","push","numVoxels","Uint8Array","Loader","VOXMesh","_Mesh","_super2","vertices","colors","nx","px","py","ny","nz","pz","add","tile","r","g","b","offsety","offsetz","array","length","hasColors","hex","index","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","computeVertexNormals","material","MeshStandardMaterial","vertexColors","call","Mesh","VOXData3DTexture","_Data3DTexture","_super3","_this","format","RedFormat","minFilter","NearestFilter","magFilter","LinearFilter","unpackAlignment","needsUpdate","Data3DTexture"],"sourceRoot":""}