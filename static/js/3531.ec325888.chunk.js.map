{"version":3,"file":"static/js/3531.ec325888.chunk.js","mappings":"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","sources":["common/loading/circularProgressWithLabel.js","common/loading/loadingOverlay.js","ezyvuecore/models/user.js","common/ui/imageBox.js","members/home.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default function CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress {...props} />\r\n      {\r\n        props.variant === 'determinate' &&\r\n        <Box\r\n          top={0}\r\n          left={0}\r\n          bottom={0}\r\n          right={0}\r\n          position=\"absolute\"\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">\r\n            <span style={{ fontSize: props.fontSize }}>\r\n              {\r\n                `${Math.round(props.value)}%`\r\n              }\r\n            </span>\r\n          </Typography>\r\n        </Box>\r\n      }\r\n    </Box>\r\n  );\r\n}\r\n\r\nCircularProgressWithLabel.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  fontSize: PropTypes.string,\r\n  variant: PropTypes.string\r\n};\r\n","import React, {Fragment} from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgressWithLabel from './circularProgressWithLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  backdrop: {\r\n    zIndex: 5,\r\n    color: 'white',\r\n    backgroundColor: 'rgb(255, 255, 255)'\r\n  },\r\n}));\r\n\r\nexport default function LoadingOverlay(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Fragment>\r\n        <Backdrop className={classes.backdrop} open={props.show} transitionDuration={{exit: 1000, enter: 0, appear: 0}}>\r\n            <div style={{textAlign: \"center\"}}>\r\n                <CircularProgressWithLabel variant={props.variant} color=\"primary\" value={props.value} size={85} fontSize='24px' />\r\n            </div>\r\n        </Backdrop>\r\n        {props.children}\r\n      </Fragment>\r\n  );\r\n}\r\n\r\nLoadingOverlay.defaultProps = {\r\n  variant: 'indeterminate',\r\n  value: 0\r\n};\r\n\r\nLoadingOverlay.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  value: PropTypes.number,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.array,\r\n    PropTypes.object\r\n  ]),\r\n  variant: PropTypes.string // indeterminate or determinate\r\n};","export const UserRoles = {\r\n  USER: 1,\r\n  DESIGNER: 2,\r\n  ADMINISTRATOR: 3,\r\n  WEBSITE_ADMINISTRATOR: 4,\r\n  WEBSITE_OWNER: 5,\r\n  COUNT: 5,\r\n};\r\n\r\nexport const Permissions = {\r\n  MEMBER_ACCESS: 1,\r\n  CREATE_UPDATE_ASSET: 2,\r\n  DELETE_ASSET: 3,              // DEPRECATED\r\n  ADMIN_ACCESS: 4,\r\n  MASTER_ADMIN_ACCESS: 10,\r\n  COUNT: 5,\r\n};\r\n\r\nexport class User {\r\n  constructor(FirstName, LastName, Email, Password, LastAccessed, StoreAccountId, RoleIdCode, PrimaryAccountHolder) {\r\n    this.FirstName = FirstName;\r\n    this.LastName = LastName;\r\n    this.Email = Email;\r\n    this.Password = Password;\r\n    this.LastAccessed = LastAccessed;\r\n    this.StoreAccountId = StoreAccountId;\r\n    this.RoleIdCode = RoleIdCode;\r\n    this.PrimaryAccountHolder = PrimaryAccountHolder;\r\n  }\r\n}\r\n\r\n// Permission value for a given role in a store account\r\nexport class UserRolePermission {\r\n  constructor(UserRoleId, PermissionId, StoreAccountId, Granted) {\r\n    this.UserRoleId = UserRoleId;\r\n    this.PermissionId = PermissionId;\r\n    this.StoreAccountId = StoreAccountId; // Store Account\r\n    this.Granted = Granted;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class ImageBox extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className='image-box'>\r\n                <a href={this.props.link}>\r\n                    <img alt='' src={this.props.img} />\r\n                </a>\r\n                <div className='image-box-name'>\r\n                    {this.props.name}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nImageBox.propTypes = {\r\n    link: PropTypes.string,\r\n    img: PropTypes.string,\r\n    name: PropTypes.string\r\n}","import React, { Fragment } from 'react';\r\nimport AuthManager from 'ezyvuecore/core/auth/authManager';\r\nimport LoadingOverlay from 'common/loading/loadingOverlay';\r\nimport Services from 'ezyvuecore/services/services';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Link } from 'react-router-dom';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Checkbox } from '../../node_modules/@material-ui/core/index';\r\nimport { differenceInDays } from 'date-fns';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport ImageBox from 'common/ui/imageBox';\r\nimport { Permissions } from 'ezyvuecore/models/user';\r\n\r\n\r\nconst labels = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December',\r\n];\r\n\r\nexport default class UserHome extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showLoadingOverlay: false,\r\n            showWelcome: false,\r\n            alertMessage: '',\r\n            latestProjects: [],\r\n            projects: [],\r\n            selection: 0,\r\n            plan: {\r\n                features: {\r\n                    viewReporting: true\r\n                }\r\n            },\r\n            subs: {},\r\n            year: new Date().getFullYear()\r\n        }\r\n\r\n        this.onProjectChange = this.onProjectChange.bind(this);\r\n        this.onWelcomeClosed = this.onWelcomeClosed.bind(this);\r\n        this.onYearChange = this.onYearChange.bind(this);\r\n\r\n        Chart.register(...registerables);\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        if (this.viewsChart)\r\n            this.viewsChart.destroy();\r\n\r\n        if (this.totalViewsChart)\r\n            this.totalViewsChart.destroy();\r\n\r\n        if (this.storageChart)\r\n            this.storageChart.destroy();\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.setState({ showLoadingOverlay: true });\r\n\r\n        try {\r\n            const cookie = AuthManager.getAuthCookie();\r\n            if (!cookie) {\r\n                window.location = '/account/login';\r\n                return;\r\n            }\r\n\r\n            const projects = await Services.projectService.getProjects(cookie.storeAccountId);\r\n            const latestProjects = projects.reverse().slice(0, 4);\r\n\r\n            this.account = await Services.accountService.getById(AuthManager.getAuthCookie().storeAccountId);\r\n\r\n            const subs = this.account.subscriptionHistory[this.account.subscriptionHistory.length - 1];\r\n\r\n            const plan = await Services.planService.getById(subs.planId);\r\n            if (!plan)\r\n                throw new Error('plan not found');\r\n\r\n            const adminPerm = cookie.permissions.find(perm => perm.PermissionId === Permissions.ADMIN_ACCESS);\r\n\r\n            // create views per month chart\r\n            const monthlyTotals = await this.getMonthlyTotals(null, new Date().getFullYear());\r\n            this.viewsChart = this.createViewsChart('chart', monthlyTotals);\r\n\r\n            const totalViews = monthlyTotals[new Date().getMonth()];\r\n\r\n            const status = await Services.accountService.getStatus(cookie.storeAccountId)\r\n\r\n            // create storage chart\r\n            let usedMb = status.totalAssetSize / 1000000;\r\n            if (usedMb > plan.features.maxAssetSize)\r\n                usedMb = plan.features.maxAssetSize;\r\n\r\n            this.setState({\r\n                hasAdminAccess: adminPerm && adminPerm.Granted,\r\n                plan: plan,\r\n                subs: subs,\r\n                showWelcome: !this.account.welcomeDisabled,\r\n                mbUsed: usedMb.toFixed(2),\r\n                totalViews: totalViews,\r\n                projects: projects,\r\n                latestProjects: latestProjects,\r\n            });\r\n\r\n            if (document.getElementById(\"storageChart\"))\r\n                this.storageChart = this.createDoughnutChart(\"storageChart\", '', usedMb, plan.features.maxAssetSize - usedMb);\r\n\r\n            // create models uploaded chart\r\n            /*  if (document.getElementById(\"modelUsageChart\"))\r\n                 this.modelUsageChart = this.createDoughnutChart(\"modelUsageChart\", '', projects.length, plan.features.maxModelCount - projects.length);\r\n  */\r\n            // create total views for this month chart\r\n            this.totalViewsChart = this.createDoughnutChart(\"totalViewsChart\", '', totalViews, plan.features.maxViews - totalViews);\r\n\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            this.displayMessage('An error occured. Please try again', 'error');\r\n        }\r\n        finally {\r\n            this.setState({ showLoadingOverlay: false });\r\n        }\r\n    }\r\n\r\n    async onProjectChange(e) {\r\n        const project = e.target.value > 0 ? this.state.projects[e.target.value - 1] : null;\r\n\r\n        const totals = await this.getMonthlyTotals(project ? project._id : null, this.state.year);\r\n\r\n        this.bindMonthlyTotals(totals, project ? project.Name : 'All Models');\r\n\r\n        this.setState({ selection: e.target.value });\r\n    }\r\n\r\n    async onYearChange(e) {\r\n        const project = this.state.selection > 0 ? this.state.projects[this.state.selection - 1] : null;\r\n\r\n        const totals = await this.getMonthlyTotals(project ? project._id : null, e.target.value);\r\n\r\n        this.bindMonthlyTotals(totals, project ? project.Name : 'All Models');\r\n\r\n        this.setState({ year: e.target.value });\r\n    }\r\n\r\n    async getMonthlyTotals(projectId, year) {\r\n        const monthlyTotals = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n\r\n        const totals = await Services.projectService.getProjectViews(this.account._id, projectId, year);\r\n\r\n        totals.forEach(total => {\r\n            const month = parseInt(total._id);\r\n\r\n            monthlyTotals[month] = total.total;\r\n        });\r\n\r\n        return monthlyTotals;\r\n    }\r\n\r\n    bindMonthlyTotals(monthlyTotals, label) {\r\n        this.viewsChart.data.datasets[0].data = monthlyTotals;\r\n        this.viewsChart.data.datasets[0].label = label;\r\n\r\n        this.viewsChart.update();\r\n    }\r\n\r\n    createDoughnutChart(elemId, title, value1, value2) {\r\n        const data = {\r\n            datasets: [{\r\n                backgroundColor: ['#bbb', '#eee'],\r\n                borderColor: '#aaa',\r\n                data: [value1, value2],\r\n            }]\r\n        };\r\n\r\n        const config = {\r\n            type: 'doughnut',\r\n            data: data,\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: true,\r\n                /*                 plugins: {\r\n                                    legend: {\r\n                                        position: 'top',\r\n                                    },\r\n                                    title: {\r\n                                        display: true,\r\n                                        text: title,\r\n                                        color: '#aaa',\r\n                                        font: { size: 20 }\r\n                                    }\r\n                                } */\r\n            },\r\n        };\r\n\r\n        return new Chart(\r\n            document.getElementById(elemId),\r\n            config\r\n        );\r\n    }\r\n\r\n    createViewsChart(elemId, monthlyTotals) {\r\n        const data = {\r\n            labels: labels,\r\n            datasets: [{\r\n                label: 'All projects',\r\n                backgroundColor: 'orange',\r\n                borderColor: 'orange',\r\n                data: monthlyTotals,\r\n            }]\r\n        };\r\n\r\n        const config = {\r\n            type: 'bar',\r\n            data,\r\n            options: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    x: {\r\n                        grid: {\r\n                            color: '#fff'\r\n                        },\r\n                    },\r\n                    y: {\r\n                        ticks: {\r\n                            precision: 0\r\n                        },\r\n                        grid: {\r\n                            color: '#ccc'\r\n                        },\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        return new Chart(\r\n            document.getElementById(elemId),\r\n            config\r\n        );\r\n    }\r\n\r\n    onWelcomeClosed() {\r\n        if (this.state.doNotShowChecked) {\r\n            this.account.welcomeDisabled = true;\r\n\r\n            Services.accountService.update(this.account);\r\n\r\n        }\r\n\r\n        this.setState({ showWelcome: false });\r\n    }\r\n\r\n    displayMessage(msg, type = 'success') {\r\n        this.setState({\r\n            alertMessage: msg,\r\n            alertType: type\r\n        });\r\n    }\r\n\r\n    renderWelcomeMessage() {\r\n        return (\r\n            <Dialog\r\n                fullWidth={false}\r\n                maxWidth=\"md\"\r\n                open={this.state.showWelcome}>\r\n                <DialogContent>\r\n                    <h2 style={{ textAlign: 'center' }}>\r\n                        Welcome to Ezyvue\r\n                    </h2>\r\n                    <h3>Add 3d models to your website in a few easy steps</h3>\r\n                    Here are a few links to the <a href='/help'>help center</a> to get you started:<br /><br />\r\n                    <ul>\r\n                        <li>\r\n                            <a href={`${process.env.REACT_APP_CLIENT_URL}/help/uploading`} target='_blank' rel='noopener noreferrer'>\r\n                                Creating a new project\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href={`${process.env.REACT_APP_CLIENT_URL}/help/projectDetails`} target='_blank' rel='noopener noreferrer'>\r\n                                Viewing, editing and publishing a project\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href={`${process.env.REACT_APP_CLIENT_URL}/help/editing`} target='_blank' rel='noopener noreferrer'>\r\n                                Using Ezyvue Studio\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a href={`${process.env.REACT_APP_CLIENT_URL}/help/viewer`} target='_blank' rel='noopener noreferrer'>\r\n                                Using the Web Viewer\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                    <br />\r\n                    <Checkbox\r\n                        checked={this.state.doNotShowChecked}\r\n                        onChange={(e, value) => this.setState({ doNotShowChecked: value })} />\r\n                    Don&apos;t show this dialog again\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={this.onWelcomeClosed}>\r\n                        <span>OK</span>\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const years = [];\r\n        let thisYear = new Date().getFullYear();\r\n\r\n        let expiresText = '';\r\n\r\n        if (this.state.subs.expiryDate) {\r\n            const daysLeft = differenceInDays(new Date(this.state.subs.expiryDate), new Date()) + 1;\r\n            if (daysLeft > 0)\r\n                expiresText = `Your trial expires in ${daysLeft} days`;\r\n            else\r\n                expiresText = `Your trial expires today`;\r\n        }\r\n\r\n        for (let year = 2021; year <= thisYear; ++year)\r\n            years.push(year);\r\n\r\n        return (\r\n            <LoadingOverlay variant='indeterminate' show={this.state.showLoadingOverlay} value={this.state.progress}>\r\n                {\r\n                    this.renderWelcomeMessage()\r\n                }\r\n                <div className='std-page center-page-x center'>\r\n                    <h1>Dashboard</h1>\r\n                    <div className='plan-box-container'>\r\n                        {/* <div className='plan-box'>\r\n                            <div style={{ margin: 'auto' }}>\r\n                                Write a review on\r\n                                <a target='_blank' rel='noopener noreferrer'\r\n                                    href='https://reviews.capterra.com/new/248507/68bd0d99-b71b-4137-96cb-1754d8e711ad?lang=en'>\r\n\r\n                                    <img src={require('assets/images/capterra.png')}\r\n                                        alt=''\r\n                                        style={{ display: 'block', margin: '10px auto' }} />\r\n                                </a>\r\n                            </div>\r\n                        </div> */}\r\n                        <div className='plan-box'>\r\n                            <div style={{ margin: 'auto' }}>\r\n                                <img src={require('assets/images/feedback.png')} alt='' style={{ display: 'block', margin: '10px auto' }} />\r\n                                <Link to='/contact'>Leave feedback</Link>\r\n                            </div>\r\n                        </div>\r\n                        <div className='plan-box'>\r\n                            <div style={{ margin: 'auto' }}>\r\n                                <img src={require('assets/images/idea.png')} alt='' style={{ display: 'block', margin: '10px auto' }} />\r\n                                <Link to='/contact'>Feature request</Link>\r\n                            </div>\r\n                        </div>\r\n                        <div className='plan-box'>\r\n                            <div style={{ fontSize: 'large', margin: 'auto' }}>{this.state.plan.name} plan</div>\r\n                            <div className='primary-text-col'>\r\n                                {\r\n                                    this.state.subs.expiryDate ?\r\n                                        <div>\r\n                                            {\r\n                                                expiresText\r\n                                            }\r\n                                            <br />\r\n                                            {\r\n                                                this.state.hasAdminAccess &&\r\n                                                <Link to='/account/purchasePlan'>Upgrade plan</Link>\r\n                                            }\r\n                                        </div>\r\n                                        :\r\n                                        <div>\r\n                                            {\r\n                                                this.state.plan.isUpgradeable &&\r\n                                                <Link to='/account/purchasePlan'>Upgrade plan</Link>\r\n                                            }\r\n                                        </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className='page-box'>\r\n                        <div className='flexcol' style={{ margin: '25px 0' }}>\r\n                            {\r\n                                this.state.latestProjects.length > 0 &&\r\n                                <Fragment>\r\n                                    <h2>Latest projects</h2>\r\n                                    <div className='flexrow'>\r\n                                        {\r\n                                            this.state.latestProjects.map((project, i) => {\r\n                                                let thumbnail = `${process.env.REACT_APP_FILE_SERVER_URL}/files/images/modelplaceholder.jpg`;\r\n\r\n                                                if (project.ThumbnailFileMetadata)\r\n                                                    thumbnail = `${process.env.REACT_APP_FILE_SERVER_URL}/files/${project.AssetPath}/thumbnail.jpg`;\r\n\r\n                                                return (\r\n                                                    <ImageBox key={i} link={`/manageProject?id=${project._id}`}\r\n                                                        img={thumbnail}\r\n                                                        name={project.Name} />\r\n                                                );\r\n                                            })\r\n                                        }\r\n                                        <Link style={{ marginLeft: '10px' }} to='/projectManager'>view all</Link>\r\n                                    </div>\r\n                                </Fragment>\r\n                            }\r\n                            {\r\n                                this.state.latestProjects.length === 0 &&\r\n                                <div>\r\n                                    <h2>My Projects</h2>\r\n                                    You don&apos;t have any projects at the moment.<br /><br />\r\n                                    <Link to='/uploadProjectAssets'>\r\n                                        <Button\r\n                                            variant='contained'\r\n                                            color='primary'\r\n                                            size='large'\r\n                                            disabled={this.state.uploadDisabled}\r\n                                            startIcon={<CloudUploadIcon fontSize='large' style={{ color: 'black' }} />} >\r\n                                            Create a New Project\r\n                                        </Button>\r\n                                    </Link>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                    <div className='page-box'>\r\n                        <h2>Views</h2>\r\n                        <h3>Views this month</h3>\r\n                        {\r\n                            (this.state.plan.features.maxViews > 0) &&\r\n                            <div className='doughnut-container'>\r\n                                {labels[new Date().getMonth()]} {this.state.totalViews}&nbsp;/&nbsp;{this.state.plan.features.maxViews}&nbsp;<br />\r\n                                <canvas id=\"totalViewsChart\"></canvas>\r\n                            </div>\r\n                        }\r\n                        {\r\n                            this.state.plan.features.viewReporting &&\r\n                            <div className='flexcol' style={{ margin: '25px 0' }}>\r\n                                <h3>Views by month</h3>\r\n                                <div className='chart-container'>\r\n                                    <canvas id=\"chart\"></canvas>\r\n                                </div>\r\n                                <div style={{ display: 'flex', flexWrap: 'wrap', margin: '20px 0' }}>\r\n                                    <div>\r\n                                        <InputLabel>Project</InputLabel>\r\n                                        <Select\r\n                                            value={this.state.selection}\r\n                                            onChange={this.onProjectChange}\r\n                                            style={{ minWidth: '200px', marginRight: '25px' }} >\r\n                                            <option value={0}>All</option>\r\n                                            {\r\n                                                this.state.projects.map((project, i) => {\r\n                                                    return (\r\n                                                        <option key={i} value={i + 1} style={{ maxWidth: '280px' }}>{project.Name}</option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Select>\r\n                                    </div>\r\n                                    <div>\r\n                                        <InputLabel>Year</InputLabel>\r\n                                        <Select\r\n                                            value={this.state.year}\r\n                                            onChange={this.onYearChange}\r\n                                            style={{ minWidth: '200px' }} >\r\n                                            {\r\n                                                years.map((year, i) => {\r\n                                                    return (\r\n                                                        <option key={i} value={year}>{year}</option>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n                                        </Select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className='page-box'>\r\n                        <div className='flexcol' style={{ margin: '25px 0' }}>\r\n                            <h3>Usage</h3>\r\n                            {\r\n                                (this.state.plan.features.maxAssetSize > 0) &&\r\n                                <div className='doughnut-container'>\r\n                                    Storage used: {this.state.mbUsed}&nbsp;MB&nbsp;/&nbsp;{this.state.plan.features.maxAssetSize}&nbsp;MB<br />\r\n                                    <canvas id=\"storageChart\"></canvas>\r\n                                </div>\r\n                            }\r\n                            {/* <div className='flexrow center-page-x'>\r\n                                {\r\n                                    (this.state.plan.features.maxModelCount > 0) &&\r\n                                    <div className='doughnut-container'>\r\n                                        Total<br /> {this.state.projects.length}&nbsp;/&nbsp;{this.state.plan.features.maxModelCount}&nbsp;<br />\r\n                                        <canvas id=\"modelUsageChart\"></canvas>\r\n                                    </div>\r\n                                }\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                    <br />\r\n                </div>\r\n            </LoadingOverlay>\r\n        );\r\n    }\r\n}"],"names":["CircularProgressWithLabel","props","_jsxs","Box","position","display","children","_jsx","CircularProgress","_objectSpread","variant","top","left","bottom","right","alignItems","justifyContent","Typography","component","color","style","fontSize","concat","Math","round","value","useStyles","makeStyles","backdrop","zIndex","backgroundColor","LoadingOverlay","classes","Fragment","Backdrop","className","open","show","transitionDuration","exit","enter","appear","textAlign","size","defaultProps","Permissions","MEMBER_ACCESS","CREATE_UPDATE_ASSET","DELETE_ASSET","ADMIN_ACCESS","MASTER_ADMIN_ACCESS","COUNT","ImageBox","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","href","this","link","alt","src","img","name","React","labels","UserHome","_this","call","state","showLoadingOverlay","showWelcome","alertMessage","latestProjects","projects","selection","plan","features","viewReporting","subs","year","Date","getFullYear","onProjectChange","bind","_assertThisInitialized","onWelcomeClosed","onYearChange","Chart","register","_toConsumableArray","registerables","_componentWillUnmount","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","viewsChart","destroy","totalViewsChart","storageChart","stop","_componentDidMount","_callee2","cookie","adminPerm","monthlyTotals","totalViews","status","usedMb","_context2","setState","AuthManager","getAuthCookie","window","location","abrupt","Services","projectService","getProjects","storeAccountId","sent","reverse","slice","accountService","getById","account","subscriptionHistory","length","planService","planId","Error","permissions","find","perm","PermissionId","getMonthlyTotals","createViewsChart","getMonth","getStatus","totalAssetSize","maxAssetSize","hasAdminAccess","Granted","welcomeDisabled","mbUsed","toFixed","document","getElementById","createDoughnutChart","maxViews","t0","console","error","displayMessage","finish","_onProjectChange","_callee3","e","project","totals","_context3","target","_id","bindMonthlyTotals","Name","_x","_onYearChange","_callee4","_context4","_x2","_getMonthlyTotals","_callee5","projectId","_context5","getProjectViews","forEach","total","month","parseInt","_x3","_x4","label","data","datasets","update","elemId","title","value1","value2","config","type","borderColor","options","responsive","maintainAspectRatio","scales","x","grid","y","ticks","precision","doNotShowChecked","msg","undefined","alertType","_this2","Dialog","fullWidth","maxWidth","DialogContent","process","rel","Checkbox","checked","onChange","DialogActions","Button","onClick","years","thisYear","expiresText","expiryDate","daysLeft","differenceInDays","push","progress","renderWelcomeMessage","margin","require","Link","to","isUpgradeable","map","i","thumbnail","ThumbnailFileMetadata","AssetPath","marginLeft","disabled","uploadDisabled","startIcon","CloudUploadIcon","id","flexWrap","InputLabel","Select","minWidth","marginRight"],"sourceRoot":""}