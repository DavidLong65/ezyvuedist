{"version":3,"file":"static/js/556.013a8028.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/3MFLoader.js"],"sourcesContent":["import {\r\n\tBufferAttribute,\r\n\tBufferGeometry,\r\n\tClampToEdgeWrapping,\r\n\tColor,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tGroup,\r\n\tLinearFilter,\r\n\tLinearMipmapLinearFilter,\r\n\tLoader,\r\n\tMatrix4,\r\n\tMesh,\r\n\tMeshPhongMaterial,\r\n\tMeshStandardMaterial,\r\n\tMirroredRepeatWrapping,\r\n\tNearestFilter,\r\n\tRepeatWrapping,\r\n\tTextureLoader,\r\n\tsRGBEncoding\r\n} from '../../../build/three';\r\nimport * as fflate from '../libs/fflate.module.js';\r\n\r\n/**\r\n *\r\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\r\n *\r\n * The following features from the core specification are supported:\r\n *\r\n * - 3D Models\r\n * - Object Resources (Meshes and Components)\r\n * - Material Resources (Base Materials)\r\n *\r\n * 3MF Materials and Properties Extension are only partially supported.\r\n *\r\n * - Texture 2D\r\n * - Texture 2D Groups\r\n * - Color Groups (Vertex Colors)\r\n * - Metallic Display Properties (PBR)\r\n */\r\n\r\nclass ThreeMFLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.availableExtensions = [];\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( buffer ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( data ) {\r\n\r\n\t\tconst scope = this;\r\n\t\tconst textureLoader = new TextureLoader( this.manager );\r\n\r\n\t\tfunction loadDocument( data ) {\r\n\r\n\t\t\tlet zip = null;\r\n\t\t\tlet file = null;\r\n\r\n\t\t\tlet relsName;\r\n\t\t\tlet modelRelsName;\r\n\t\t\tconst modelPartNames = [];\r\n\t\t\tconst texturesPartNames = [];\r\n\r\n\t\t\tlet modelRels;\r\n\t\t\tconst modelParts = {};\r\n\t\t\tconst printTicketParts = {};\r\n\t\t\tconst texturesParts = {};\r\n\r\n\t\t\tconst textDecoder = new TextDecoder();\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( e instanceof ReferenceError ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: fflate missing and file is compressed.' );\r\n\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( file in zip ) {\r\n\r\n\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\r\n\r\n\t\t\t\t\trelsName = file;\r\n\r\n\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\r\n\r\n\t\t\t\t\tmodelRelsName = file;\r\n\r\n\t\t\t\t} else if ( file.match( /^3D\\/.*\\.model$/ ) ) {\r\n\r\n\t\t\t\t\tmodelPartNames.push( file );\r\n\r\n\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\r\n\r\n\t\t\t\t\ttexturesPartNames.push( file );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst relsView = zip[ relsName ];\r\n\t\t\tconst relsFileText = textDecoder.decode( relsView );\r\n\t\t\tconst rels = parseRelsXml( relsFileText );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tif ( modelRelsName ) {\r\n\r\n\t\t\t\tconst relsView = zip[ modelRelsName ];\r\n\t\t\t\tconst relsFileText = textDecoder.decode( relsView );\r\n\t\t\t\tmodelRels = parseRelsXml( relsFileText );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( let i = 0; i < modelPartNames.length; i ++ ) {\r\n\r\n\t\t\t\tconst modelPart = modelPartNames[ i ];\r\n\t\t\t\tconst view = zip[ modelPart ];\r\n\r\n\t\t\t\tconst fileText = textDecoder.decode( view );\r\n\t\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\r\n\r\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst modelNode = xmlData.querySelector( 'model' );\r\n\t\t\t\tconst extensions = {};\r\n\r\n\t\t\t\tfor ( let i = 0; i < modelNode.attributes.length; i ++ ) {\r\n\r\n\t\t\t\t\tconst attr = modelNode.attributes[ i ];\r\n\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\r\n\r\n\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst modelData = parseModelNode( modelNode );\r\n\t\t\t\tmodelData[ 'xml' ] = modelNode;\r\n\r\n\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\r\n\r\n\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmodelParts[ modelPart ] = modelData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tfor ( let i = 0; i < texturesPartNames.length; i ++ ) {\r\n\r\n\t\t\t\tconst texturesPartName = texturesPartNames[ i ];\r\n\t\t\t\ttexturesParts[ texturesPartName ] = zip[ texturesPartName ].buffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\trels: rels,\r\n\t\t\t\tmodelRels: modelRels,\r\n\t\t\t\tmodel: modelParts,\r\n\t\t\t\tprintTicket: printTicketParts,\r\n\t\t\t\ttexture: texturesParts\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseRelsXml( relsFileText ) {\r\n\r\n\t\t\tconst relationships = [];\r\n\r\n\t\t\tconst relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\r\n\r\n\t\t\tconst relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\r\n\r\n\t\t\tfor ( let i = 0; i < relsNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst relsNode = relsNodes[ i ];\r\n\r\n\t\t\t\tconst relationship = {\r\n\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\r\n\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\r\n\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\r\n\t\t\t\t};\r\n\r\n\t\t\t\trelationships.push( relationship );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn relationships;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseMetadataNodes( metadataNodes ) {\r\n\r\n\t\t\tconst metadataData = {};\r\n\r\n\t\t\tfor ( let i = 0; i < metadataNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst metadataNode = metadataNodes[ i ];\r\n\t\t\t\tconst name = metadataNode.getAttribute( 'name' );\r\n\t\t\t\tconst validNames = [\r\n\t\t\t\t\t'Title',\r\n\t\t\t\t\t'Designer',\r\n\t\t\t\t\t'Description',\r\n\t\t\t\t\t'Copyright',\r\n\t\t\t\t\t'LicenseTerms',\r\n\t\t\t\t\t'Rating',\r\n\t\t\t\t\t'CreationDate',\r\n\t\t\t\t\t'ModificationDate'\r\n\t\t\t\t];\r\n\r\n\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\r\n\r\n\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn metadataData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBasematerialsNode( basematerialsNode ) {\r\n\r\n\t\t\tconst basematerialsData = {\r\n\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\r\n\t\t\t\tbasematerials: []\r\n\t\t\t};\r\n\r\n\t\t\tconst basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\r\n\r\n\t\t\tfor ( let i = 0; i < basematerialNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst basematerialNode = basematerialNodes[ i ];\r\n\t\t\t\tconst basematerialData = parseBasematerialNode( basematerialNode );\r\n\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\r\n\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn basematerialsData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseTexture2DNode( texture2DNode ) {\r\n\r\n\t\t\tconst texture2dData = {\r\n\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\r\n\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\r\n\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\r\n\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\r\n\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\r\n\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\r\n\t\t\t};\r\n\r\n\t\t\treturn texture2dData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\r\n\r\n\t\t\tconst texture2DGroupData = {\r\n\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\r\n\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\r\n\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\r\n\t\t\t};\r\n\r\n\t\t\tconst tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\r\n\r\n\t\t\tconst uvs = [];\r\n\r\n\t\t\tfor ( let i = 0; i < tex2coordNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst tex2coordNode = tex2coordNodes[ i ];\r\n\t\t\t\tconst u = tex2coordNode.getAttribute( 'u' );\r\n\t\t\t\tconst v = tex2coordNode.getAttribute( 'v' );\r\n\r\n\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\r\n\r\n\t\t\treturn texture2DGroupData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseColorGroupNode( colorGroupNode ) {\r\n\r\n\t\t\tconst colorGroupData = {\r\n\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\r\n\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\r\n\t\t\t};\r\n\r\n\t\t\tconst colorNodes = colorGroupNode.querySelectorAll( 'color' );\r\n\r\n\t\t\tconst colors = [];\r\n\t\t\tconst colorObject = new Color();\r\n\r\n\t\t\tfor ( let i = 0; i < colorNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst colorNode = colorNodes[ i ];\r\n\t\t\t\tconst color = colorNode.getAttribute( 'color' );\r\n\r\n\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ) );\r\n\t\t\t\tcolorObject.convertSRGBToLinear(); // color is in sRGB\r\n\r\n\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\r\n\r\n\t\t\treturn colorGroupData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\r\n\r\n\t\t\tconst metallicDisplaypropertiesData = {\r\n\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\r\n\t\t\t};\r\n\r\n\t\t\tconst metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\r\n\r\n\t\t\tconst metallicData = [];\r\n\r\n\t\t\tfor ( let i = 0; i < metallicNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst metallicNode = metallicNodes[ i ];\r\n\r\n\t\t\t\tmetallicData.push( {\r\n\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\r\n\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\r\n\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmetallicDisplaypropertiesData.data = metallicData;\r\n\r\n\t\t\treturn metallicDisplaypropertiesData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBasematerialNode( basematerialNode ) {\r\n\r\n\t\t\tconst basematerialData = {};\r\n\r\n\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\r\n\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\r\n\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\r\n\r\n\t\t\treturn basematerialData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseMeshNode( meshNode ) {\r\n\r\n\t\t\tconst meshData = {};\r\n\r\n\t\t\tconst vertices = [];\r\n\t\t\tconst vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\r\n\r\n\t\t\tfor ( let i = 0; i < vertexNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst vertexNode = vertexNodes[ i ];\r\n\t\t\t\tconst x = vertexNode.getAttribute( 'x' );\r\n\t\t\t\tconst y = vertexNode.getAttribute( 'y' );\r\n\t\t\t\tconst z = vertexNode.getAttribute( 'z' );\r\n\r\n\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\r\n\r\n\t\t\tconst triangleProperties = [];\r\n\t\t\tconst triangles = [];\r\n\t\t\tconst triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\r\n\r\n\t\t\tfor ( let i = 0; i < triangleNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst triangleNode = triangleNodes[ i ];\r\n\t\t\t\tconst v1 = triangleNode.getAttribute( 'v1' );\r\n\t\t\t\tconst v2 = triangleNode.getAttribute( 'v2' );\r\n\t\t\t\tconst v3 = triangleNode.getAttribute( 'v3' );\r\n\t\t\t\tconst p1 = triangleNode.getAttribute( 'p1' );\r\n\t\t\t\tconst p2 = triangleNode.getAttribute( 'p2' );\r\n\t\t\t\tconst p3 = triangleNode.getAttribute( 'p3' );\r\n\t\t\t\tconst pid = triangleNode.getAttribute( 'pid' );\r\n\r\n\t\t\t\tconst triangleProperty = {};\r\n\r\n\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\r\n\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\r\n\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\r\n\r\n\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\r\n\r\n\t\t\t\t// optional\r\n\r\n\t\t\t\tif ( p1 ) {\r\n\r\n\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p2 ) {\r\n\r\n\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p3 ) {\r\n\r\n\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( pid ) {\r\n\r\n\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\r\n\r\n\t\t\t\t\ttriangleProperties.push( triangleProperty );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\r\n\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\r\n\r\n\t\t\treturn meshData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseComponentsNode( componentsNode ) {\r\n\r\n\t\t\tconst components = [];\r\n\r\n\t\t\tconst componentNodes = componentsNode.querySelectorAll( 'component' );\r\n\r\n\t\t\tfor ( let i = 0; i < componentNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst componentNode = componentNodes[ i ];\r\n\t\t\t\tconst componentData = parseComponentNode( componentNode );\r\n\t\t\t\tcomponents.push( componentData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn components;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseComponentNode( componentNode ) {\r\n\r\n\t\t\tconst componentData = {};\r\n\r\n\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\r\n\r\n\t\t\tconst transform = componentNode.getAttribute( 'transform' );\r\n\r\n\t\t\tif ( transform ) {\r\n\r\n\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn componentData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseTransform( transform ) {\r\n\r\n\t\t\tconst t = [];\r\n\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\r\n\r\n\t\t\t\tt.push( parseFloat( s ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tconst matrix = new Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\r\n\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\r\n\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\r\n\t\t\t\t 0.0, 0.0, 0.0, 1.0\r\n\t\t\t);\r\n\r\n\t\t\treturn matrix;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseObjectNode( objectNode ) {\r\n\r\n\t\t\tconst objectData = {\r\n\t\t\t\ttype: objectNode.getAttribute( 'type' )\r\n\t\t\t};\r\n\r\n\t\t\tconst id = objectNode.getAttribute( 'id' );\r\n\r\n\t\t\tif ( id ) {\r\n\r\n\t\t\t\tobjectData[ 'id' ] = id;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pid = objectNode.getAttribute( 'pid' );\r\n\r\n\t\t\tif ( pid ) {\r\n\r\n\t\t\t\tobjectData[ 'pid' ] = pid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pindex = objectNode.getAttribute( 'pindex' );\r\n\r\n\t\t\tif ( pindex ) {\r\n\r\n\t\t\t\tobjectData[ 'pindex' ] = pindex;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst thumbnail = objectNode.getAttribute( 'thumbnail' );\r\n\r\n\t\t\tif ( thumbnail ) {\r\n\r\n\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst partnumber = objectNode.getAttribute( 'partnumber' );\r\n\r\n\t\t\tif ( partnumber ) {\r\n\r\n\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst name = objectNode.getAttribute( 'name' );\r\n\r\n\t\t\tif ( name ) {\r\n\r\n\t\t\t\tobjectData[ 'name' ] = name;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst meshNode = objectNode.querySelector( 'mesh' );\r\n\r\n\t\t\tif ( meshNode ) {\r\n\r\n\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst componentsNode = objectNode.querySelector( 'components' );\r\n\r\n\t\t\tif ( componentsNode ) {\r\n\r\n\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn objectData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseResourcesNode( resourcesNode ) {\r\n\r\n\t\t\tconst resourcesData = {};\r\n\r\n\t\t\tresourcesData[ 'basematerials' ] = {};\r\n\t\t\tconst basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\r\n\r\n\t\t\tfor ( let i = 0; i < basematerialsNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst basematerialsNode = basematerialsNodes[ i ];\r\n\t\t\t\tconst basematerialsData = parseBasematerialsNode( basematerialsNode );\r\n\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tresourcesData[ 'texture2d' ] = {};\r\n\t\t\tconst textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\r\n\r\n\t\t\tfor ( let i = 0; i < textures2DNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst textures2DNode = textures2DNodes[ i ];\r\n\t\t\t\tconst texture2DData = parseTexture2DNode( textures2DNode );\r\n\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tresourcesData[ 'colorgroup' ] = {};\r\n\t\t\tconst colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\r\n\r\n\t\t\tfor ( let i = 0; i < colorGroupNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst colorGroupNode = colorGroupNodes[ i ];\r\n\t\t\t\tconst colorGroupData = parseColorGroupNode( colorGroupNode );\r\n\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\r\n\t\t\tconst pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\r\n\r\n\t\t\tfor ( let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\r\n\t\t\t\tconst pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\r\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tresourcesData[ 'texture2dgroup' ] = {};\r\n\t\t\tconst textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\r\n\r\n\t\t\tfor ( let i = 0; i < textures2DGroupNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst textures2DGroupNode = textures2DGroupNodes[ i ];\r\n\t\t\t\tconst textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\r\n\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tresourcesData[ 'object' ] = {};\r\n\t\t\tconst objectNodes = resourcesNode.querySelectorAll( 'object' );\r\n\r\n\t\t\tfor ( let i = 0; i < objectNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst objectNode = objectNodes[ i ];\r\n\t\t\t\tconst objectData = parseObjectNode( objectNode );\r\n\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn resourcesData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseBuildNode( buildNode ) {\r\n\r\n\t\t\tconst buildData = [];\r\n\t\t\tconst itemNodes = buildNode.querySelectorAll( 'item' );\r\n\r\n\t\t\tfor ( let i = 0; i < itemNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst itemNode = itemNodes[ i ];\r\n\t\t\t\tconst buildItem = {\r\n\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\r\n\t\t\t\t};\r\n\t\t\t\tconst transform = itemNode.getAttribute( 'transform' );\r\n\r\n\t\t\t\tif ( transform ) {\r\n\r\n\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuildData.push( buildItem );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buildData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseModelNode( modelNode ) {\r\n\r\n\t\t\tconst modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\r\n\t\t\tconst metadataNodes = modelNode.querySelectorAll( 'metadata' );\r\n\r\n\t\t\tif ( metadataNodes ) {\r\n\r\n\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst resourcesNode = modelNode.querySelector( 'resources' );\r\n\r\n\t\t\tif ( resourcesNode ) {\r\n\r\n\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst buildNode = modelNode.querySelector( 'build' );\r\n\r\n\t\t\tif ( buildNode ) {\r\n\r\n\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn modelData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\r\n\r\n\t\t\tconst texid = texture2dgroup.texid;\r\n\t\t\tconst texture2ds = modelData.resources.texture2d;\r\n\t\t\tconst texture2d = texture2ds[ texid ];\r\n\r\n\t\t\tif ( texture2d ) {\r\n\r\n\t\t\t\tconst data = textureData[ texture2d.path ];\r\n\t\t\t\tconst type = texture2d.contenttype;\r\n\r\n\t\t\t\tconst blob = new Blob( [ data ], { type: type } );\r\n\t\t\t\tconst sourceURI = URL.createObjectURL( blob );\r\n\r\n\t\t\t\tconst texture = textureLoader.load( sourceURI, function () {\r\n\r\n\t\t\t\t\tURL.revokeObjectURL( sourceURI );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\ttexture.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t// texture parameters\r\n\r\n\t\t\t\tswitch ( texture2d.tilestyleu ) {\r\n\r\n\t\t\t\t\tcase 'wrap':\r\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'mirror':\r\n\t\t\t\t\t\ttexture.wrapS = MirroredRepeatWrapping;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'none':\r\n\t\t\t\t\tcase 'clamp':\r\n\t\t\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch ( texture2d.tilestylev ) {\r\n\r\n\t\t\t\t\tcase 'wrap':\r\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'mirror':\r\n\t\t\t\t\t\ttexture.wrapT = MirroredRepeatWrapping;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'none':\r\n\t\t\t\t\tcase 'clamp':\r\n\t\t\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch ( texture2d.filter ) {\r\n\r\n\t\t\t\t\tcase 'auto':\r\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'linear':\r\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'nearest':\r\n\t\t\t\t\t\ttexture.magFilter = NearestFilter;\r\n\t\t\t\t\t\ttexture.minFilter = NearestFilter;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\r\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\r\n\r\n\t\t\tconst objectPindex = objectData.pindex;\r\n\r\n\t\t\tconst materialMap = {};\r\n\r\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\r\n\t\t\t\tconst pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\r\n\r\n\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\r\n\r\n\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst keys = Object.keys( materialMap );\r\n\t\t\tconst meshes = [];\r\n\r\n\t\t\tfor ( let i = 0, l = keys.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst materialIndex = keys[ i ];\r\n\t\t\t\tconst trianglePropertiesProps = materialMap[ materialIndex ];\r\n\t\t\t\tconst basematerialData = basematerials.basematerials[ materialIndex ];\r\n\t\t\t\tconst material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\t\t\tconst positionData = [];\r\n\r\n\t\t\t\tconst vertices = meshData.vertices;\r\n\r\n\t\t\t\tfor ( let j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tconst triangleProperty = trianglePropertiesProps[ j ];\r\n\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\r\n\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\r\n\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\r\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tconst mesh = new Mesh( geometry, material );\r\n\t\t\t\tmeshes.push( mesh );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn meshes;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\r\n\r\n\t\t\t// geometry\r\n\r\n\t\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\t\tconst positionData = [];\r\n\t\t\tconst uvData = [];\r\n\r\n\t\t\tconst vertices = meshData.vertices;\r\n\t\t\tconst uvs = texture2dgroup.uvs;\r\n\r\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\r\n\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\r\n\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\r\n\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\r\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\r\n\r\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\r\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\r\n\r\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\r\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\r\n\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvData, 2 ) );\r\n\r\n\t\t\t// material\r\n\r\n\t\t\tconst texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\r\n\r\n\t\t\tconst material = new MeshPhongMaterial( { map: texture, flatShading: true } );\r\n\r\n\t\t\t// mesh\r\n\r\n\t\t\tconst mesh = new Mesh( geometry, material );\r\n\r\n\t\t\treturn mesh;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) {\r\n\r\n\t\t\t// geometry\r\n\r\n\t\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\t\tconst positionData = [];\r\n\t\t\tconst colorData = [];\r\n\r\n\t\t\tconst vertices = meshData.vertices;\r\n\t\t\tconst colors = colorgroup.colors;\r\n\r\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\r\n\r\n\t\t\t\tconst v1 = triangleProperty.v1;\r\n\t\t\t\tconst v2 = triangleProperty.v2;\r\n\t\t\t\tconst v3 = triangleProperty.v3;\r\n\r\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\r\n\r\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\r\n\r\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\r\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tconst p1 = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectData.pindex;\r\n\t\t\t\tconst p2 = ( triangleProperty.p2 !== undefined ) ? triangleProperty.p2 : p1;\r\n\t\t\t\tconst p3 = ( triangleProperty.p3 !== undefined ) ? triangleProperty.p3 : p1;\r\n\r\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\r\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\r\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\r\n\r\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 0 ] );\r\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 1 ] );\r\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 2 ] );\r\n\r\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 0 ] );\r\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 1 ] );\r\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\r\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colorData, 3 ) );\r\n\r\n\t\t\t// material\r\n\r\n\t\t\tconst material = new MeshPhongMaterial( { vertexColors: true, flatShading: true } );\r\n\r\n\t\t\t// mesh\r\n\r\n\t\t\tconst mesh = new Mesh( geometry, material );\r\n\r\n\t\t\treturn mesh;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildDefaultMesh( meshData ) {\r\n\r\n\t\t\tconst geometry = new BufferGeometry();\r\n\t\t\tgeometry.setIndex( new BufferAttribute( meshData[ 'triangles' ], 1 ) );\r\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( meshData[ 'vertices' ], 3 ) );\r\n\r\n\t\t\tconst material = new MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\r\n\r\n\t\t\tconst mesh = new Mesh( geometry, material );\r\n\r\n\t\t\treturn mesh;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData ) {\r\n\r\n\t\t\tconst keys = Object.keys( resourceMap );\r\n\t\t\tconst meshes = [];\r\n\r\n\t\t\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst resourceId = keys[ i ];\r\n\t\t\t\tconst triangleProperties = resourceMap[ resourceId ];\r\n\t\t\t\tconst resourceType = getResourceType( resourceId, modelData );\r\n\r\n\t\t\t\tswitch ( resourceType ) {\r\n\r\n\t\t\t\t\tcase 'material':\r\n\t\t\t\t\t\tconst basematerials = modelData.resources.basematerials[ resourceId ];\r\n\t\t\t\t\t\tconst newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData );\r\n\r\n\t\t\t\t\t\tfor ( let j = 0, jl = newMeshes.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'texture':\r\n\t\t\t\t\t\tconst texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\r\n\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\tconst colorgroup = modelData.resources.colorgroup[ resourceId ];\r\n\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'default':\r\n\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectData.name ) {\r\n\r\n\t\t\t\tfor ( let i = 0; i < meshes.length; i ++ ) {\r\n\r\n\t\t\t\t\tmeshes[ i ].name = objectData.name;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn meshes;\r\n\r\n\t\t}\r\n\r\n\t\tfunction getResourceType( pid, modelData ) {\r\n\r\n\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\r\n\r\n\t\t\t\treturn 'texture';\r\n\r\n\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\r\n\r\n\t\t\t\treturn 'material';\r\n\r\n\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\r\n\r\n\t\t\t\treturn 'vertexColors';\r\n\r\n\t\t\t} else if ( pid === 'default' ) {\r\n\r\n\t\t\t\treturn 'default';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction analyzeObject( meshData, objectData ) {\r\n\r\n\t\t\tconst resourceMap = {};\r\n\r\n\t\t\tconst triangleProperties = meshData[ 'triangleProperties' ];\r\n\r\n\t\t\tconst objectPid = objectData.pid;\r\n\r\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\r\n\t\t\t\tlet pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\r\n\r\n\t\t\t\tif ( pid === undefined ) pid = 'default';\r\n\r\n\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\r\n\r\n\t\t\t\tresourceMap[ pid ].push( triangleProperty );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn resourceMap;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\r\n\r\n\t\t\tconst group = new Group();\r\n\r\n\t\t\tconst resourceMap = analyzeObject( meshData, objectData );\r\n\t\t\tconst meshes = buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData );\r\n\r\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tgroup.add( meshes[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn group;\r\n\r\n\t\t}\r\n\r\n\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\r\n\r\n\t\t\tif ( ! extensions ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst availableExtensions = [];\r\n\t\t\tconst keys = Object.keys( extensions );\r\n\r\n\t\t\tfor ( let i = 0; i < keys.length; i ++ ) {\r\n\r\n\t\t\t\tconst ns = keys[ i ];\r\n\r\n\t\t\t\tfor ( let j = 0; j < scope.availableExtensions.length; j ++ ) {\r\n\r\n\t\t\t\t\tconst extension = scope.availableExtensions[ j ];\r\n\r\n\t\t\t\t\tif ( extension.ns === ns ) {\r\n\r\n\t\t\t\t\t\tavailableExtensions.push( extension );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < availableExtensions.length; i ++ ) {\r\n\r\n\t\t\t\tconst extension = availableExtensions[ i ];\r\n\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\r\n\r\n\t\t\tif ( data.build !== undefined ) return data.build;\r\n\r\n\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\r\n\r\n\t\t\treturn data.build;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildBasematerial( materialData, objects, modelData ) {\r\n\r\n\t\t\tlet material;\r\n\r\n\t\t\tconst displaypropertiesid = materialData.displaypropertiesid;\r\n\t\t\tconst pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\r\n\r\n\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\r\n\r\n\t\t\t\t// metallic display property, use StandardMaterial\r\n\r\n\t\t\t\tconst pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\r\n\t\t\t\tconst metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\r\n\r\n\t\t\t\tmaterial = new MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// otherwise use PhongMaterial\r\n\r\n\t\t\t\tmaterial = new MeshPhongMaterial( { flatShading: true } );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.name = materialData.name;\r\n\r\n\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\r\n\r\n\t\t\tconst displaycolor = materialData.displaycolor;\r\n\r\n\t\t\tconst color = displaycolor.substring( 0, 7 );\r\n\t\t\tmaterial.color.setStyle( color );\r\n\t\t\tmaterial.color.convertSRGBToLinear(); // displaycolor is in sRGB\r\n\r\n\t\t\t// process alpha if set\r\n\r\n\t\t\tif ( displaycolor.length === 9 ) {\r\n\r\n\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn material;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\r\n\r\n\t\t\tconst composite = new Group();\r\n\r\n\t\t\tfor ( let j = 0; j < compositeData.length; j ++ ) {\r\n\r\n\t\t\t\tconst component = compositeData[ j ];\r\n\t\t\t\tlet build = objects[ component.objectId ];\r\n\r\n\t\t\t\tif ( build === undefined ) {\r\n\r\n\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\r\n\t\t\t\t\tbuild = objects[ component.objectId ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst object3D = build.clone();\r\n\r\n\t\t\t\t// apply component transform\r\n\r\n\t\t\t\tconst transform = component.transform;\r\n\r\n\t\t\t\tif ( transform ) {\r\n\r\n\t\t\t\t\tobject3D.applyMatrix4( transform );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcomposite.add( object3D );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn composite;\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\r\n\r\n\t\t\tconst objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\r\n\r\n\t\t\tif ( objectData[ 'mesh' ] ) {\r\n\r\n\t\t\t\tconst meshData = objectData[ 'mesh' ];\r\n\r\n\t\t\t\tconst extensions = modelData[ 'extensions' ];\r\n\t\t\t\tconst modelXml = modelData[ 'xml' ];\r\n\r\n\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\r\n\r\n\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst compositeData = objectData[ 'components' ];\r\n\r\n\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( objectData.name ) {\r\n\r\n\t\t\t\tobjects[ objectData.id ].name = objectData.name;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction buildObjects( data3mf ) {\r\n\r\n\t\t\tconst modelsData = data3mf.model;\r\n\t\t\tconst modelRels = data3mf.modelRels;\r\n\t\t\tconst objects = {};\r\n\t\t\tconst modelsKeys = Object.keys( modelsData );\r\n\t\t\tconst textureData = {};\r\n\r\n\t\t\t// evaluate model relationships to textures\r\n\r\n\t\t\tif ( modelRels ) {\r\n\r\n\t\t\t\tfor ( let i = 0, l = modelRels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tconst modelRel = modelRels[ i ];\r\n\t\t\t\t\tconst textureKey = modelRel.target.substring( 1 );\r\n\r\n\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\r\n\r\n\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// start build\r\n\r\n\t\t\tfor ( let i = 0; i < modelsKeys.length; i ++ ) {\r\n\r\n\t\t\t\tconst modelsKey = modelsKeys[ i ];\r\n\t\t\t\tconst modelData = modelsData[ modelsKey ];\r\n\r\n\t\t\t\tconst objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\r\n\r\n\t\t\t\tfor ( let j = 0; j < objectIds.length; j ++ ) {\r\n\r\n\t\t\t\t\tconst objectId = objectIds[ j ];\r\n\r\n\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn objects;\r\n\r\n\t\t}\r\n\r\n\t\tfunction fetch3DModelPart( rels ) {\r\n\r\n\t\t\tfor ( let i = 0; i < rels.length; i ++ ) {\r\n\r\n\t\t\t\tconst rel = rels[ i ];\r\n\t\t\t\tconst extension = rel.target.split( '.' ).pop();\r\n\r\n\t\t\t\tif ( extension.toLowerCase() === 'model' ) return rel;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction build( objects, data3mf ) {\r\n\r\n\t\t\tconst group = new Group();\r\n\r\n\t\t\tconst relationship = fetch3DModelPart( data3mf[ 'rels' ] );\r\n\t\t\tconst buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\r\n\r\n\t\t\tfor ( let i = 0; i < buildData.length; i ++ ) {\r\n\r\n\t\t\t\tconst buildItem = buildData[ i ];\r\n\t\t\t\tconst object3D = objects[ buildItem[ 'objectId' ] ].clone();\r\n\r\n\t\t\t\t// apply transform\r\n\r\n\t\t\t\tconst transform = buildItem[ 'transform' ];\r\n\r\n\t\t\t\tif ( transform ) {\r\n\r\n\t\t\t\t\tobject3D.applyMatrix4( transform );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroup.add( object3D );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn group;\r\n\r\n\t\t}\r\n\r\n\t\tconst data3mf = loadDocument( data );\r\n\t\tconst objects = buildObjects( data3mf );\r\n\r\n\t\treturn build( objects, data3mf );\r\n\r\n\t}\r\n\r\n\taddExtension( extension ) {\r\n\r\n\t\tthis.availableExtensions.push( extension );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ThreeMFLoader };\r\n"],"names":["ThreeMFLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","availableExtensions","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","data","textureLoader","TextureLoader","parseRelsXml","relsFileText","relationships","relsNodes","DOMParser","parseFromString","querySelectorAll","i","length","relsNode","relationship","target","getAttribute","id","type","push","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialData","parseBasematerialNode","index","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","Color","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","name","metallicness","roughness","basematerialNode","parseComponentNode","componentNode","componentData","transform","parseTransform","t","split","forEach","s","matrix","Matrix4","set","parseObjectNode","objectNode","objectData","pid","pindex","thumbnail","partnumber","meshNode","querySelector","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","triangleProperty","parseInt","Object","keys","Uint32Array","parseMeshNode","componentsNode","components","componentNodes","parseComponentsNode","parseModelNode","modelNode","modelData","unit","metadataNodes","metadataData","metadataNode","indexOf","textContent","parseMetadataNodes","resourcesNode","resourcesData","basematerialsNodes","texture2DNode","textures2DNodes","texture2DData","contenttype","tilestyleu","tilestylev","filter","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupData","objectNodes","parseResourcesNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","parseBuildNode","buildTexture","texture2dgroup","objects","textureData","texture2d","resources","blob","Blob","sourceURI","URL","createObjectURL","texture","revokeObjectURL","encoding","sRGBEncoding","wrapS","RepeatWrapping","MirroredRepeatWrapping","ClampToEdgeWrapping","wrapT","magFilter","LinearFilter","minFilter","LinearMipmapLinearFilter","NearestFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","BufferGeometry","positionData","j","jl","setAttribute","Float32BufferAttribute","mesh","Mesh","buildTexturedMesh","uvData","MeshPhongMaterial","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","BufferAttribute","getResourceType","buildGroup","group","Group","resourceMap","objectPid","analyzeObject","il","resourceId","newMeshes","buildMeshes","add","builder","build","materialData","pbmetallicdisplayproperties","MeshStandardMaterial","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","extensions","modelXml","ns","extension","apply","applyExtensions","data3mf","relsName","modelRelsName","modelRels","zip","file","modelPartNames","texturesPartNames","modelParts","texturesParts","textDecoder","TextDecoder","fflate","Uint8Array","ReferenceError","match","relsView","rels","decode","modelPart","view","fileText","xmlData","documentElement","nodeName","toLowerCase","attributes","attr","RegExp","$1","texturesPartName","model","printTicket","loadDocument","modelsData","modelsKeys","modelRel","textureKey","objectIds","buildObjects","rel","pop","fetch3DModelPart","Loader"],"sourceRoot":""}