{"version":3,"file":"static/js/3670.51856dcc.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/3DMLoader.js"],"sourcesContent":["import {\r\n\tBufferGeometryLoader,\r\n\tFileLoader,\r\n\tLoader,\r\n\tObject3D,\r\n\tMeshStandardMaterial,\r\n\tMesh,\r\n\tColor,\r\n\tPoints,\r\n\tPointsMaterial,\r\n\tLine,\r\n\tLineBasicMaterial,\r\n\tMatrix4,\r\n\tDirectionalLight,\r\n\tPointLight,\r\n\tSpotLight,\r\n\tRectAreaLight,\r\n\tSprite,\r\n\tSpriteMaterial,\r\n\tCanvasTexture,\r\n\tLinearFilter,\r\n\tClampToEdgeWrapping,\r\n\tRepeatWrapping,\r\n\tTextureLoader\r\n} from '../../../build/three';\r\n\r\nconst _taskCache = new WeakMap();\r\n\r\nclass Rhino3dmLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.libraryPath = '';\r\n\t\tthis.libraryPending = null;\r\n\t\tthis.libraryBinary = null;\r\n\t\tthis.libraryConfig = {};\r\n\r\n\t\tthis.url = '';\r\n\r\n\t\tthis.workerLimit = 4;\r\n\t\tthis.workerPool = [];\r\n\t\tthis.workerNextTaskID = 1;\r\n\t\tthis.workerSourceURL = '';\r\n\t\tthis.workerConfig = {};\r\n\r\n\t\tthis.materials = [];\r\n\t\tthis.warnings = [];\r\n\r\n\t}\r\n\r\n\tsetLibraryPath( path ) {\r\n\r\n\t\tthis.libraryPath = path;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetWorkerLimit( workerLimit ) {\r\n\r\n\t\tthis.workerLimit = workerLimit;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\r\n\t\tthis.url = url;\r\n\r\n\t\tloader.load( url, ( buffer ) => {\r\n\r\n\t\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\r\n\t\t\t// again from this thread.\r\n\t\t\tif ( _taskCache.has( buffer ) ) {\r\n\r\n\t\t\t\tconst cachedTask = _taskCache.get( buffer );\r\n\r\n\t\t\t\treturn cachedTask.promise.then( onLoad ).catch( onError );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.decodeObjects( buffer, url )\r\n\t\t\t\t.then( result => {\r\n\r\n\t\t\t\t\tresult.userData.warnings = this.warnings;\r\n\t\t\t\t\tonLoad( result );\r\n\r\n\t\t\t\t } )\r\n\t\t\t\t.catch( e => onError( e ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tdebug() {\r\n\r\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\r\n\r\n\t}\r\n\r\n\tdecodeObjects( buffer, url ) {\r\n\r\n\t\tlet worker;\r\n\t\tlet taskID;\r\n\r\n\t\tconst taskCost = buffer.byteLength;\r\n\r\n\t\tconst objectPending = this._getWorker( taskCost )\r\n\t\t\t.then( ( _worker ) => {\r\n\r\n\t\t\t\tworker = _worker;\r\n\t\t\t\ttaskID = this.workerNextTaskID ++;\r\n\r\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\r\n\r\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\r\n\r\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, buffer }, [ buffer ] );\r\n\r\n\t\t\t\t\t// this.debug();\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} )\r\n\t\t\t.then( ( message ) => this._createGeometry( message.data ) )\r\n\t\t\t.catch( e => {\r\n\r\n\t\t\t\tthrow e;\r\n\r\n\t\t\t} );\r\n\r\n\t\t// Remove task from the task list.\r\n\t\t// Note: replaced '.finally()' with '.catch().then()' block - iOS 11 support (#19416)\r\n\t\tobjectPending\r\n\t\t\t.catch( () => true )\r\n\t\t\t.then( () => {\r\n\r\n\t\t\t\tif ( worker && taskID ) {\r\n\r\n\t\t\t\t\tthis._releaseTask( worker, taskID );\r\n\r\n\t\t\t\t\t//this.debug();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t// Cache the task result.\r\n\t\t_taskCache.set( buffer, {\r\n\r\n\t\t\turl: url,\r\n\t\t\tpromise: objectPending\r\n\r\n\t\t} );\r\n\r\n\t\treturn objectPending;\r\n\r\n\t}\r\n\r\n\tparse( data, onLoad, onError ) {\r\n\r\n\t\tthis.decodeObjects( data, '' )\r\n\t\t\t.then( result => {\r\n\r\n\t\t\t\tresult.userData.warnings = this.warnings;\r\n\t\t\t\tonLoad( result );\r\n\r\n\t\t\t} )\r\n\t\t\t.catch( e => onError( e ) );\r\n\r\n\t}\r\n\r\n\t_compareMaterials( material ) {\r\n\r\n\t\tconst mat = {};\r\n\t\tmat.name = material.name;\r\n\t\tmat.color = {};\r\n\t\tmat.color.r = material.color.r;\r\n\t\tmat.color.g = material.color.g;\r\n\t\tmat.color.b = material.color.b;\r\n\t\tmat.type = material.type;\r\n\r\n\t\tfor ( let i = 0; i < this.materials.length; i ++ ) {\r\n\r\n\t\t\tconst m = this.materials[ i ];\r\n\t\t\tconst _mat = {};\r\n\t\t\t_mat.name = m.name;\r\n\t\t\t_mat.color = {};\r\n\t\t\t_mat.color.r = m.color.r;\r\n\t\t\t_mat.color.g = m.color.g;\r\n\t\t\t_mat.color.b = m.color.b;\r\n\t\t\t_mat.type = m.type;\r\n\r\n\t\t\tif ( JSON.stringify( mat ) === JSON.stringify( _mat ) ) {\r\n\r\n\t\t\t\treturn m;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials.push( material );\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\t_createMaterial( material ) {\r\n\r\n\t\tif ( material === undefined ) {\r\n\r\n\t\t\treturn new MeshStandardMaterial( {\r\n\t\t\t\tcolor: new Color( 1, 1, 1 ),\r\n\t\t\t\tmetalness: 0.8,\r\n\t\t\t\tname: 'default',\r\n\t\t\t\tside: 2\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tconst _diffuseColor = material.diffuseColor;\r\n\r\n\t\tconst diffusecolor = new Color( _diffuseColor.r / 255.0, _diffuseColor.g / 255.0, _diffuseColor.b / 255.0 );\r\n\r\n\t\tif ( _diffuseColor.r === 0 && _diffuseColor.g === 0 && _diffuseColor.b === 0 ) {\r\n\r\n\t\t\tdiffusecolor.r = 1;\r\n\t\t\tdiffusecolor.g = 1;\r\n\t\t\tdiffusecolor.b = 1;\r\n\r\n\t\t}\r\n\r\n\t\t// console.log( material );\r\n\r\n\t\tconst mat = new MeshStandardMaterial( {\r\n\t\t\tcolor: diffusecolor,\r\n\t\t\tname: material.name,\r\n\t\t\tside: 2,\r\n\t\t\ttransparent: material.transparency > 0 ? true : false,\r\n\t\t\topacity: 1.0 - material.transparency\r\n\t\t} );\r\n\r\n\t\tconst textureLoader = new TextureLoader();\r\n\r\n\t\tfor ( let i = 0; i < material.textures.length; i ++ ) {\r\n\r\n\t\t\tconst texture = material.textures[ i ];\r\n\r\n\t\t\tif ( texture.image !== null ) {\r\n\r\n\t\t\t\tconst map = textureLoader.load( texture.image );\r\n\r\n\t\t\t\tswitch ( texture.type ) {\r\n\r\n\t\t\t\t\tcase 'Diffuse':\r\n\r\n\t\t\t\t\t\tmat.map = map;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Bump':\r\n\r\n\t\t\t\t\t\tmat.bumpMap = map;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Transparency':\r\n\r\n\t\t\t\t\t\tmat.alphaMap = map;\r\n\t\t\t\t\t\tmat.transparent = true;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Emap':\r\n\r\n\t\t\t\t\t\tmat.envMap = map;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmap.wrapS = texture.wrapU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\r\n\t\t\t\tmap.wrapT = texture.wrapV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\r\n\t\t\t\tmap.repeat.set( texture.repeat[ 0 ], texture.repeat[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn mat;\r\n\r\n\t}\r\n\r\n\t_createGeometry( data ) {\r\n\r\n\t\t// console.log(data);\r\n\r\n\t\tconst object = new Object3D();\r\n\t\tconst instanceDefinitionObjects = [];\r\n\t\tconst instanceDefinitions = [];\r\n\t\tconst instanceReferences = [];\r\n\r\n\t\tobject.userData[ 'layers' ] = data.layers;\r\n\t\tobject.userData[ 'groups' ] = data.groups;\r\n\t\tobject.userData[ 'settings' ] = data.settings;\r\n\t\tobject.userData[ 'objectType' ] = 'File3dm';\r\n\t\tobject.userData[ 'materials' ] = null;\r\n\t\tobject.name = this.url;\r\n\r\n\t\tlet objects = data.objects;\r\n\t\tconst materials = data.materials;\r\n\r\n\t\tfor ( let i = 0; i < objects.length; i ++ ) {\r\n\r\n\t\t\tconst obj = objects[ i ];\r\n\t\t\tconst attributes = obj.attributes;\r\n\r\n\t\t\tswitch ( obj.objectType ) {\r\n\r\n\t\t\t\tcase 'InstanceDefinition':\r\n\r\n\t\t\t\t\tinstanceDefinitions.push( obj );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'InstanceReference':\r\n\r\n\t\t\t\t\tinstanceReferences.push( obj );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tlet _object;\r\n\r\n\t\t\t\t\tif ( attributes.materialIndex >= 0 ) {\r\n\r\n\t\t\t\t\t\tconst rMaterial = materials[ attributes.materialIndex ];\r\n\t\t\t\t\t\tlet material = this._createMaterial( rMaterial );\r\n\t\t\t\t\t\tmaterial = this._compareMaterials( material );\r\n\t\t\t\t\t\t_object = this._createObject( obj, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconst material = this._createMaterial();\r\n\t\t\t\t\t\t_object = this._createObject( obj, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( _object === undefined ) {\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst layer = data.layers[ attributes.layerIndex ];\r\n\r\n\t\t\t\t\t_object.visible = layer ? data.layers[ attributes.layerIndex ].visible : true;\r\n\r\n\t\t\t\t\tif ( attributes.isInstanceDefinitionObject ) {\r\n\r\n\t\t\t\t\t\tinstanceDefinitionObjects.push( _object );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject.add( _object );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < instanceDefinitions.length; i ++ ) {\r\n\r\n\t\t\tconst iDef = instanceDefinitions[ i ];\r\n\r\n\t\t\tobjects = [];\r\n\r\n\t\t\tfor ( let j = 0; j < iDef.attributes.objectIds.length; j ++ ) {\r\n\r\n\t\t\t\tconst objId = iDef.attributes.objectIds[ j ];\r\n\r\n\t\t\t\tfor ( let p = 0; p < instanceDefinitionObjects.length; p ++ ) {\r\n\r\n\t\t\t\t\tconst idoId = instanceDefinitionObjects[ p ].userData.attributes.id;\r\n\r\n\t\t\t\t\tif ( objId === idoId ) {\r\n\r\n\t\t\t\t\t\tobjects.push( instanceDefinitionObjects[ p ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Currently clones geometry and does not take advantage of instancing\r\n\r\n\t\t\tfor ( let j = 0; j < instanceReferences.length; j ++ ) {\r\n\r\n\t\t\t\tconst iRef = instanceReferences[ j ];\r\n\r\n\t\t\t\tif ( iRef.geometry.parentIdefId === iDef.attributes.id ) {\r\n\r\n\t\t\t\t\tconst iRefObject = new Object3D();\r\n\t\t\t\t\tconst xf = iRef.geometry.xform.array;\r\n\r\n\t\t\t\t\tconst matrix = new Matrix4();\r\n          \t\t\tmatrix.set( xf[ 0 ], xf[ 1 ], xf[ 2 ], xf[ 3 ], xf[ 4 ], xf[ 5 ], xf[ 6 ], xf[ 7 ], xf[ 8 ], xf[ 9 ], xf[ 10 ], xf[ 11 ], xf[ 12 ], xf[ 13 ], xf[ 14 ], xf[ 15 ] );\r\n\r\n\t\t\t\t\tiRefObject.applyMatrix4( matrix );\r\n\r\n\t\t\t\t\tfor ( let p = 0; p < objects.length; p ++ ) {\r\n\r\n\t\t\t\t\t\tiRefObject.add( objects[ p ].clone( true ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tobject.add( iRefObject );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tobject.userData[ 'materials' ] = this.materials;\r\n\t\treturn object;\r\n\r\n\t}\r\n\r\n\t_createObject( obj, mat ) {\r\n\r\n\t\tconst loader = new BufferGeometryLoader();\r\n\r\n\t\tconst attributes = obj.attributes;\r\n\r\n\t\tlet geometry, material, _color, color;\r\n\r\n\t\tswitch ( obj.objectType ) {\r\n\r\n\t\t\tcase 'Point':\r\n\t\t\tcase 'PointSet':\r\n\r\n\t\t\t\tgeometry = loader.parse( obj.geometry );\r\n\r\n\t\t\t\tif ( Object.prototype.hasOwnProperty.call(geometry.attributes, 'color')) {\r\n\r\n\t\t\t\t\tmaterial = new PointsMaterial( { vertexColors: true, sizeAttenuation: false, size: 2 } );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_color = attributes.drawColor;\r\n\t\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\r\n\t\t\t\t\tmaterial = new PointsMaterial( { color: color, sizeAttenuation: false, size: 2 } );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial = this._compareMaterials( material );\r\n\r\n\t\t\t\tconst points = new Points( geometry, material );\r\n\t\t\t\tpoints.userData[ 'attributes' ] = attributes;\r\n\t\t\t\tpoints.userData[ 'objectType' ] = obj.objectType;\r\n\r\n\t\t\t\tif ( attributes.name ) {\r\n\r\n\t\t\t\t\tpoints.name = attributes.name;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn points;\r\n\r\n\t\t\tcase 'Mesh':\r\n\t\t\tcase 'Extrusion':\r\n\t\t\tcase 'SubD':\r\n\t\t\tcase 'Brep':\r\n\r\n\t\t\t\tif ( obj.geometry === null ) return;\r\n\r\n\t\t\t\tgeometry = loader.parse( obj.geometry );\r\n\r\n\t\t\t\tif ( Object.prototype.hasOwnProperty.call(geometry.attributes, 'color' ) ) {\r\n\r\n\t\t\t\t\tmat.vertexColors = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( mat === null ) {\r\n\r\n\t\t\t\t\tmat = this._createMaterial();\r\n\t\t\t\t\tmat = this._compareMaterials( mat );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst mesh = new Mesh( geometry, mat );\r\n\t\t\t\tmesh.castShadow = attributes.castsShadows;\r\n\t\t\t\tmesh.receiveShadow = attributes.receivesShadows;\r\n\t\t\t\tmesh.userData[ 'attributes' ] = attributes;\r\n\t\t\t\tmesh.userData[ 'objectType' ] = obj.objectType;\r\n\r\n\t\t\t\tif ( attributes.name ) {\r\n\r\n\t\t\t\t\tmesh.name = attributes.name;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn mesh;\r\n\r\n\t\t\tcase 'Curve':\r\n\r\n\t\t\t\tgeometry = loader.parse( obj.geometry );\r\n\r\n\t\t\t\t_color = attributes.drawColor;\r\n\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\r\n\r\n\t\t\t\tmaterial = new LineBasicMaterial( { color: color } );\r\n\t\t\t\tmaterial = this._compareMaterials( material );\r\n\r\n\t\t\t\tconst lines = new Line( geometry, material );\r\n\t\t\t\tlines.userData[ 'attributes' ] = attributes;\r\n\t\t\t\tlines.userData[ 'objectType' ] = obj.objectType;\r\n\r\n\t\t\t\tif ( attributes.name ) {\r\n\r\n\t\t\t\t\tlines.name = attributes.name;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn lines;\r\n\r\n\t\t\tcase 'TextDot':\r\n\r\n\t\t\t\tgeometry = obj.geometry;\r\n\r\n\t\t\t\tconst ctx = document.createElement( 'canvas' ).getContext( '2d' );\r\n\t\t\t\tconst font = `${geometry.fontHeight}px ${geometry.fontFace}`;\r\n\t\t\t\tctx.font = font;\r\n\t\t\t\tconst width = ctx.measureText( geometry.text ).width + 10;\r\n\t\t\t\tconst height = geometry.fontHeight + 10;\r\n\r\n\t\t\t\tconst r = window.devicePixelRatio;\r\n\r\n\t\t\t\tctx.canvas.width = width * r;\r\n\t\t\t\tctx.canvas.height = height * r;\r\n\t\t\t\tctx.canvas.style.width = width + 'px';\r\n\t\t\t\tctx.canvas.style.height = height + 'px';\r\n\t\t\t\tctx.setTransform( r, 0, 0, r, 0, 0 );\r\n\r\n\t\t\t\tctx.font = font;\r\n\t\t\t\tctx.textBaseline = 'middle';\r\n\t\t\t\tctx.textAlign = 'center';\r\n\t\t\t\tcolor = attributes.drawColor;\r\n\t\t\t\tctx.fillStyle = `rgba(${color.r},${color.g},${color.b},${color.a})`;\r\n\t\t\t\tctx.fillRect( 0, 0, width, height );\r\n\t\t\t\tctx.fillStyle = 'white';\r\n\t\t\t\tctx.fillText( geometry.text, width / 2, height / 2 );\r\n\r\n\t\t\t\tconst texture = new CanvasTexture( ctx.canvas );\r\n\t\t\t\ttexture.minFilter = LinearFilter;\r\n\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\r\n\r\n\t\t\t\tmaterial = new SpriteMaterial( { map: texture, depthTest: false } );\r\n\t\t\t\tconst sprite = new Sprite( material );\r\n\t\t\t\tsprite.position.set( geometry.point[ 0 ], geometry.point[ 1 ], geometry.point[ 2 ] );\r\n\t\t\t\tsprite.scale.set( width / 10, height / 10, 1.0 );\r\n\r\n\t\t\t\tsprite.userData[ 'attributes' ] = attributes;\r\n\t\t\t\tsprite.userData[ 'objectType' ] = obj.objectType;\r\n\r\n\t\t\t\tif ( attributes.name ) {\r\n\r\n\t\t\t\t\tsprite.name = attributes.name;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sprite;\r\n\r\n\t\t\tcase 'Light':\r\n\r\n\t\t\t\tgeometry = obj.geometry;\r\n\r\n\t\t\t\tlet light;\r\n\r\n\t\t\t\tswitch ( geometry.lightStyle.name ) {\r\n\r\n\t\t\t\t\tcase 'LightStyle_WorldPoint':\r\n\r\n\t\t\t\t\t\tlight = new PointLight();\r\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\r\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\r\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LightStyle_WorldSpot':\r\n\r\n\t\t\t\t\t\tlight = new SpotLight();\r\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\r\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\r\n\t\t\t\t\t\tlight.target.position.set( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\r\n\t\t\t\t\t\tlight.angle = geometry.spotAngleRadians;\r\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LightStyle_WorldRectangular':\r\n\r\n\t\t\t\t\t\tlight = new RectAreaLight();\r\n\t\t\t\t\t\tconst width = Math.abs( geometry.width[ 2 ] );\r\n\t\t\t\t\t\tconst height = Math.abs( geometry.length[ 0 ] );\r\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ] - ( height / 2 ), geometry.location[ 1 ], geometry.location[ 2 ] - ( width / 2 ) );\r\n\t\t\t\t\t\tlight.height = height;\r\n\t\t\t\t\t\tlight.width = width;\r\n\t\t\t\t\t\tlight.lookAt( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LightStyle_WorldDirectional':\r\n\r\n\t\t\t\t\t\tlight = new DirectionalLight();\r\n\t\t\t\t\t\tlight.castShadow = attributes.castsShadows;\r\n\t\t\t\t\t\tlight.position.set( geometry.location[ 0 ], geometry.location[ 1 ], geometry.location[ 2 ] );\r\n\t\t\t\t\t\tlight.target.position.set( geometry.direction[ 0 ], geometry.direction[ 1 ], geometry.direction[ 2 ] );\r\n\t\t\t\t\t\tlight.shadow.normalBias = 0.1;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LightStyle_WorldLinear':\r\n\t\t\t\t\t\t// not conversion exists, warning has already been printed to the console\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( light ) {\r\n\r\n\t\t\t\t\tlight.intensity = geometry.intensity;\r\n\t\t\t\t\t_color = geometry.diffuse;\r\n\t\t\t\t\tcolor = new Color( _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 );\r\n\t\t\t\t\tlight.color = color;\r\n\t\t\t\t\tlight.userData[ 'attributes' ] = attributes;\r\n\t\t\t\t\tlight.userData[ 'objectType' ] = obj.objectType;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn light;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_initLibrary() {\r\n\r\n\t\tif ( ! this.libraryPending ) {\r\n\r\n\t\t\t// Load rhino3dm wrapper.\r\n\t\t\tconst jsLoader = new FileLoader( this.manager );\r\n\t\t\tjsLoader.setPath( this.libraryPath );\r\n\t\t\tconst jsContent = new Promise( ( resolve, reject ) => {\r\n\r\n\t\t\t\tjsLoader.load( 'rhino3dm.js', resolve, undefined, reject );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// Load rhino3dm WASM binary.\r\n\t\t\tconst binaryLoader = new FileLoader( this.manager );\r\n\t\t\tbinaryLoader.setPath( this.libraryPath );\r\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\r\n\t\t\tconst binaryContent = new Promise( ( resolve, reject ) => {\r\n\r\n\t\t\t\tbinaryLoader.load( 'rhino3dm.wasm', resolve, undefined, reject );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tthis.libraryPending = Promise.all( [ jsContent, binaryContent ] )\r\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\r\n\r\n\t\t\t\t\t//this.libraryBinary = binaryContent;\r\n\t\t\t\t\tthis.libraryConfig.wasmBinary = binaryContent;\r\n\r\n\t\t\t\t\tconst fn = Rhino3dmWorker.toString();\r\n\r\n\t\t\t\t\tconst body = [\r\n\t\t\t\t\t\t'/* rhino3dm.js */',\r\n\t\t\t\t\t\tjsContent,\r\n\t\t\t\t\t\t'/* worker */',\r\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\r\n\t\t\t\t\t].join( '\\n' );\r\n\r\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.libraryPending;\r\n\r\n\t}\r\n\r\n\t_getWorker( taskCost ) {\r\n\r\n\t\treturn this._initLibrary().then( () => {\r\n\r\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\r\n\r\n\t\t\t\tconst worker = new Worker( this.workerSourceURL );\r\n\r\n\t\t\t\tworker._callbacks = {};\r\n\t\t\t\tworker._taskCosts = {};\r\n\t\t\t\tworker._taskLoad = 0;\r\n\r\n\t\t\t\tworker.postMessage( {\r\n\t\t\t\t\ttype: 'init',\r\n\t\t\t\t\tlibraryConfig: this.libraryConfig\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tworker.onmessage = e => {\r\n\r\n\t\t\t\t\tconst message = e.data;\r\n\r\n\t\t\t\t\tswitch ( message.type ) {\r\n\r\n\t\t\t\t\t\tcase 'warning':\r\n\t\t\t\t\t\t\tthis.warnings.push( message.data );\r\n\t\t\t\t\t\t\tconsole.warn( message.data );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'decode':\r\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.Rhino3dmLoader: Unexpected message, \"' + message.type + '\"' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tthis.workerPool.push( worker );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\r\n\r\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst worker = this.workerPool[ this.workerPool.length - 1 ];\r\n\r\n\t\t\tworker._taskLoad += taskCost;\r\n\r\n\t\t\treturn worker;\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t_releaseTask( worker, taskID ) {\r\n\r\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\r\n\t\tdelete worker._callbacks[ taskID ];\r\n\t\tdelete worker._taskCosts[ taskID ];\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tfor ( let i = 0; i < this.workerPool.length; ++ i ) {\r\n\r\n\t\t\tthis.workerPool[ i ].terminate();\r\n\r\n\t\t}\r\n\r\n\t\tthis.workerPool.length = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/* WEB WORKER */\r\n\r\nfunction Rhino3dmWorker() {\r\n\r\n\tlet libraryPending;\r\n\tlet libraryConfig;\r\n\tlet rhino;\r\n\tlet taskID;\r\n\r\n\tonmessage = function ( e ) {\r\n\r\n\t\tconst message = e.data;\r\n\r\n\t\tswitch ( message.type ) {\r\n\r\n\t\t\tcase 'init':\r\n\r\n\t\t\t\t// console.log(message)\r\n\t\t\t\tlibraryConfig = message.libraryConfig;\r\n\t\t\t\tconst wasmBinary = libraryConfig.wasmBinary;\r\n\t\t\t\tlet RhinoModule;\r\n\t\t\t\tlibraryPending = new Promise( function ( resolve ) {\r\n\r\n\t\t\t\t\t/* Like Basis Loader */\r\n\t\t\t\t\tRhinoModule = { wasmBinary, onRuntimeInitialized: resolve };\r\n\r\n\t\t\t\t\trhino3dm( RhinoModule ); // eslint-disable-line no-undef\r\n\r\n\t\t\t\t } ).then( () => {\r\n\r\n\t\t\t\t\trhino = RhinoModule;\r\n\r\n\t\t\t\t } );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'decode':\r\n\r\n\t\t\t\ttaskID = message.id;\r\n\t\t\t\tconst buffer = message.buffer;\r\n\t\t\t\tlibraryPending.then( () => {\r\n\r\n\t\t\t\t\ttry {\r\n\r\n\t\t\t\t\t\tconst data = decodeObjects( rhino, buffer );\r\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, data } );\r\n\r\n\t\t\t\t\t} catch ( error ) {\r\n\r\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error } );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction decodeObjects( rhino, buffer ) {\r\n\r\n\t\tconst arr = new Uint8Array( buffer );\r\n\t\tconst doc = rhino.File3dm.fromByteArray( arr );\r\n\r\n\t\tconst objects = [];\r\n\t\tconst materials = [];\r\n\t\tconst layers = [];\r\n\t\tconst views = [];\r\n\t\tconst namedViews = [];\r\n\t\tconst groups = [];\r\n\t\tconst strings = [];\r\n\r\n\t\t//Handle objects\r\n\r\n\t\tconst objs = doc.objects();\r\n\t\tconst cnt = objs.count;\r\n\r\n\t\tfor ( let i = 0; i < cnt; i ++ ) {\r\n\r\n\t\t\tconst _object = objs.get( i );\r\n\r\n\t\t\tconst object = extractObjectData( _object, doc );\r\n\r\n\t\t\t_object.delete();\r\n\r\n\t\t\tif ( object ) {\r\n\r\n\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Handle instance definitions\r\n\t\t// console.log( `Instance Definitions Count: ${doc.instanceDefinitions().count()}` );\r\n\r\n\t\tfor ( let i = 0; i < doc.instanceDefinitions().count(); i ++ ) {\r\n\r\n\t\t\tconst idef = doc.instanceDefinitions().get( i );\r\n\t\t\tconst idefAttributes = extractProperties( idef );\r\n\t\t\tidefAttributes.objectIds = idef.getObjectIds();\r\n\r\n\t\t\tobjects.push( { geometry: null, attributes: idefAttributes, objectType: 'InstanceDefinition' } );\r\n\r\n\t\t}\r\n\r\n\t\t// Handle materials\r\n\r\n\t\tconst textureTypes = [\r\n\t\t\t// rhino.TextureType.Bitmap,\r\n\t\t\trhino.TextureType.Diffuse,\r\n\t\t\trhino.TextureType.Bump,\r\n\t\t\trhino.TextureType.Transparency,\r\n\t\t\trhino.TextureType.Opacity,\r\n\t\t\trhino.TextureType.Emap\r\n\t\t];\r\n\r\n\t\tconst pbrTextureTypes = [\r\n\t\t\trhino.TextureType.PBR_BaseColor,\r\n\t\t\trhino.TextureType.PBR_Subsurface,\r\n\t\t\trhino.TextureType.PBR_SubsurfaceScattering,\r\n\t\t\trhino.TextureType.PBR_SubsurfaceScatteringRadius,\r\n\t\t\trhino.TextureType.PBR_Metallic,\r\n\t\t\trhino.TextureType.PBR_Specular,\r\n\t\t\trhino.TextureType.PBR_SpecularTint,\r\n\t\t\trhino.TextureType.PBR_Roughness,\r\n\t\t\trhino.TextureType.PBR_Anisotropic,\r\n\t\t\trhino.TextureType.PBR_Anisotropic_Rotation,\r\n\t\t\trhino.TextureType.PBR_Sheen,\r\n\t\t\trhino.TextureType.PBR_SheenTint,\r\n\t\t\trhino.TextureType.PBR_Clearcoat,\r\n\t\t\trhino.TextureType.PBR_ClearcoatBump,\r\n\t\t\trhino.TextureType.PBR_ClearcoatRoughness,\r\n\t\t\trhino.TextureType.PBR_OpacityIor,\r\n\t\t\trhino.TextureType.PBR_OpacityRoughness,\r\n\t\t\trhino.TextureType.PBR_Emission,\r\n\t\t\trhino.TextureType.PBR_AmbientOcclusion,\r\n\t\t\trhino.TextureType.PBR_Displacement\r\n\t\t];\r\n\r\n\t\tfor ( let i = 0; i < doc.materials().count(); i ++ ) {\r\n\r\n\t\t\tconst _material = doc.materials().get( i );\r\n\t\t\tconst _pbrMaterial = _material.physicallyBased();\r\n\r\n\t\t\tlet material = extractProperties( _material );\r\n\r\n\t\t\tconst textures = [];\r\n\r\n\t\t\tfor ( let j = 0; j < textureTypes.length; j ++ ) {\r\n\r\n\t\t\t\tconst _texture = _material.getTexture( textureTypes[ j ] );\r\n\t\t\t\tif ( _texture ) {\r\n\r\n\t\t\t\t\tlet textureType = textureTypes[ j ].constructor.name;\r\n\t\t\t\t\ttextureType = textureType.substring( 12, textureType.length );\r\n\t\t\t\t\tconst texture = { type: textureType };\r\n\r\n\t\t\t\t\tconst image = doc.getEmbeddedFileAsBase64( _texture.fileName );\r\n\r\n\t\t\t\t\ttexture.wrapU = _texture.wrapU;\r\n\t\t\t\t\ttexture.wrapV = _texture.wrapV;\r\n\t\t\t\t\ttexture.wrapW = _texture.wrapW;\r\n\t\t\t\t\tconst uvw = _texture.uvwTransform.toFloatArray( true );\r\n\t\t\t\t\ttexture.repeat = [ uvw[ 0 ], uvw[ 5 ] ];\r\n\r\n\t\t\t\t\tif ( image ) {\r\n\r\n\t\t\t\t\t\ttexture.image = 'data:image/png;base64,' + image;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\r\n\t\t\t\t\t\t\tmessage: `THREE.3DMLoader: Image for ${textureType} texture not embedded in file.`,\r\n\t\t\t\t\t\t\ttype: 'missing resource'\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\ttexture.image = null;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttextures.push( texture );\r\n\r\n\t\t\t\t\t_texture.delete();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.textures = textures;\r\n\r\n\t\t\tif ( _pbrMaterial.supported ) {\r\n\r\n\t\t\t\tfor ( let j = 0; j < pbrTextureTypes.length; j ++ ) {\r\n\r\n\t\t\t\t\tconst _texture = _material.getTexture( pbrTextureTypes[ j ] );\r\n\t\t\t\t\tif ( _texture ) {\r\n\r\n\t\t\t\t\t\tconst image = doc.getEmbeddedFileAsBase64( _texture.fileName );\r\n\t\t\t\t\t\tlet textureType = pbrTextureTypes[ j ].constructor.name;\r\n\t\t\t\t\t\ttextureType = textureType.substring( 12, textureType.length );\r\n\t\t\t\t\t\tconst texture = { type: textureType, image: 'data:image/png;base64,' + image };\r\n\t\t\t\t\t\ttextures.push( texture );\r\n\r\n\t\t\t\t\t\t_texture.delete();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst pbMaterialProperties = extractProperties( _material.physicallyBased() );\r\n\r\n\t\t\t\tmaterial = Object.assign( pbMaterialProperties, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterials.push( material );\r\n\r\n\t\t\t_material.delete();\r\n\t\t\t_pbrMaterial.delete();\r\n\r\n\t\t}\r\n\r\n\t\t// Handle layers\r\n\r\n\t\tfor ( let i = 0; i < doc.layers().count(); i ++ ) {\r\n\r\n\t\t\tconst _layer = doc.layers().get( i );\r\n\t\t\tconst layer = extractProperties( _layer );\r\n\r\n\t\t\tlayers.push( layer );\r\n\r\n\t\t\t_layer.delete();\r\n\r\n\t\t}\r\n\r\n\t\t// Handle views\r\n\r\n\t\tfor ( let i = 0; i < doc.views().count(); i ++ ) {\r\n\r\n\t\t\tconst _view = doc.views().get( i );\r\n\t\t\tconst view = extractProperties( _view );\r\n\r\n\t\t\tviews.push( view );\r\n\r\n\t\t\t_view.delete();\r\n\r\n\t\t}\r\n\r\n\t\t// Handle named views\r\n\r\n\t\tfor ( let i = 0; i < doc.namedViews().count(); i ++ ) {\r\n\r\n\t\t\tconst _namedView = doc.namedViews().get( i );\r\n\t\t\tconst namedView = extractProperties( _namedView );\r\n\r\n\t\t\tnamedViews.push( namedView );\r\n\r\n\t\t\t_namedView.delete();\r\n\r\n\t\t}\r\n\r\n\t\t// Handle groups\r\n\r\n\t\tfor ( let i = 0; i < doc.groups().count(); i ++ ) {\r\n\r\n\t\t\tconst _group = doc.groups().get( i );\r\n\t\t\tconst group = extractProperties( _group );\r\n\r\n\t\t\tgroups.push( group );\r\n\r\n\t\t\t_group.delete();\r\n\r\n\t\t}\r\n\r\n\t\t// Handle settings\r\n\r\n\t\tconst settings = extractProperties( doc.settings() );\r\n\r\n\t\t//TODO: Handle other document stuff like dimstyles, instance definitions, bitmaps etc.\r\n\r\n\t\t// Handle dimstyles\r\n\t\t// console.log( `Dimstyle Count: ${doc.dimstyles().count()}` );\r\n\r\n\t\t// Handle bitmaps\r\n\t\t// console.log( `Bitmap Count: ${doc.bitmaps().count()}` );\r\n\r\n\t\t// Handle strings\r\n\t\t// console.log( `Document Strings Count: ${doc.strings().count()}` );\r\n\t\t// Note: doc.strings().documentUserTextCount() counts any doc.strings defined in a section\r\n\t\t//console.log( `Document User Text Count: ${doc.strings().documentUserTextCount()}` );\r\n\r\n\t\tconst strings_count = doc.strings().count();\r\n\r\n\t\tfor ( let i = 0; i < strings_count; i ++ ) {\r\n\r\n\t\t\tstrings.push( doc.strings().get( i ) );\r\n\r\n\t\t}\r\n\r\n\t\tdoc.delete();\r\n\r\n\t\treturn { objects, materials, layers, views, namedViews, groups, strings, settings };\r\n\r\n\t}\r\n\r\n\tfunction extractObjectData( object, doc ) {\r\n\r\n\t\tconst _geometry = object.geometry();\r\n\t\tconst _attributes = object.attributes();\r\n\t\tlet objectType = _geometry.objectType;\r\n\t\tlet geometry, attributes, position, data, mesh;\r\n\r\n\t\t// skip instance definition objects\r\n\t\t//if( _attributes.isInstanceDefinitionObject ) { continue; }\r\n\r\n\t\t// TODO: handle other geometry types\r\n\t\tswitch ( objectType ) {\r\n\r\n\t\t\tcase rhino.ObjectType.Curve:\r\n\r\n\t\t\t\tconst pts = curveToPoints( _geometry, 100 );\r\n\r\n\t\t\t\tposition = {};\r\n\t\t\t\tattributes = {};\r\n\t\t\t\tdata = {};\r\n\r\n\t\t\t\tposition.itemSize = 3;\r\n\t\t\t\tposition.type = 'Float32Array';\r\n\t\t\t\tposition.array = [];\r\n\r\n\t\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\r\n\r\n\t\t\t\t\tposition.array.push( pts[ j ][ 0 ] );\r\n\t\t\t\t\tposition.array.push( pts[ j ][ 1 ] );\r\n\t\t\t\t\tposition.array.push( pts[ j ][ 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tattributes.position = position;\r\n\t\t\t\tdata.attributes = attributes;\r\n\r\n\t\t\t\tgeometry = { data };\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.Point:\r\n\r\n\t\t\t\tconst pt = _geometry.location;\r\n\r\n\t\t\t\tposition = {};\r\n\t\t\t\tconst color = {};\r\n\t\t\t\tattributes = {};\r\n\t\t\t\tdata = {};\r\n\r\n\t\t\t\tposition.itemSize = 3;\r\n\t\t\t\tposition.type = 'Float32Array';\r\n\t\t\t\tposition.array = [ pt[ 0 ], pt[ 1 ], pt[ 2 ] ];\r\n\r\n\t\t\t\tconst _color = _attributes.drawColor( doc );\r\n\r\n\t\t\t\tcolor.itemSize = 3;\r\n\t\t\t\tcolor.type = 'Float32Array';\r\n\t\t\t\tcolor.array = [ _color.r / 255.0, _color.g / 255.0, _color.b / 255.0 ];\r\n\r\n\t\t\t\tattributes.position = position;\r\n\t\t\t\tattributes.color = color;\r\n\t\t\t\tdata.attributes = attributes;\r\n\r\n\t\t\t\tgeometry = { data };\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.PointSet:\r\n\t\t\tcase rhino.ObjectType.Mesh:\r\n\r\n\t\t\t\tgeometry = _geometry.toThreejsJSON();\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.Brep:\r\n\r\n\t\t\t\tconst faces = _geometry.faces();\r\n\t\t\t\tmesh = new rhino.Mesh();\r\n\r\n\t\t\t\tfor ( let faceIndex = 0; faceIndex < faces.count; faceIndex ++ ) {\r\n\r\n\t\t\t\t\tconst face = faces.get( faceIndex );\r\n\t\t\t\t\tconst _mesh = face.getMesh( rhino.MeshType.Any );\r\n\r\n\t\t\t\t\tif ( _mesh ) {\r\n\r\n\t\t\t\t\t\tmesh.append( _mesh );\r\n\t\t\t\t\t\t_mesh.delete();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tface.delete();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( mesh.faces().count > 0 ) {\r\n\r\n\t\t\t\t\tmesh.compact();\r\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\r\n\t\t\t\t\tfaces.delete();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.delete();\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.Extrusion:\r\n\r\n\t\t\t\tmesh = _geometry.getMesh( rhino.MeshType.Any );\r\n\r\n\t\t\t\tif ( mesh ) {\r\n\r\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\r\n\t\t\t\t\tmesh.delete();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.TextDot:\r\n\r\n\t\t\t\tgeometry = extractProperties( _geometry );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.Light:\r\n\r\n\t\t\t\tgeometry = extractProperties( _geometry );\r\n\r\n\t\t\t\tif ( geometry.lightStyle.name === 'LightStyle_WorldLinear' ) {\r\n\r\n\t\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\r\n\t\t\t\t\t\tmessage: `THREE.3DMLoader: No conversion exists for ${objectType.constructor.name} ${geometry.lightStyle.name}`,\r\n\t\t\t\t\t\ttype: 'no conversion',\r\n\t\t\t\t\t\tguid: _attributes.id\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.InstanceReference:\r\n\r\n\t\t\t\tgeometry = extractProperties( _geometry );\r\n\t\t\t\tgeometry.xform = extractProperties( _geometry.xform );\r\n\t\t\t\tgeometry.xform.array = _geometry.xform.toFloatArray( true );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase rhino.ObjectType.SubD:\r\n\r\n\t\t\t\t// TODO: precalculate resulting vertices and faces and warn on excessive results\r\n\t\t\t\t_geometry.subdivide( 3 );\r\n\t\t\t\tmesh = rhino.Mesh.createFromSubDControlNet( _geometry );\r\n\t\t\t\tif ( mesh ) {\r\n\r\n\t\t\t\t\tgeometry = mesh.toThreejsJSON();\r\n\t\t\t\t\tmesh.delete();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t/*\r\n\t\t\t\tcase rhino.ObjectType.Annotation:\r\n\t\t\t\tcase rhino.ObjectType.Hatch:\r\n\t\t\t\tcase rhino.ObjectType.ClipPlane:\r\n\t\t\t\t*/\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\r\n\t\t\t\t\tmessage: `THREE.3DMLoader: Conversion not implemented for ${objectType.constructor.name}`,\r\n\t\t\t\t\ttype: 'not implemented',\r\n\t\t\t\t\tguid: _attributes.id\r\n\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry ) {\r\n\r\n\t\t\tattributes = extractProperties( _attributes );\r\n\t\t\tattributes.geometry = extractProperties( _geometry );\r\n\r\n\t\t\tif ( _attributes.groupCount > 0 ) {\r\n\r\n\t\t\t\tattributes.groupIds = _attributes.getGroupList();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _attributes.userStringCount > 0 ) {\r\n\r\n\t\t\t\tattributes.userStrings = _attributes.getUserStrings();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _geometry.userStringCount > 0 ) {\r\n\r\n\t\t\t\tattributes.geometry.userStrings = _geometry.getUserStrings();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattributes.drawColor = _attributes.drawColor( doc );\r\n\r\n\t\t\tobjectType = objectType.constructor.name;\r\n\t\t\tobjectType = objectType.substring( 11, objectType.length );\r\n\r\n\t\t\treturn { geometry, attributes, objectType };\r\n\r\n\t\t} else {\r\n\r\n\t\t\tself.postMessage( { type: 'warning', id: taskID, data: {\r\n\t\t\t\tmessage: `THREE.3DMLoader: ${objectType.constructor.name} has no associated mesh geometry.`,\r\n\t\t\t\ttype: 'missing mesh',\r\n\t\t\t\tguid: _attributes.id\r\n\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction extractProperties( object ) {\r\n\r\n\t\tconst result = {};\r\n\r\n\t\tfor ( const property in object ) {\r\n\r\n\t\t\tconst value = object[ property ];\r\n\r\n\t\t\tif ( typeof value !== 'function' ) {\r\n\r\n\t\t\t\tif ( typeof value === 'object' && value !== null && Object.prototype.hasOwnProperty.call(value, 'constructor' ) ) {\r\n\r\n\t\t\t\t\tresult[ property ] = { name: value.constructor.name, value: value.value };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tresult[ property ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// these are functions that could be called to extract more data.\r\n\t\t\t\t//console.log( `${property}: ${object[ property ].constructor.name}` );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tfunction curveToPoints( curve, pointLimit ) {\r\n\r\n\t\tlet pointCount = pointLimit;\r\n\t\tlet rc = [];\r\n\t\tconst ts = [];\r\n\r\n\t\tif ( curve instanceof rhino.LineCurve ) {\r\n\r\n\t\t\treturn [ curve.pointAtStart, curve.pointAtEnd ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( curve instanceof rhino.PolylineCurve ) {\r\n\r\n\t\t\tpointCount = curve.pointCount;\r\n\t\t\tfor ( let i = 0; i < pointCount; i ++ ) {\r\n\r\n\t\t\t\trc.push( curve.point( i ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn rc;\r\n\r\n\t\t}\r\n\r\n\t\tif ( curve instanceof rhino.PolyCurve ) {\r\n\r\n\t\t\tconst segmentCount = curve.segmentCount;\r\n\r\n\t\t\tfor ( let i = 0; i < segmentCount; i ++ ) {\r\n\r\n\t\t\t\tconst segment = curve.segmentCurve( i );\r\n\t\t\t\tconst segmentArray = curveToPoints( segment, pointCount );\r\n\t\t\t\trc = rc.concat( segmentArray );\r\n\t\t\t\tsegment.delete();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn rc;\r\n\r\n\t\t}\r\n\r\n\t\tif ( curve instanceof rhino.ArcCurve ) {\r\n\r\n\t\t\tpointCount = Math.floor( curve.angleDegrees / 5 );\r\n\t\t\tpointCount = pointCount < 2 ? 2 : pointCount;\r\n\t\t\t// alternative to this hardcoded version: https://stackoverflow.com/a/18499923/2179399\r\n\r\n\t\t}\r\n\r\n\t\tif ( curve instanceof rhino.NurbsCurve && curve.degree === 1 ) {\r\n\r\n\t\t\tconst pLine = curve.tryGetPolyline();\r\n\r\n\t\t\tfor ( let i = 0; i < pLine.count; i ++ ) {\r\n\r\n\t\t\t\trc.push( pLine.get( i ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpLine.delete();\r\n\r\n\t\t\treturn rc;\r\n\r\n\t\t}\r\n\r\n\t\tconst domain = curve.domain;\r\n\t\tconst divisions = pointCount - 1.0;\r\n\r\n\t\tfor ( let j = 0; j < pointCount; j ++ ) {\r\n\r\n\t\t\tconst t = domain[ 0 ] + ( j / divisions ) * ( domain[ 1 ] - domain[ 0 ] );\r\n\r\n\t\t\tif ( t === domain[ 0 ] || t === domain[ 1 ] ) {\r\n\r\n\t\t\t\tts.push( t );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tan = curve.tangentAt( t );\r\n\t\t\tconst prevTan = curve.tangentAt( ts.slice( - 1 )[ 0 ] );\r\n\r\n\t\t\t// Duplicated from THREE.Vector3\r\n\t\t\t// How to pass imports to worker?\r\n\r\n\t\t\tconst tS = tan[ 0 ] * tan[ 0 ] + tan[ 1 ] * tan[ 1 ] + tan[ 2 ] * tan[ 2 ];\r\n\t\t\tconst ptS = prevTan[ 0 ] * prevTan[ 0 ] + prevTan[ 1 ] * prevTan[ 1 ] + prevTan[ 2 ] * prevTan[ 2 ];\r\n\r\n\t\t\tconst denominator = Math.sqrt( tS * ptS );\r\n\r\n\t\t\tlet angle;\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\tangle = Math.PI / 2;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst theta = ( tan.x * prevTan.x + tan.y * prevTan.y + tan.z * prevTan.z ) / denominator;\r\n\t\t\t\tangle = Math.acos( Math.max( - 1, Math.min( 1, theta ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( angle < 0.1 ) continue;\r\n\r\n\t\t\tts.push( t );\r\n\r\n\t\t}\r\n\r\n\t\trc = ts.map( t => curve.pointAt( t ) );\r\n\t\treturn rc;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Rhino3dmLoader };\r\n"],"names":["_taskCache","WeakMap","Rhino3dmLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","libraryPath","libraryPending","libraryBinary","libraryConfig","url","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","materials","warnings","_createClass","key","value","path","this","onLoad","onProgress","onError","_this2","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","load","buffer","has","get","promise","then","catch","decodeObjects","result","userData","e","console","log","map","worker","_taskLoad","taskID","_this3","taskCost","byteLength","objectPending","_getWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","type","id","message","_createGeometry","data","_releaseTask","set","_this4","material","mat","name","color","r","g","b","i","length","m","_mat","JSON","stringify","push","undefined","MeshStandardMaterial","Color","metalness","side","_diffuseColor","diffuseColor","diffusecolor","transparent","transparency","opacity","textureLoader","TextureLoader","textures","texture","image","bumpMap","alphaMap","envMap","wrapS","wrapU","RepeatWrapping","ClampToEdgeWrapping","wrapT","wrapV","repeat","object","Object3D","instanceDefinitionObjects","instanceDefinitions","instanceReferences","layers","groups","settings","objects","obj","attributes","objectType","_object","materialIndex","rMaterial","_createMaterial","_compareMaterials","_createObject","layer","layerIndex","visible","isInstanceDefinitionObject","add","iDef","j","objectIds","objId","p","iRef","geometry","parentIdefId","iRefObject","xf","xform","array","matrix","Matrix4","applyMatrix4","clone","_color","BufferGeometryLoader","parse","Object","prototype","hasOwnProperty","PointsMaterial","vertexColors","sizeAttenuation","size","drawColor","points","Points","mesh","Mesh","castShadow","castsShadows","receiveShadow","receivesShadows","LineBasicMaterial","lines","Line","ctx","document","createElement","getContext","font","concat","fontHeight","fontFace","width","measureText","text","height","window","devicePixelRatio","canvas","style","setTransform","textBaseline","textAlign","fillStyle","a","fillRect","fillText","CanvasTexture","minFilter","LinearFilter","SpriteMaterial","depthTest","sprite","Sprite","position","point","scale","light","lightStyle","PointLight","location","shadow","normalBias","SpotLight","target","direction","angle","spotAngleRadians","RectAreaLight","Math","abs","lookAt","DirectionalLight","intensity","diffuse","_this5","jsLoader","jsContent","binaryLoader","binaryContent","all","_ref","_ref2","_slicedToArray","wasmBinary","fn","Rhino3dmWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Blob","_this6","_initLibrary","Worker","_taskCosts","onmessage","warn","error","sort","terminate","Loader","rhino","extractObjectData","doc","_geometry","_attributes","ObjectType","Curve","pts","curveToPoints","itemSize","Point","pt","PointSet","toThreejsJSON","Brep","faces","faceIndex","count","face","_mesh","getMesh","MeshType","Any","append","delete","compact","Extrusion","TextDot","extractProperties","Light","self","constructor","guid","InstanceReference","toFloatArray","SubD","subdivide","createFromSubDControlNet","groupCount","groupIds","getGroupList","userStringCount","userStrings","getUserStrings","property","curve","pointLimit","pointCount","rc","ts","LineCurve","pointAtStart","pointAtEnd","PolylineCurve","PolyCurve","segmentCount","segment","segmentCurve","segmentArray","ArcCurve","floor","angleDegrees","NurbsCurve","degree","pLine","tryGetPolyline","domain","divisions","t","tan","tangentAt","prevTan","slice","tS","ptS","denominator","sqrt","PI","theta","x","y","z","acos","max","min","pointAt","RhinoModule","onRuntimeInitialized","rhino3dm","arr","Uint8Array","File3dm","fromByteArray","views","namedViews","strings","objs","cnt","idef","idefAttributes","getObjectIds","textureTypes","TextureType","Diffuse","Bump","Transparency","Opacity","Emap","pbrTextureTypes","PBR_BaseColor","PBR_Subsurface","PBR_SubsurfaceScattering","PBR_SubsurfaceScatteringRadius","PBR_Metallic","PBR_Specular","PBR_SpecularTint","PBR_Roughness","PBR_Anisotropic","PBR_Anisotropic_Rotation","PBR_Sheen","PBR_SheenTint","PBR_Clearcoat","PBR_ClearcoatBump","PBR_ClearcoatRoughness","PBR_OpacityIor","PBR_OpacityRoughness","PBR_Emission","PBR_AmbientOcclusion","PBR_Displacement","_material","_pbrMaterial","physicallyBased","_texture","getTexture","textureType","getEmbeddedFileAsBase64","fileName","wrapW","uvw","uvwTransform","supported","pbMaterialProperties","assign","_layer","_view","view","_namedView","namedView","_group","group","strings_count"],"sourceRoot":""}