{"version":3,"file":"static/js/8372.e546c77e.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/AMFLoader.js"],"sourcesContent":["import {\r\n\tBufferGeometry,\r\n\tColor,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tGroup,\r\n\tLoader,\r\n\tMesh,\r\n\tMeshPhongMaterial\r\n} from '../../../build/three';\r\n\r\nimport * as fflate from '../libs/fflate.module.js';\r\n\r\n/**\r\n * Description: Early release of an AMF Loader following the pattern of the\r\n * example loaders in the three.js project.\r\n *\r\n * Usage:\r\n *\tconst loader = new AMFLoader();\r\n *\tloader.load('/path/to/project.amf', function(objecttree) {\r\n *\t\tscene.add(objecttree);\r\n *\t});\r\n *\r\n * Materials now supported, material colors supported\r\n * Zip support, requires fflate\r\n * No constellation support (yet)!\r\n *\r\n */\r\n\r\nclass AMFLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( data ) {\r\n\r\n\t\tfunction loadDocument( data ) {\r\n\r\n\t\t\tlet view = new DataView( data );\r\n\t\t\tconst magic = String.fromCharCode( view.getUint8( 0 ), view.getUint8( 1 ) );\r\n\r\n\t\t\tif ( magic === 'PK' ) {\r\n\r\n\t\t\t\tlet zip = null;\r\n\t\t\t\tlet file = null;\r\n\r\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Loading Zip' );\r\n\r\n\t\t\t\ttry {\r\n\r\n\t\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) );\r\n\r\n\t\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\t\tif ( e instanceof ReferenceError ) {\r\n\r\n\t\t\t\t\t\tconsole.log( 'THREE.AMFLoader: fflate missing and file is compressed.' );\r\n\t\t\t\t\t\treturn null;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( file in zip ) {\r\n\r\n\t\t\t\t\tif ( file.toLowerCase().slice( - 4 ) === '.amf' ) {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Trying to load file asset: ' + file );\r\n\t\t\t\tview = new DataView( zip[ file ].buffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst fileText = new TextDecoder().decode( view );\r\n\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\r\n\r\n\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'amf' ) {\r\n\r\n\t\t\t\tconsole.log( 'THREE.AMFLoader: Error loading AMF - no AMF document found.' );\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn xmlData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadDocumentScale( node ) {\r\n\r\n\t\t\tlet scale = 1.0;\r\n\t\t\tlet unit = 'millimeter';\r\n\r\n\t\t\tif ( node.documentElement.attributes.unit !== undefined ) {\r\n\r\n\t\t\t\tunit = node.documentElement.attributes.unit.value.toLowerCase();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst scaleUnits = {\r\n\t\t\t\tmillimeter: 1.0,\r\n\t\t\t\tinch: 25.4,\r\n\t\t\t\tfeet: 304.8,\r\n\t\t\t\tmeter: 1000.0,\r\n\t\t\t\tmicron: 0.001\r\n\t\t\t};\r\n\r\n\t\t\tif ( scaleUnits[ unit ] !== undefined ) {\r\n\r\n\t\t\t\tscale = scaleUnits[ unit ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log( 'THREE.AMFLoader: Unit scale: ' + scale );\r\n\t\t\treturn scale;\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadMaterials( node ) {\r\n\r\n\t\t\tlet matName = 'AMF Material';\r\n\t\t\tconst matId = node.attributes.id.textContent;\r\n\t\t\tlet color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\r\n\r\n\t\t\tlet loadedMaterial = null;\r\n\r\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst matChildEl = node.childNodes[ i ];\r\n\r\n\t\t\t\tif ( matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined ) {\r\n\r\n\t\t\t\t\tif ( matChildEl.attributes.type.value === 'name' ) {\r\n\r\n\t\t\t\t\t\tmatName = matChildEl.textContent;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( matChildEl.nodeName === 'color' ) {\r\n\r\n\t\t\t\t\tcolor = loadColor( matChildEl );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tloadedMaterial = new MeshPhongMaterial( {\r\n\t\t\t\tflatShading: true,\r\n\t\t\t\tcolor: new Color( color.r, color.g, color.b ),\r\n\t\t\t\tname: matName\r\n\t\t\t} );\r\n\r\n\t\t\tif ( color.a !== 1.0 ) {\r\n\r\n\t\t\t\tloadedMaterial.transparent = true;\r\n\t\t\t\tloadedMaterial.opacity = color.a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn { id: matId, material: loadedMaterial };\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadColor( node ) {\r\n\r\n\t\t\tconst color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\r\n\r\n\t\t\tfor ( let i = 0; i < node.childNodes.length; i ++ ) {\r\n\r\n\t\t\t\tconst matColor = node.childNodes[ i ];\r\n\r\n\t\t\t\tif ( matColor.nodeName === 'r' ) {\r\n\r\n\t\t\t\t\tcolor.r = matColor.textContent;\r\n\r\n\t\t\t\t} else if ( matColor.nodeName === 'g' ) {\r\n\r\n\t\t\t\t\tcolor.g = matColor.textContent;\r\n\r\n\t\t\t\t} else if ( matColor.nodeName === 'b' ) {\r\n\r\n\t\t\t\t\tcolor.b = matColor.textContent;\r\n\r\n\t\t\t\t} else if ( matColor.nodeName === 'a' ) {\r\n\r\n\t\t\t\t\tcolor.a = matColor.textContent;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadMeshVolume( node ) {\r\n\r\n\t\t\tconst volume = { name: '', triangles: [], materialid: null };\r\n\r\n\t\t\tlet currVolumeNode = node.firstElementChild;\r\n\r\n\t\t\tif ( node.attributes.materialid !== undefined ) {\r\n\r\n\t\t\t\tvolume.materialId = node.attributes.materialid.nodeValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( currVolumeNode ) {\r\n\r\n\t\t\t\tif ( currVolumeNode.nodeName === 'metadata' ) {\r\n\r\n\t\t\t\t\tif ( currVolumeNode.attributes.type !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( currVolumeNode.attributes.type.value === 'name' ) {\r\n\r\n\t\t\t\t\t\t\tvolume.name = currVolumeNode.textContent;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( currVolumeNode.nodeName === 'triangle' ) {\r\n\r\n\t\t\t\t\tconst v1 = currVolumeNode.getElementsByTagName( 'v1' )[ 0 ].textContent;\r\n\t\t\t\t\tconst v2 = currVolumeNode.getElementsByTagName( 'v2' )[ 0 ].textContent;\r\n\t\t\t\t\tconst v3 = currVolumeNode.getElementsByTagName( 'v3' )[ 0 ].textContent;\r\n\r\n\t\t\t\t\tvolume.triangles.push( v1, v2, v3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrVolumeNode = currVolumeNode.nextElementSibling;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn volume;\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadMeshVertices( node ) {\r\n\r\n\t\t\tconst vertArray = [];\r\n\t\t\tconst normalArray = [];\r\n\t\t\tlet currVerticesNode = node.firstElementChild;\r\n\r\n\t\t\twhile ( currVerticesNode ) {\r\n\r\n\t\t\t\tif ( currVerticesNode.nodeName === 'vertex' ) {\r\n\r\n\t\t\t\t\tlet vNode = currVerticesNode.firstElementChild;\r\n\r\n\t\t\t\t\twhile ( vNode ) {\r\n\r\n\t\t\t\t\t\tif ( vNode.nodeName === 'coordinates' ) {\r\n\r\n\t\t\t\t\t\t\tconst x = vNode.getElementsByTagName( 'x' )[ 0 ].textContent;\r\n\t\t\t\t\t\t\tconst y = vNode.getElementsByTagName( 'y' )[ 0 ].textContent;\r\n\t\t\t\t\t\t\tconst z = vNode.getElementsByTagName( 'z' )[ 0 ].textContent;\r\n\r\n\t\t\t\t\t\t\tvertArray.push( x, y, z );\r\n\r\n\t\t\t\t\t\t} else if ( vNode.nodeName === 'normal' ) {\r\n\r\n\t\t\t\t\t\t\tconst nx = vNode.getElementsByTagName( 'nx' )[ 0 ].textContent;\r\n\t\t\t\t\t\t\tconst ny = vNode.getElementsByTagName( 'ny' )[ 0 ].textContent;\r\n\t\t\t\t\t\t\tconst nz = vNode.getElementsByTagName( 'nz' )[ 0 ].textContent;\r\n\r\n\t\t\t\t\t\t\tnormalArray.push( nx, ny, nz );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvNode = vNode.nextElementSibling;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrVerticesNode = currVerticesNode.nextElementSibling;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn { 'vertices': vertArray, 'normals': normalArray };\r\n\r\n\t\t}\r\n\r\n\t\tfunction loadObject( node ) {\r\n\r\n\t\t\tconst objId = node.attributes.id.textContent;\r\n\t\t\tconst loadedObject = { name: 'amfobject', meshes: [] };\r\n\t\t\tlet currColor = null;\r\n\t\t\tlet currObjNode = node.firstElementChild;\r\n\r\n\t\t\twhile ( currObjNode ) {\r\n\r\n\t\t\t\tif ( currObjNode.nodeName === 'metadata' ) {\r\n\r\n\t\t\t\t\tif ( currObjNode.attributes.type !== undefined ) {\r\n\r\n\t\t\t\t\t\tif ( currObjNode.attributes.type.value === 'name' ) {\r\n\r\n\t\t\t\t\t\t\tloadedObject.name = currObjNode.textContent;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( currObjNode.nodeName === 'color' ) {\r\n\r\n\t\t\t\t\tcurrColor = loadColor( currObjNode );\r\n\r\n\t\t\t\t} else if ( currObjNode.nodeName === 'mesh' ) {\r\n\r\n\t\t\t\t\tlet currMeshNode = currObjNode.firstElementChild;\r\n\t\t\t\t\tconst mesh = { vertices: [], normals: [], volumes: [], color: currColor };\r\n\r\n\t\t\t\t\twhile ( currMeshNode ) {\r\n\r\n\t\t\t\t\t\tif ( currMeshNode.nodeName === 'vertices' ) {\r\n\r\n\t\t\t\t\t\t\tconst loadedVertices = loadMeshVertices( currMeshNode );\r\n\r\n\t\t\t\t\t\t\tmesh.normals = mesh.normals.concat( loadedVertices.normals );\r\n\t\t\t\t\t\t\tmesh.vertices = mesh.vertices.concat( loadedVertices.vertices );\r\n\r\n\t\t\t\t\t\t} else if ( currMeshNode.nodeName === 'volume' ) {\r\n\r\n\t\t\t\t\t\t\tmesh.volumes.push( loadMeshVolume( currMeshNode ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tcurrMeshNode = currMeshNode.nextElementSibling;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tloadedObject.meshes.push( mesh );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurrObjNode = currObjNode.nextElementSibling;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn { 'id': objId, 'obj': loadedObject };\r\n\r\n\t\t}\r\n\r\n\t\tconst xmlData = loadDocument( data );\r\n\t\tlet amfName = '';\r\n\t\tlet amfAuthor = '';\r\n\t\tconst amfScale = loadDocumentScale( xmlData );\r\n\t\tconst amfMaterials = {};\r\n\t\tconst amfObjects = {};\r\n\t\tconst childNodes = xmlData.documentElement.childNodes;\r\n\r\n\t\tlet i, j;\r\n\r\n\t\tfor ( i = 0; i < childNodes.length; i ++ ) {\r\n\r\n\t\t\tconst child = childNodes[ i ];\r\n\r\n\t\t\tif ( child.nodeName === 'metadata' ) {\r\n\r\n\t\t\t\tif ( child.attributes.type !== undefined ) {\r\n\r\n\t\t\t\t\tif ( child.attributes.type.value === 'name' ) {\r\n\r\n\t\t\t\t\t\tamfName = child.textContent;\r\n\r\n\t\t\t\t\t} else if ( child.attributes.type.value === 'author' ) {\r\n\r\n\t\t\t\t\t\tamfAuthor = child.textContent;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( child.nodeName === 'material' ) {\r\n\r\n\t\t\t\tconst loadedMaterial = loadMaterials( child );\r\n\r\n\t\t\t\tamfMaterials[ loadedMaterial.id ] = loadedMaterial.material;\r\n\r\n\t\t\t} else if ( child.nodeName === 'object' ) {\r\n\r\n\t\t\t\tconst loadedObject = loadObject( child );\r\n\r\n\t\t\t\tamfObjects[ loadedObject.id ] = loadedObject.obj;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst sceneObject = new Group();\r\n\t\tconst defaultMaterial = new MeshPhongMaterial( { color: 0xaaaaff, flatShading: true } );\r\n\r\n\t\tsceneObject.name = amfName;\r\n\t\tsceneObject.userData.author = amfAuthor;\r\n\t\tsceneObject.userData.loader = 'AMF';\r\n\r\n\t\tfor ( const id in amfObjects ) {\r\n\r\n\t\t\tconst part = amfObjects[ id ];\r\n\t\t\tconst meshes = part.meshes;\r\n\t\t\tconst newObject = new Group();\r\n\t\t\tnewObject.name = part.name || '';\r\n\r\n\t\t\tfor ( i = 0; i < meshes.length; i ++ ) {\r\n\r\n\t\t\t\tlet objDefaultMaterial = defaultMaterial;\r\n\t\t\t\tconst mesh = meshes[ i ];\r\n\t\t\t\tconst vertices = new Float32BufferAttribute( mesh.vertices, 3 );\r\n\t\t\t\tlet normals = null;\r\n\r\n\t\t\t\tif ( mesh.normals.length ) {\r\n\r\n\t\t\t\t\tnormals = new Float32BufferAttribute( mesh.normals, 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( mesh.color ) {\r\n\r\n\t\t\t\t\tconst color = mesh.color;\r\n\r\n\t\t\t\t\tobjDefaultMaterial = defaultMaterial.clone();\r\n\t\t\t\t\tobjDefaultMaterial.color = new Color( color.r, color.g, color.b );\r\n\r\n\t\t\t\t\tif ( color.a !== 1.0 ) {\r\n\r\n\t\t\t\t\t\tobjDefaultMaterial.transparent = true;\r\n\t\t\t\t\t\tobjDefaultMaterial.opacity = color.a;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst volumes = mesh.volumes;\r\n\r\n\t\t\t\tfor ( j = 0; j < volumes.length; j ++ ) {\r\n\r\n\t\t\t\t\tconst volume = volumes[ j ];\r\n\t\t\t\t\tconst newGeometry = new BufferGeometry();\r\n\t\t\t\t\tlet material = objDefaultMaterial;\r\n\r\n\t\t\t\t\tnewGeometry.setIndex( volume.triangles );\r\n\t\t\t\t\tnewGeometry.setAttribute( 'position', vertices.clone() );\r\n\r\n\t\t\t\t\tif ( normals ) {\r\n\r\n\t\t\t\t\t\tnewGeometry.setAttribute( 'normal', normals.clone() );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( amfMaterials[ volume.materialId ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tmaterial = amfMaterials[ volume.materialId ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnewGeometry.scale( amfScale, amfScale, amfScale );\r\n\t\t\t\t\tnewObject.add( new Mesh( newGeometry, material.clone() ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsceneObject.add( newObject );\r\n\r\n\t\t}\r\n\r\n\t\treturn sceneObject;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { AMFLoader };\r\n"],"names":["AMFLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","loadMaterials","node","matName","matId","attributes","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","nodeName","undefined","type","loadColor","MeshPhongMaterial","flatShading","Color","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","vertices","normals","volumes","loadedVertices","concat","j","xmlData","view","DataView","String","fromCharCode","getUint8","zip","file","log","fflate","Uint8Array","ReferenceError","toLowerCase","slice","buffer","fileText","TextDecoder","decode","DOMParser","parseFromString","documentElement","loadDocument","amfName","amfAuthor","amfScale","scale","unit","scaleUnits","millimeter","inch","feet","meter","micron","loadDocumentScale","amfMaterials","amfObjects","child","obj","sceneObject","Group","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","Float32BufferAttribute","clone","newGeometry","BufferGeometry","setIndex","setAttribute","add","Mesh","Loader"],"sourceRoot":""}