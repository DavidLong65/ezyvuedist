{"version":3,"file":"static/js/2821.6f025466.chunk.js","mappings":"+NAMe,SAASA,EAA0BC,GAChD,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,SAAS,WAAWC,QAAQ,cAAaC,SAAA,EAC5CC,EAAAA,EAAAA,KAACC,EAAAA,GAAgBC,EAAAA,EAAAA,GAAA,GAAKR,IAEF,gBAAlBA,EAAMS,UACNH,EAAAA,EAAAA,KAACJ,EAAAA,EAAG,CACFQ,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPV,SAAS,WACTC,QAAQ,OACRU,WAAW,SACXC,eAAe,SAAQV,UAEvBC,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACP,QAAQ,UAAUQ,UAAU,MAAMC,MAAM,gBAAeb,UACjEC,EAAAA,EAAAA,KAAA,QAAMa,MAAO,CAAEC,SAAUpB,EAAMoB,UAAWf,SAAA,GAAAgB,OAEnCC,KAAKC,MAAMvB,EAAMwB,OAAM,aAQ1C,C,IC3BMC,GAAYC,E,SAAAA,IAAW,iBAAO,CAClCC,SAAU,CACRC,OAAQ,EACRV,MAAO,QACPW,gBAAiB,sBAEpB,IAEc,SAASC,EAAe9B,GACrC,IAAM+B,EAAUN,IAEhB,OACIxB,EAAAA,EAAAA,MAAC+B,EAAAA,SAAQ,CAAA3B,SAAA,EACPC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CAACC,UAAWH,EAAQJ,SAAUQ,KAAMnC,EAAMoC,KAAMC,mBAAoB,CAACC,KAAM,IAAMC,MAAO,EAAGC,OAAQ,GAAGnC,UAC3GC,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAACsB,UAAW,UAAUpC,UAC9BC,EAAAA,EAAAA,KAACP,EAAyB,CAACU,QAAST,EAAMS,QAASS,MAAM,UAAUM,MAAOxB,EAAMwB,MAAOkB,KAAM,GAAItB,SAAS,aAGjHpB,EAAMK,WAGf,CAEAyB,EAAea,aAAe,CAC5BlC,QAAS,gBACTe,MAAO,E,yIC3BYoB,EAAW,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,OAAAK,EAAAA,EAAAA,GAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,UAAA,CAwB7B,OAxB6BC,EAAAA,EAAAA,GAAAR,EAAA,EAAAS,IAAA,qBAAA7B,MAC9B,SAAmB8B,GAAY,IAADC,EAAA,KACxBC,KAAKxD,MAAMmC,OAASmB,EAAUnB,MAChCsB,YAAW,WAAQF,EAAKvD,MAAM0D,SAAWH,EAAKvD,MAAM0D,SAAQ,EAAO,GAAG,IAC1E,GAAC,CAAAL,IAAA,SAAA7B,MAED,WAAU,IAADmC,EAAA,KACP,OACErD,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CACVhB,SAAU,QACVQ,KAAM,OACND,IAAK,QACLN,QAASoD,KAAKxD,MAAMmC,KAAO,QAAU,OACrCyB,SAAU,QACVC,SAAU,MACVjC,OAAQ,QACRvB,UACAC,EAAAA,EAAAA,KAACwD,EAAAA,EAAK,CACJC,SAAUP,KAAKxD,MAAM+D,UAAY,QACjCL,QAAS,WAAQC,EAAK3D,MAAM0D,SAAWC,EAAK3D,MAAM0D,SAAQ,EAAO,EAAErD,SAClEmD,KAAKxD,MAAMgE,WAIpB,KAACpB,CAAA,CAxB6B,CAASqB,EAAAA,U,uICI1B,SAASC,EAAoBlE,GACxC,OACIC,EAAAA,EAAAA,MAACkE,EAAAA,EAAM,CACHC,WAAW,EACXP,SAAS,KACT1B,KAAMnC,EAAMmC,KAAK9B,SAAA,EACjBJ,EAAAA,EAAAA,MAACoE,EAAAA,EAAa,CAAAhE,SAAA,EACVJ,EAAAA,EAAAA,MAAA,OAAKkB,MAAO,CAAED,MAAO,MAAOd,QAAS,OAAQU,WAAY,UAAWT,SAAA,EAChEC,EAAAA,EAAAA,KAACgE,EAAAA,EAAW,CAAClD,SAAS,QAAQF,MAAM,UAAU,gBAElDZ,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAAED,MAAO,MAAOqD,WAAY,WAAaC,wBAAyB,CAAEC,OAAQzE,EAAMgE,eAGlG/D,EAAAA,EAAAA,MAACyE,EAAAA,EAAa,CAAArE,SAAA,EACVC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACC,QAAS5E,EAAM6E,KAAKxE,UACxBC,EAAAA,EAAAA,KAAA,QAAMa,MAAO,CAAED,MAAO,OAAQb,SAAEL,EAAM8E,YAE1CxE,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACxD,MAAO,CAAED,MAAO,SAAW0D,QAAS5E,EAAM+E,SAAS1E,SACtDL,EAAMgF,kBAK3B,CAEAd,EAAoBvB,aAAe,CAC/BmC,OAAQ,KACRE,WAAY,S,yDCnCT,IASMC,EAAc,CACzBC,cAAe,EACfC,oBAAqB,EACrBC,aAAc,EACdC,aAAc,EACdC,oBAAqB,GACrBC,MAAO,E,qUCZM,SAASC,EAAYxF,GAChC,OACIC,EAAAA,EAAAA,MAAA,OAAKiC,UAAU,eAAc7B,SAAA,CAErBL,EAAMyF,gBACNnF,EAAAA,EAAAA,KAACoF,EAAAA,EAAS,CAACvE,MAAO,CAACwE,UAAW,SAAUvE,SAAU,SAAUqB,UAAW,QAASmC,QAAS5E,EAAM0D,WAGnGpD,EAAAA,EAAAA,KAAA,OAAK4B,UAAU,qBAAoB7B,SAAEL,EAAM4F,UAGvD,CCTuC,IAGlBC,EAAgB,SAAAhD,IAAAC,EAAAA,EAAAA,GAAA+C,EAAAhD,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA6C,GAAA,SAAAA,IAAA,OAAA5C,EAAAA,EAAAA,GAAA,KAAA4C,GAAA9C,EAAAG,MAAA,KAAAC,UAAA,CAiClC,OAjCkCC,EAAAA,EAAAA,GAAAyC,EAAA,EAAAxC,IAAA,SAAA7B,MACnC,WACE,OACIvB,EAAAA,EAAAA,MAACkE,EAAAA,EAAM,CACLC,UAAWZ,KAAKxD,MAAMoE,UACtB0B,WAAYtC,KAAKxD,MAAM8F,WACvBjC,SAAUL,KAAKxD,MAAM6D,SACrB1B,KAAMqB,KAAKxD,MAAMmC,KACjBuB,QAASF,KAAKxD,MAAM+F,aACpB,kBAAgB,0BAAyB1F,SAAA,CAEvCmD,KAAKxD,MAAMgG,aACX1F,EAAAA,EAAAA,KAACkF,EAAW,CAACI,MAAOpC,KAAKxD,MAAM4F,SAEjCtF,EAAAA,EAAAA,KAAC+D,EAAAA,EAAa,CAAAhE,SACXmD,KAAKxD,MAAMiG,eAAiBzC,KAAKxD,MAAMiG,mBAE1C3F,EAAAA,EAAAA,KAAA,OAAAD,SACGmD,KAAKxD,MAAMkG,oBAAsB1C,KAAKxD,MAAMkG,wBAE/CjG,EAAAA,EAAAA,MAACyE,EAAAA,EAAa,CAAArE,SAAA,EACZC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACwB,WAAS,EAACC,SAAU5C,KAAKxD,MAAMqG,iBAAkBzB,QAAUpB,KAAKxD,MAAMsG,SAAWpF,MAAM,UAASb,SACrGmD,KAAKxD,MAAMuG,eAGZ/C,KAAKxD,MAAMwG,mBACXlG,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAACC,QAASpB,KAAKxD,MAAM+F,aAAc7E,MAAM,UAAUiF,WAAS,EAAA9F,SAChEmD,KAAKxD,MAAMyG,wBAM1B,KAACZ,CAAA,CAjCkC,CAAS5B,EAAAA,WAoC9C4B,EAAiBlD,aAAe,CAC9BmD,YAAY,EACZ1B,WAAW,EACXwB,MAAO,GACPzD,MAAM,EACNoE,aAAc,KACdF,kBAAkB,EAClBI,iBAAkB,SAClB5C,SAAU,KACV2C,kBAAkB,EAClBR,YAAY,G,0BCjDOU,EAAW,SAAA7D,IAAAC,EAAAA,EAAAA,GAAA4D,EAAA7D,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA0D,GAC5B,SAAAA,IAAe,IAADnD,EAQqC,OARrCN,EAAAA,EAAAA,GAAA,KAAAyD,IACVnD,EAAAR,EAAA4D,KAAA,OACKC,MAAQ,CACTC,OAAQ,KACRC,OAAQ,MAGZvD,EAAKwD,YAAcxD,EAAKwD,YAAYC,MAAIC,EAAAA,EAAAA,GAAA1D,IACxCA,EAAK2D,YAAc3D,EAAK2D,YAAYF,MAAIC,EAAAA,EAAAA,GAAA1D,IAAOA,CACnD,CAoDC,OApDAH,EAAAA,EAAAA,GAAAsD,EAAA,EAAArD,IAAA,cAAA7B,MAED,SAAY2F,GACRA,EAAMC,iBAED5D,KAAKxD,MAAMqH,SAGhB7D,KAAK8D,SAAS,CACVT,OAAQM,EAAMI,QAAU,EACxBT,OAAQK,EAAMK,QAAU,GAEhC,GAAC,CAAAnE,IAAA,cAAA7B,MAED,WACIgC,KAAK8D,SAAS,CACVT,OAAQ,KACRC,OAAQ,MAEhB,GAAC,CAAAzD,IAAA,SAAA7B,MAED,WAAU,IAADmC,EAAA,KACL,OACI1D,EAAAA,EAAAA,MAAA,OAAKwH,cAAejE,KAAKuD,YAAa5F,MAAO,CAAEuG,OAAQ,gBAAiBrH,SAAA,CACnEmD,KAAKxD,MAAMK,UACZC,EAAAA,EAAAA,KAACqH,EAAAA,EAAI,CACDC,aAAW,EACXzF,KAA4B,OAAtBqB,KAAKoD,MAAME,QAAmBtD,KAAKxD,MAAM6H,UAC/CnE,QAASF,KAAK0D,YACdY,gBAAgB,iBAChBC,eAC0B,OAAtBvE,KAAKoD,MAAME,QAAyC,OAAtBtD,KAAKoD,MAAMC,OACnC,CAAEnG,IAAK8C,KAAKoD,MAAME,OAAQnG,KAAM6C,KAAKoD,MAAMC,aAC3CmB,EACT3H,SAEGmD,KAAKxD,MAAM6H,WAAarE,KAAKxD,MAAM6H,UAAUI,KAAI,SAACC,EAAMC,GACpD,OACI7H,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAELxD,QAAS,WACLsD,EAAKtD,QAAQjB,EAAK3D,MAAMqI,OAAQF,GAChCxE,EAAKuD,aACT,EAAE7G,SACD6H,EAAKI,MALDH,EAQjB,QAKpB,KAACzB,CAAA,CA9D2B,CAASzC,EAAAA,WCDpBsE,EAAS,SAAA1F,IAAAC,EAAAA,EAAAA,GAAAyF,EAAA1F,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAuF,GAE5B,SAAAA,IAAe,IAADhF,EAEmC,OAFnCN,EAAAA,EAAAA,GAAA,KAAAsF,IACZhF,EAAAR,EAAA4D,KAAA,OACKI,YAAcxD,EAAKwD,YAAYC,MAAIC,EAAAA,EAAAA,GAAA1D,IAAOA,CACjD,CA2FC,OA3FAH,EAAAA,EAAAA,GAAAmF,EAAA,EAAAlF,IAAA,cAAA7B,MAED,SAAYgH,GACPhF,KAAKxD,MAAMyI,yBAGdjF,KAAKxD,MAAM0I,wBAA0BlF,KAAKxD,MAAM0I,uBAAuBF,GACvEhF,KAAKxD,MAAM2I,eAAiBnF,KAAKxD,MAAM2I,cAAcH,GACvD,GAAC,CAAAnF,IAAA,SAAA7B,MAED,WAAU,IAADmC,EAAA,KACDiF,EAAOpF,KAAKxD,MAAM6I,WAAa,OAC/BC,EAAQtF,KAAKxD,MAAM+I,YAAc,OAEvC,OACE9I,EAAAA,EAAAA,MAAA,OAAKiC,UAAU,qBAAqBf,MAAO,CAAC6H,cAAexF,KAAKxD,MAAMgJ,eAAe3I,SAAA,CAE/EmD,KAAKxD,MAAMiJ,OAASzF,KAAKxD,MAAMiJ,MAAMhB,KAAI,SAACO,EAAMU,GAC5C,IAAIC,EAAKX,EAAKW,IAEd,OACI7I,EAAAA,EAAAA,KAACoG,EAAW,CAAC2B,OAAQG,EAAMnB,QAASmB,EAAKY,eAA4BvB,UAAWlE,EAAK3D,MAAMqJ,iBAAiBhJ,UAC1GJ,EAAAA,EAAAA,MAAA,OACEiC,UAAU,gBACVf,MAAO,CACHmI,OAAQ3F,EAAK3D,MAAMuJ,WACnBC,aAAc7F,EAAK3D,MAAMyJ,gBAAkB,OAAS9F,EAAK3D,MAAMuJ,WAC/DG,UAAW/F,EAAK3D,MAAM2J,YACxBtJ,SAAA,CAEFsD,EAAK3D,MAAM4J,mBAAqBjG,EAAK3D,MAAM4J,kBAAkBpB,GAG7D7E,EAAK3D,MAAM6J,YACXvJ,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CACJ2I,OAAQtB,EAAKuB,KAAOpG,EAAK3D,MAAMgK,eAAkB,mBAAqB,OACtEnI,gBAAiB2G,EAAKtH,MACtB0H,MAAOA,EACPE,OAAQA,EACRmB,aAActG,EAAK3D,MAAMkK,qBAGjC5J,EAAAA,EAAAA,KAAA,OAAK6J,IAAKhB,EACNiB,IAAK5B,EAAK5C,MACVzE,MAAO,CACH2I,OAAQtB,EAAKuB,KAAOpG,EAAK3D,MAAMgK,eAAkB,mBAAqB,OACtEnI,gBAAiB2G,EAAKtH,MACtB0H,MAAOA,EACPE,OAAQA,EACRmB,aAActG,EAAK3D,MAAMkK,kBAE7BtF,QAAS,WAAOjB,EAAKoD,YAAYyB,EAAK,IAG1C7E,EAAK3D,MAAMqK,aACX/J,EAAAA,EAAAA,KAAA,OAAK4B,UAAU,QACTf,MAAO,CACLyH,MAAOA,EACPxH,SAAUuC,EAAK3D,MAAMsK,cACrB1J,OAAQ+C,EAAK3D,MAAMyJ,gBAAkB,QAAS,IAC9CvI,MAAOyC,EAAK3D,MAAMuK,YAClB1I,gBAAiB8B,EAAK3D,MAAMyJ,gBAAkB,cAAgB,sBAC9DpJ,SACLmI,EAAK5C,YA1CkDsD,EAgDtE,IAGA1F,KAAKxD,MAAMwK,gBACXlK,EAAAA,EAAAA,KAAA,OAAK4B,UAAU,gBAAgBf,MAAO,CAClByH,MAAOA,EACPE,OAAQA,EACRmB,aAAczG,KAAKxD,MAAMkK,kBAC3B7J,UAChBC,EAAAA,EAAAA,KAAA,OAAK6J,IAAK3G,KAAKxD,MAAMyK,gBACfL,IAAI,MACJjJ,MAAO,CACHyH,MAAOA,EACPE,OAAOA,EACPjH,gBAAiB,SACjBoI,aAAczG,KAAKxD,MAAMkK,kBAE7BtF,QAASpB,KAAKxD,MAAM0K,oBAKtC,KAACnC,CAAA,CAhG2B,CAAStE,EAAAA,WAmGvCsE,EAAU5F,aAAe,CACrB4G,WAAY,MACZE,iBAAiB,EACjBe,eAAe,EACfN,iBAAkB,IAClBI,cAAe,MACfX,WAAY,OACZU,YAAY,EACZrB,cAAe,MACfuB,YAAa,S,eC5GX9I,GAAYC,E,SAAAA,IAAW,SAACiJ,GAAK,MAAM,CACvCC,KAAM,CACJ,QAAS,CACPtB,OAAQqB,EAAME,QAAQ,KAG1BC,MAAO,CACL1K,QAAS,QAEZ,IAGc,SAAS2K,EAAa/K,GACnC,IAAM+B,EAAUN,IAChBuJ,GAAwCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAcpC,OACEjL,EAAAA,EAAAA,MAAA,OAAKiC,UAAWH,EAAQ6I,KAAKvK,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEgL,OAAQtL,EAAMsL,OACdvB,GAAG,aACHwB,KAAK,OACLC,SAVW,SAACC,GAChBJ,EAAgBI,EAAEpD,OAAOqD,MAAM,GACjC,KAUIpL,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CAAClE,QAAQ,YAAYS,MAAM,UAAUD,UAAU,OAAO2D,QApBjD,SAAC6G,GACZL,IACDpL,EAAM2L,aAAaP,GAEnBQ,SAASC,eAAe,cAAcrK,MAAQ,GAElD,EAckFnB,SAAC,aAKrF,C,qCCpCqByL,EAAuB,SAAAjJ,IAAAC,EAAAA,EAAAA,GAAAgJ,EAAAjJ,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA8I,GACxC,SAAAA,EAAY9L,GAAQ,IAADuD,EAQgC,OARhCN,EAAAA,EAAAA,GAAA,KAAA6I,IACfvI,EAAAR,EAAA4D,KAAA,KAAM3G,IAED4G,MAAQ,CACTmF,kBAAkB,GAGtBxI,EAAKyI,SAAWzI,EAAKyI,SAAShF,MAAIC,EAAAA,EAAAA,GAAA1D,IAClCA,EAAK0I,YAAc1I,EAAK0I,YAAYjF,MAAIC,EAAAA,EAAAA,GAAA1D,IAAOA,CACnD,CAkEC,OAlEAH,EAAAA,EAAAA,GAAA0I,EAAA,EAAAzI,IAAA,iBAAA7B,MAED,SAAegH,GAAO,IAAD7E,EAAA,KACjB,OAAKH,KAAKoD,MAAMsF,eAAiB1I,KAAKoD,MAAMuF,WACjC,MAGP7L,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAAEhB,SAAU,WAAYO,IAAK,MAAOG,MAAO,OAAQR,UAC3DC,EAAAA,EAAAA,KAAC8L,EAAAA,GAAO,CAACxG,MAAM,SAAQvF,UACnBC,EAAAA,EAAAA,KAAC+L,EAAAA,EAAU,CACPlL,MAAO,CAAED,MAAO,SAAUE,SAAU,IACpCwD,QAAS,kBAAMjB,EAAKqI,SAASxD,EAAK,OAItD,GAAC,CAAAnF,IAAA,cAAA7B,MAED,WACIgC,KAAK8D,SAAS,CAAEyE,kBAAkB,IAClCvI,KAAKxD,MAAMsM,UAAUC,cAAc/I,KAAKgJ,cAC5C,GAAC,CAAAnJ,IAAA,WAAA7B,MAED,SAASgH,GACLhF,KAAK8D,SAAS,CAAEyE,kBAAkB,IAClCvI,KAAKgJ,cAAgBhE,CACzB,GAAC,CAAAnF,IAAA,SAAA7B,MAED,WAAU,IAADiL,EAAA,KACL,OAAKjJ,KAAKxD,MAAMsM,WAIZrM,EAAAA,EAAAA,MAAC+B,EAAAA,SAAQ,CAAA3B,SAAA,EACLC,EAAAA,EAAAA,KAACuF,EAAgB,CACb1D,KAAMqB,KAAKoD,MAAMzE,KACjBmE,SAAU9C,KAAKxD,MAAMsM,UAAUzH,KAC/BkB,aAAcvC,KAAKxD,MAAMsM,UAAUvH,SACnCkB,cAAe,WACX,OACI3F,EAAAA,EAAAA,KAACiI,EAAS,CACNU,MAAOwD,EAAK7F,MAAM8F,WAClB1C,eAAgByC,EAAK7F,MAAMoD,eAC3BnB,UAAU,QACVE,WAAW,QACXL,uBAAwB+D,EAAKzM,MAAMsM,UAAUK,eAC7C/C,kBAAmB,SAAApB,GAAI,OAAIiE,EAAKG,eAAepE,EAAK,GAEhE,EACAtC,mBAAoB,WAChB,OACMuG,EAAK7F,MAAMiG,iBAAmBJ,EAAK7F,MAAMkG,iBAC3CxM,EAAAA,EAAAA,KAACyK,EAAY,CAACY,aAAcc,EAAKzM,MAAMsM,UAAUS,kBAAmBzB,OAAO,WAEnF,EACAjF,iBAAkB7C,KAAKoD,MAAMP,iBAC7BT,MAAM,kBACNW,aAAa,KACbE,iBAAiB,YACrBnG,EAAAA,EAAAA,KAAC4D,EAAAA,EAAmB,CAChB/B,KAAM6K,QAAQxJ,KAAKoD,MAAMmF,kBACzB/H,QAAQ,iFACRc,OAAO,SACPD,KAAMrB,KAAKyI,YACXlH,SAAU,kBAAM0H,EAAKnF,SAAS,CAAEyE,kBAAkB,GAAQ,OAlC3D,IAqCf,KAACD,CAAA,CA5EuC,CAAS7H,EAAAA,W,UCNhCgJ,EAAO,SAAApK,IAAAC,EAAAA,EAAAA,GAAAmK,EAAApK,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAiK,GAAA,SAAAA,IAAA,OAAAhK,EAAAA,EAAAA,GAAA,KAAAgK,GAAAlK,EAAAG,MAAA,KAAAC,UAAA,CAiBvB,OAjBuBC,EAAAA,EAAAA,GAAA6J,EAAA,EAAA5J,IAAA,SAAA7B,MACxB,WACI,OACIlB,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CACRhB,SAAU,QACVC,QAASoD,KAAKxD,MAAMmC,KAAO,QAAU,OACrCzB,IAAK,IACLC,KAAM,IACNE,MAAO,IACPD,OAAQ,IACRiB,gBAAiB,QACjBD,OAAQ,OACR8F,OAAQ,WACVrH,SACGmD,KAAKxD,MAAMK,UAGxB,KAAC4M,CAAA,CAjBuB,CAAShJ,EAAAA,W,iCCiBhBiJ,EAAmB,SAAArK,IAAAC,EAAAA,EAAAA,GAAAoK,EAAArK,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAkK,GACpC,SAAAA,EAAYlN,GAAQ,IAADuD,EAgBb,OAhBaN,EAAAA,EAAAA,GAAA,KAAAiK,IACf3J,EAAAR,EAAA4D,KAAA,KAAM3G,IAED4G,MAAQ,CACTuG,UAAW,CACPC,UAAU,EACVC,aAAc,GACdC,oBAAoB,EACpBC,eAAe,EACfC,aAAa,EACbzB,kBAAkB,EAClB0B,WAAY,IAEhBC,WAAY,CACRC,YAAa,KAEnBpK,CACN,CAwRC,OAxRAH,EAAAA,EAAAA,GAAA8J,EAAA,EAAA7J,IAAA,iBAAA7B,MAED,SAAeoM,EAAYC,EAAU3E,GAAQ,IAADvF,EAAA,KACxC,OACIrD,EAAAA,EAAAA,KAAA,OAAiBa,MAAO,CAAEmI,OAAQ,QAASjJ,UACvCC,EAAAA,EAAAA,KAAA,SAAAD,UACIJ,EAAAA,EAAAA,MAAA,SAAAI,SAAA,EACIJ,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAAEyH,MAAO,QAASE,OAAQ,OAAQpB,OAAQ,WAClDoG,QAAQ,OACR3D,IAAK3G,KAAKxD,MAAMsM,UAAUyB,YAAYH,EAAYC,EAAUA,EAASG,UACrEpJ,QAAS,kBAAMjB,EAAK3D,MAAMsM,UAAU2B,aAAaL,EAAYC,EAAS,OAE9EvN,EAAAA,EAAAA,KAAA,MAAIa,MAAO,CAAEhB,SAAU,YAAaE,SAE5BmD,KAAKoD,MAAMuG,UAAUe,oBACrB5N,EAAAA,EAAAA,KAAC+L,EAAAA,EAAU,CAAClL,MAAO,CAAEhB,SAAU,WAAYO,IAAK,OAAQG,MAAO,QAC3D+D,QAAS,kBAAMjB,EAAK3D,MAAMsM,UAAU6B,iBAAiBP,EAAYC,EAAS,UAI1F5N,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,SACI8F,UAAW5C,KAAKoD,MAAMuG,UAAUe,kBAChC/M,MAAO,CAAEyH,MAAO,QAChBwF,MAAM,OACNC,KAAK,OACL7M,MAAOqM,EAASQ,MAAQ,GACxB7C,SAAU,SAAAC,GAAC,OAAI9H,EAAK3D,MAAMsM,UAAUgC,qBAAqB7C,EAAGoC,EAAS,UAGjF5N,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,YACI8F,UAAW5C,KAAKoD,MAAMuG,UAAUe,kBAChC/M,MAAO,CACHyH,MAAO,OACPE,OAAQ,OACRyF,UAAW,UAEf/M,MAAOqM,EAASW,aAAe,GAC/BH,KAAK,cACL7C,SAAU,SAAAC,GAAC,OAAI9H,EAAK3D,MAAMsM,UAAUmC,qBAAqBhD,EAAGoC,EAAS,eA1CnF3E,EAiDlB,GAAC,CAAA7F,IAAA,mBAAA7B,MAED,SAAiBoM,GAAa,IAADc,EAAAC,EAAAlC,EAAA,KACnBmC,EAAS,gBAAAvN,OAAmBwN,yBAAgC,2CAAAxN,OAA0CuM,EAAWkB,IAAG,ySAW1H,OACI7O,EAAAA,EAAAA,MAAA,OAAKkB,MAAO,CAAEyH,MAAO,OAAQmG,UAAW,QAAS1O,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,SAAAD,UACIJ,EAAAA,EAAAA,MAAA,SAAAI,SAAA,EACIJ,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJJ,EAAAA,EAAAA,MAAA,MAAIkB,MAAO,CAAEhB,SAAU,YAAaE,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SACI8F,UAAW5C,KAAKoD,MAAMuG,UAAUe,kBAChC/M,MAAO,CAAEyH,MAAO,QAChBwF,MAAM,OACNC,KAAK,OACL7M,MAAOoM,EAAWS,MAAQ,GAC1B7C,SAAU,SAAAC,GAAC,OAAIgB,EAAKzM,MAAMsM,UAAU0C,uBAAuBvD,EAAGmC,EAAW,IAGzEpK,KAAKoD,MAAMuG,UAAUe,oBACrB5N,EAAAA,EAAAA,KAAC+L,EAAAA,EAAU,CAAClL,MAAO,CAAEhB,SAAU,WAAYO,IAAK,OAAQG,MAAO,QAAU+D,QAAS,kBAAM6H,EAAKzM,MAAMsM,UAAU2C,mBAAmBrB,EAAW,WAIvJ3N,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,YACI8F,UAAW5C,KAAKoD,MAAMuG,UAAUe,kBAChC/M,MAAO,CACHyH,MAAO,OACPE,OAAQ,OACRyF,UAAW,UAEf/M,MAAOoM,EAAWY,aAAe,GACjCH,KAAK,cACL7C,SAAU,SAAAC,GAAC,OAAIgB,EAAKzM,MAAMsM,UAAU4C,uBAAuBzD,EAAGmC,EAAW,OAGjFtN,EAAAA,EAAAA,KAAA,aAEJL,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,QACJC,EAAAA,EAAAA,KAAA,MAAIa,MAAO,CAAEC,SAAU,QAASF,MAAO,QAASb,SAExCuN,EAAWkB,UAIvB7O,EAAAA,EAAAA,MAAA,MAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJC,EAAAA,EAAAA,KAAA,MAAAD,UACIJ,EAAAA,EAAAA,MAACkP,EAAAA,EAAS,CACNC,SAAoB,OAAVxB,QAAU,IAAVA,GAAmB,QAATc,EAAVd,EAAYyB,eAAO,IAAAX,OAAT,EAAVA,EAAqBY,iBAC/B9D,SAAUhI,KAAKxD,MAAMsM,UAAUiD,gBAAgBlP,SAAA,EAC/CC,EAAAA,EAAAA,KAACkP,EAAAA,EAAgB,CAACC,YAAYnP,EAAAA,EAAAA,KAACoP,EAAAA,EAAc,OAE7CpP,EAAAA,EAAAA,KAACqP,EAAAA,EAAgB,CAACxO,MAAO,CAAEU,gBAAiB,SAAUxB,UAClDC,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAAEyO,QAAS,QAASvP,SAExBuO,YAMpBtO,EAAAA,EAAAA,KAAA,aAEJA,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,MAAAD,UACIC,EAAAA,EAAAA,KAAA,MAAIa,MAAO,CAAEhB,SAAU,YAAaE,UAChCC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACHyB,UAAWwH,EAAWiC,UAAUC,OAChCC,WAAWzP,EAAAA,EAAAA,KAAC0P,EAAAA,EAAY,CAACtN,KAAK,UAC9BjC,QAAQ,YACRS,MAAM,UACNwB,KAAK,QACLvB,MAAO,CAAEyH,MAAO,SAChBhE,QAAS,kBAAM6H,EAAKzM,MAAMsM,UAAU2D,eAAerC,EAAW,EAACvN,SAAE,sBAOrFJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAAD,UAESmD,KAAKoD,MAAMuG,UAAU+C,oBACtBjQ,EAAAA,EAAAA,MAACkP,EAAAA,EAAS,CACNC,SAAoB,OAAVxB,QAAU,IAAVA,GAAmB,QAATe,EAAVf,EAAYyB,eAAO,IAAAV,OAAT,EAAVA,EAAqBxM,KAC/BqJ,SAAU,WAAQiB,EAAKzM,MAAMsM,UAAU6D,iBAAiBvC,EAAY,EAAEvN,SAAA,EACtEC,EAAAA,EAAAA,KAACkP,EAAAA,EAAgB,CAACC,YAAYnP,EAAAA,EAAAA,KAACoP,EAAAA,EAAc,IAAIrP,UAEzCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAGZC,EAAAA,EAAAA,KAACqP,EAAAA,EAAgB,CAACxO,MAAO,CAAEU,gBAAiB,QAASzB,QAAS,OAAQ4I,cAAe,UAAW3I,SAExFuN,EAAWiC,UAAU5H,KAAI,SAAC4F,EAAU3E,GAChC,OAAOuD,EAAK2D,eAAexC,EAAYC,EAAU3E,EACrD,OAGR5I,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACHyB,UAAW5C,KAAKoD,MAAMuG,UAAUe,mBAAqB1K,KAAKoD,MAAMuG,UAAUL,eAC1ErM,QAAQ,YACRS,MAAM,UACNwB,KAAK,QACLkC,QAAS,kBAAM6H,EAAKzM,MAAMsM,UAAU+D,cAAczC,EAAW,EAC7DmC,WAAWzP,EAAAA,EAAAA,KAACgQ,EAAAA,EAAS,CAAClP,SAAS,QAAQD,MAAO,CAAED,MAAO,WAAcb,SAAE,yBAO3FC,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAACY,MAAO,CAAEf,QAASoD,KAAKoD,MAAMuG,UAAU+C,kBAAoB,QAAU,OAAQ5G,OAAQ,eAIvH,GAAC,CAAAjG,IAAA,oBAAA7B,MAED,WAAqB,IAAD+O,EAAA,KAChB,OACIjQ,EAAAA,EAAAA,KAAC0B,EAAAA,SAAQ,CAAA3B,SAGDmD,KAAKoD,MAAM8G,WAAWC,YAAYmC,OAC9BtM,KAAKoD,MAAM8G,WAAWC,YAAY1F,KAAI,SAACuI,EAAKtH,GACxC,OAAOqH,EAAKE,iBAAiBD,EACjC,KAEAlQ,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAAEmI,OAAQ,QAASjJ,SAAC,oCAIpD,GAAC,CAAAgD,IAAA,SAAA7B,MACD,WACI,OAAKgC,KAAKxD,MAAMsM,WAAc9I,KAAKoD,MAAM8G,YAAelK,KAAKoD,MAAMuG,WAI/DlN,EAAAA,EAAAA,MAAC+B,EAAAA,SAAQ,CAAA3B,SAAA,EACLC,EAAAA,EAAAA,KAAA,OAAK4B,UAAU,gCAA+B7B,UAC1CJ,EAAAA,EAAAA,MAAA,OAAKiC,UAAU,oBAAoBf,MAAO,CAAEyH,MAAO,QAASvI,SAAA,CAEpDmD,KAAKoD,MAAMuG,UAAUuD,qBACrBpQ,EAAAA,EAAAA,KAACwD,EAAAA,EAAK,CAACC,SAAS,UAAS1D,SAAC,+CAI9BC,EAAAA,EAAAA,KAACwB,EAAAA,EAAc,CAACrB,QAAQ,gBAAgB2B,KAAMoB,KAAKoD,MAAMuG,UAAUG,sBAEnEhN,EAAAA,EAAAA,KAACsC,EAAAA,EAAW,CACRoB,QAASR,KAAKoD,MAAMuG,UAAUE,aAC9BtJ,SAAUP,KAAKoD,MAAMuG,UAAUwD,cAC/BxO,KAA4C,KAAtCqB,KAAKoD,MAAMuG,UAAUE,aAC3B3J,QAASF,KAAKxD,MAAMsM,UAAUsE,sBAClCtQ,EAAAA,EAAAA,KAAC4D,EAAAA,EAAmB,CAChB/B,KAAMqB,KAAKoD,MAAMuG,UAAUpB,iBAC3B/H,QAAQ,+EACRa,KAAMrB,KAAKxD,MAAMsM,UAAUuE,eAC3B9L,SAAUvB,KAAKxD,MAAMsM,UAAUwE,kBAEnCxQ,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6BAEAmD,KAAKuN,qBAET9Q,EAAAA,EAAAA,MAAA,OAAKkB,MAAO,CAAEf,QAAS,OAAQ2O,UAAW,QAAS1O,SAAA,EAC/CC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACHyB,UAAW5C,KAAKoD,MAAMuG,UAAUe,mBAAqB1K,KAAKoD,MAAMuG,UAAUL,eAC1ErM,QAAQ,YACRS,MAAM,UACNwB,KAAK,QACLkC,QAASpB,KAAKxD,MAAMsM,UAAU0E,gBAC9BjB,WAAWzP,EAAAA,EAAAA,KAACgQ,EAAAA,EAAS,CAAClP,SAAS,QAAQD,MAAO,CAAED,MAAO,WAAcb,SAAE,oBAIvEC,EAAAA,EAAAA,KAACqE,EAAAA,EAAM,CACHyB,UAAW5C,KAAKoD,MAAMuG,UAAUC,SAChC3M,QAAQ,YACRS,MAAM,UACNwB,KAAK,QACLvB,MAAO,CAAEmI,OAAQ,QACjB1E,QAASpB,KAAKxD,MAAMsM,UAAU2E,cAAc5Q,SAAE,qBAK1DC,EAAAA,EAAAA,KAACwL,EAAuB,CAACoF,IAAK1N,KAAKxD,MAAMsM,UAAU6E,cAAcC,gBAC7D9E,UAAW9I,KAAKxD,MAAMsM,UAAU6E,sBAI5ClR,EAAAA,EAAAA,MAACgN,EAAO,CAAC9K,KAAMqB,KAAKoD,MAAMuG,UAAUK,YAAYnN,SAAA,EAC5CC,EAAAA,EAAAA,KAAA,OAAKa,MAAO,CAAEyH,MAAO,OAAQE,OAAQ,QAASzI,SAEtCmD,KAAKoD,MAAMuG,UAAUkE,uBACrB/Q,EAAAA,EAAAA,KAAA,UAAQ6J,IAAG,GAAA9I,OAAKwN,yBAAgC,2CAAAxN,OAA0CmC,KAAKoD,MAAMuG,UAAUkE,sBAC3GzI,MAAM,OACNE,OAAO,OACP3H,MAAO,CAAE2I,OAAQ,QACjBwH,YAAY,IACZC,iBAAiB,EACjBC,mBAAmB,OACnBC,sBAAsB,YAGlCnR,EAAAA,EAAAA,KAACoF,EAAAA,EAAS,CAACvE,MAAO,CAAEhB,SAAU,WAAYU,MAAO,OAAQH,IAAK,QAAUkE,QAASpB,KAAKxD,MAAMsM,UAAUoF,qBAE1GpR,EAAAA,EAAAA,KAACqR,EAAAA,OAAM,CAACC,MAAM,EAAM5N,QAAQ,qEAxEzB,IA2Ef,KAACkJ,CAAA,CA1SmC,CAASjJ,EAAAA,W,UCpB5B4N,EAA4B,WAC7C,SAAAA,EAAYC,IAAO7O,EAAAA,EAAAA,GAAA,KAAA4O,GACfrO,KAAKsO,MAAQA,EAEbtO,KAAKsO,MAAMzL,kBAAmB,EAC9B7C,KAAKsO,MAAMjF,gBAAiB,EAE5BrJ,KAAKqB,KAAOrB,KAAKqB,KAAKmC,KAAKxD,MAC3BA,KAAKuB,SAAWvB,KAAKuB,SAASiC,KAAKxD,MACnCA,KAAKmJ,eAAiBnJ,KAAKmJ,eAAe3F,KAAKxD,MAC/CA,KAAKuJ,kBAAoBvJ,KAAKuJ,kBAAkB/F,KAAKxD,MACrDA,KAAK+I,cAAgB/I,KAAK+I,cAAcvF,KAAKxD,MAC7CA,KAAK4N,gBAAkB5N,KAAK4N,gBAAgBpK,KAAKxD,KACrD,CAyGC,OAzGAJ,EAAAA,EAAAA,GAAAyO,EAAA,EAAAxO,IAAA,OAAA7B,MAED,WAAmB,IAAdY,IAAIe,UAAA2M,OAAA,QAAA9H,IAAA7E,UAAA,KAAAA,UAAA,GACLK,KAAKsO,MAAM3P,KAAOC,EAElBoB,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,OAAA7B,MAED,WACIgC,KAAKpB,MAAK,GAGNoB,KAAKuO,0BAA4BvO,KAAKuO,yBAAyBvO,KAAKwO,cAGxExO,KAAKwO,aAAe,KACpBxO,KAAKsO,MAAM9H,eAAiB,IAChC,GAAC,CAAA3G,IAAA,WAAA7B,MAED,WACIgC,KAAKpB,MAAK,EACd,GAAC,CAAAiB,IAAA,iBAAA7B,MAED,SAAegH,GACRA,EAAKyJ,YAGLzO,KAAKwO,eAAiBxJ,GACrBhF,KAAKwO,aAAe,KACpBxO,KAAKsO,MAAM9H,eAAiB,OAG5BxG,KAAKwO,aAAexJ,EACpBhF,KAAKsO,MAAM9H,eAAiBxB,EAAKuB,IAGrCvG,KAAK4N,kBACT,GAAC,CAAA/N,IAAA,oBAAA7B,MAAA,eAAA0Q,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAC,EAAwBC,GAAI,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACrBnP,KAAKoP,eAAe,CAADH,EAAAE,KAAA,SAeK,OAZvBnP,KAAKsO,MAAMzL,kBAAmB,EAC9B7C,KAAKsO,MAAMjF,gBAAiB,EAC5BrJ,KAAKsO,MAAM5F,eAAgB,EAG3B1I,KAAKsO,MAAMpF,WAAWmG,KAAK,CACvB9I,GAAIwI,EAAKlE,KACTlF,IAAI,GAAD9H,OAAKwN,0CAAqC,6BAC7CjJ,MAAO2M,EAAKlE,KACZ4D,WAAW,IAGfzO,KAAK4N,kBAAkBqB,EAAAE,KAAA,EAEjBnP,KAAKoP,eAAeL,GAAM,KAAD,EAE/B/O,KAAKsO,MAAMzL,kBAAmB,EAC9B7C,KAAKsO,MAAMjF,gBAAiB,EAC5BrJ,KAAKsO,MAAM5F,eAAgB,EAE3B1I,KAAK4N,kBAEL5N,KAAKsO,MAAMgB,WAAY,EAAM,yBAAAL,EAAAM,OAAA,GAAAT,EAAA,UAEpC,gBAAAU,GAAA,OAAAd,EAAAhP,MAAA,KAAAC,UAAA,EA9BA,IA8BA,CAAAE,IAAA,gBAAA7B,MAAA,eAAAyR,GAAAd,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAa,EAAoB1K,GAAI,IAAAW,EAAA,OAAAiJ,EAAAA,EAAAA,KAAAI,MAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,WACjBnK,EAAK,CAAD2K,EAAAR,KAAA,aACAnP,KAAK4P,eAAe,CAADD,EAAAR,KAAA,SAeK,OAbvBnP,KAAKsO,MAAMzL,kBAAmB,EAC9B7C,KAAKsO,MAAMjF,gBAAiB,EAC5BrJ,KAAKsO,MAAM5F,eAAgB,EAE3B1I,KAAKwO,aAAe,KACpBxO,KAAKsO,MAAM9H,eAAiB,KAEtBb,EAAMX,EAAKW,IAEjBX,EAAKW,IAAG,GAAA9H,OAAMwN,0CAAqC,6BAEnDrL,KAAK6P,uBAAyB7P,KAAK6P,sBAAsBlK,GAEzD3F,KAAK4N,kBAAkB+B,EAAAR,KAAA,GAEjBnP,KAAK4P,eAAe5K,GAAM,KAAD,GAE/BhF,KAAKsO,MAAMzL,kBAAmB,EAC9B7C,KAAKsO,MAAMjF,gBAAiB,EAC5BrJ,KAAKsO,MAAM5F,eAAgB,EAE3B1I,KAAK4N,kBAAkB,yBAAA+B,EAAAJ,OAAA,GAAAG,EAAA,UAGlC,gBAAAI,GAAA,OAAAL,EAAA/P,MAAA,KAAAC,UAAA,EA9BA,IA8BA,CAAAE,IAAA,kBAAA7B,MAED,WAA8B,IAAd+R,EAAIpQ,UAAA2M,OAAA,QAAA9H,IAAA7E,UAAA,GAAAA,UAAA,GAAG,KAChBoQ,IACC/P,KAAK+P,KAAOA,GAEb/P,KAAK+P,MACJ/P,KAAK+P,KAAKjM,UAAQ9G,EAAAA,EAAAA,GAAC,CAAC,EAAGgD,KAAKsO,OACpC,KAACD,CAAA,CAtH4C,G,WCK5B2B,EAAwB,WACzC,SAAAA,EAAYC,EAAS3B,GAAQ,IAADvO,EAAA,MAAAN,EAAAA,EAAAA,GAAA,KAAAuQ,GACxBhQ,KAAKsO,MAAQA,EACbtO,KAAKiQ,QAAUA,EAEfjQ,KAAK2J,UAAY,CACbC,UAAU,EACVC,aAAc,GACdsD,cAAe,QACfrD,oBAAoB,EACpBE,aAAa,EACb6D,qBAAsB,IAG1B7N,KAAKkK,WAAa,CACdC,YAAa,IAGjBnK,KAAKwN,gBAAkBxN,KAAKwN,gBAAgBhK,KAAKxD,MACjDA,KAAK2M,iBAAmB3M,KAAK2M,iBAAiBnJ,KAAKxD,MACnDA,KAAK4N,gBAAkB5N,KAAK4N,gBAAgBpK,KAAKxD,MACjDA,KAAK6M,cAAgB7M,KAAK6M,cAAcrJ,KAAKxD,MAC7CA,KAAK0L,uBAAyB1L,KAAK0L,uBAAuBlI,KAAKxD,MAC/DA,KAAKwL,uBAAyBxL,KAAKwL,uBAAuBhI,KAAKxD,MAC/DA,KAAKiL,qBAAuBjL,KAAK0L,uBAAuBlI,KAAKxD,MAC7DA,KAAK8K,qBAAuB9K,KAAK8K,qBAAqBtH,KAAKxD,MAC3DA,KAAKyN,cAAgBzN,KAAKyN,cAAcjK,KAAKxD,MAC7CA,KAAKoN,mBAAqBpN,KAAKoN,mBAAmB5J,KAAKxD,MACvDA,KAAKkO,eAAiBlO,KAAKkO,eAAe1K,KAAKxD,MAC/CA,KAAKyM,eAAiBzM,KAAKyM,eAAejJ,KAAKxD,MAC/CA,KAAK+L,gBAAkB/L,KAAK+L,gBAAgBvI,KAAKxD,MACjDA,KAAK2K,iBAAmB3K,KAAK2K,iBAAiBnH,KAAKxD,MACnDA,KAAKsN,eAAiBtN,KAAKsN,eAAe9J,KAAKxD,MAC/CA,KAAKqN,eAAiBrN,KAAKqN,eAAe7J,KAAKxD,MAC/CA,KAAKkQ,eAAiBlQ,KAAKkQ,eAAe1M,KAAKxD,MAC/CA,KAAKmQ,iBAAmBnQ,KAAKmQ,iBAAiB3M,KAAKxD,MAGnDA,KAAKoQ,mBAAqB,CACtBzR,MAAM,EACNuK,WAAY,GACZ1C,eAAgB,KAChBkC,eAAe,EACfY,gBAAgB,EAChBX,YAAY,GAGhB3I,KAAKqQ,iBAELrQ,KAAK2N,cAAgB,IAAIU,EAA6BrO,KAAKoQ,oBAE3DpQ,KAAK2N,cAAcyB,eAAc,eAAAkB,GAAA3B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAI,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAF,EAAAC,KAAA,GAInCnP,EAAKwQ,cAAclG,SAASG,SAAS,CAADyE,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACvBpP,EAAK0I,YAAY1I,EAAKwQ,cAAcnG,WAAYrK,EAAKwQ,cAAclG,SAAUtK,EAAKwQ,cAAclG,SAASG,UAAU,KAAD,EAA3H,GAAAyE,EAAAuB,KACMC,GAAG,CAADxB,EAAAE,KAAA,aACF,kCAAkC,KAAD,SAAAF,EAAAE,KAAA,EAGlCpP,EAAK2Q,YAAY3B,EAAMhP,EAAKwQ,cAAcnG,WAAYrK,EAAKwQ,cAAclG,UAAU,KAAD,EAA3F,GAAA4E,EAAAuB,KACMC,GAAG,CAADxB,EAAAE,KAAA,cACF,yBAAyB,KAAD,GAEe,OAAjDpP,EAAKwQ,cAAclG,SAASG,SAAWuE,EAAKlE,KAAKoE,EAAAE,KAAA,GAEpCwB,EAAAA,EAASC,gBAAgBC,eAAe9Q,EAAKwQ,cAAclG,UAAU,KAAD,GAA7E,GAAA4E,EAAAuB,KACMC,GAAG,CAADxB,EAAAE,KAAA,SAC2G,MAAnHpP,EAAK0I,YAAY1I,EAAKwQ,cAAcnG,WAAYrK,EAAKwQ,cAAclG,SAAUtK,EAAKwQ,cAAclG,SAASG,UACnG,4BAA4B,KAAD,GAGrCzK,EAAKqQ,mBAAmBlH,WAAa,CACjCnJ,EAAK+Q,aAAa/Q,EAAKwQ,cAAcnG,WAAYrK,EAAKwQ,cAAclG,WAGxEtK,EAAK4N,cAAcC,kBAEnB7N,EAAKsQ,iBAELtQ,EAAKgR,eAAe,kBAAkB9B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAA+B,GAAA/B,EAAA,SAGtClP,EAAK4N,cAAc/O,MAAK,GAExBqS,QAAQC,IAAGjC,EAAA+B,IAEXjR,EAAKoR,aAAa,kEAAkE,yBAAAlC,EAAAM,OAAA,GAAAT,EAAA,mBAE3F,gBAAAU,GAAA,OAAAc,EAAA5Q,MAAA,KAAAC,UAAA,EAvCgC,EAwCrC,CAiUC,OAjUAC,EAAAA,EAAAA,GAAAoQ,EAAA,EAAAnQ,IAAA,iBAAA7B,MAAA,eAAAoT,GAAAzC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAa,IAAA,IAAA2B,EAAAC,EAAAC,EAAA,OAAA3C,EAAAA,EAAAA,KAAAI,MAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAC8C,OAApCkC,EAASG,EAAAA,GAAYC,gBAAe9B,EAAAR,KAAA,EAErBwB,EAAAA,EAASe,eAAeC,UAAUN,EAAOO,gBAAgB,KAAD,EAAvEN,EAAM3B,EAAAa,KAENe,EAAWF,EAAOQ,YAAYC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,eAAiBvQ,EAAAA,GAAYE,mBAAmB,IAEtG3B,KAAK2J,UAAUe,kBAAoB6G,GAAYA,EAASU,QACxDjS,KAAK2J,UAAUL,gBAAkBgI,EAAOY,gBAExClS,KAAK4N,kBAAkB,wBAAA+B,EAAAJ,OAAA,GAAAG,EAAA,UAC1B,yBAAA0B,EAAA1R,MAAA,KAAAC,UAAA,EAbA,IAaA,CAAAE,IAAA,eAAA7B,MAED,SAAaoM,EAAYC,GACrB,MAAO,CACH9D,GAAI8D,EACJ1E,IAAK3F,KAAKuK,YAAYH,EAAYC,EAAUA,EAASG,UACrDpI,MAAOiI,EAASG,SAChB2H,SAAU9H,EAASG,SAE3B,GAAC,CAAA3K,IAAA,cAAA7B,MAED,SAAYoM,EAAYC,EAAU8H,GAC9B,OAAKA,EAGC,GAANtU,OAAUwN,0CAAqC,WAAAxN,OAAUmC,KAAKoS,aAAahI,EAAYC,EAAU8H,IAFvF,GAANtU,OAAUwN,0CAAqC,2BAGvD,GAAC,CAAAxL,IAAA,eAAA7B,MAED,SAAaoM,EAAYC,EAAU8H,GAC/B,MAAM,GAANtU,OAAUmC,KAAKiQ,QAAQoC,gBAAe,eAAAxU,OAAcuM,EAAWkI,YAAW,KAAAzU,OAAIwM,EAASiI,YAAW,KAAAzU,OAAIsU,EAC1G,GAAC,CAAAtS,IAAA,cAAA7B,MAAA,eAAAuU,GAAA5D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA2D,EAAkBpI,EAAYC,EAAU8H,GAAQ,OAAAvD,EAAAA,EAAAA,KAAAI,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,cAAAsD,EAAAC,OAAA,SACrC/B,EAAAA,EAASgC,YAAYC,WAAW5S,KAAKiQ,QAAQ3E,IAAKtL,KAAKoS,aAAahI,EAAYC,EAAU8H,KAAU,wBAAAM,EAAAlD,OAAA,GAAAiD,EAAA,UAC9G,gBAAA1C,EAAA+C,EAAAC,GAAA,OAAAP,EAAA7S,MAAA,KAAAC,UAAA,EAJA,IAIA,CAAAE,IAAA,cAAA7B,MAAA,eAAA+U,GAAApE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAmE,EAAkBjE,EAAM3E,EAAYC,GAAQ,IAAA4I,EAAA,OAAArE,EAAAA,EAAAA,KAAAI,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OACoE,OAAtG8D,EAAQ,GAAApV,OAAMmC,KAAKiQ,QAAQoC,gBAAe,eAAAxU,OAAcuM,EAAWkI,YAAW,KAAAzU,OAAIwM,EAASiI,aAAWY,EAAAR,OAAA,SAErG/B,EAAAA,EAASgC,YAAYQ,YAAYnT,KAAKiQ,QAAQ3E,IAAK2H,EAAU,CAAClE,EAAKlE,MAAO,CAACkE,KAAM,wBAAAmE,EAAA3D,OAAA,GAAAyD,EAAA,UAC3F,gBAAAI,EAAAC,EAAAC,GAAA,OAAAP,EAAArT,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAE,IAAA,eAAA7B,MAED,SAAauV,GACTvT,KAAK2J,UAAUE,aAAe0J,EAC9BvT,KAAK2J,UAAUwD,cAAgB,QAE/BnN,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,iBAAA7B,MAED,SAAeuV,GACXvT,KAAK2J,UAAUE,aAAe0J,EAC9BvT,KAAK2J,UAAUwD,cAAgB,UAE/BnN,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,qBAAA7B,MAED,WACIgC,KAAKmR,aAAa,GACtB,GAAC,CAAAtR,IAAA,kBAAA7B,MAAA,eAAAwV,GAAA7E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA4E,IAAA,IAAAC,EAAAC,EAAAvJ,EAAA,OAAAwE,EAAAA,EAAAA,KAAAI,MAAA,SAAA4E,GAAA,cAAAA,EAAA1E,KAAA0E,EAAAzE,MAAA,OAE8E,OADpEuE,EAAaG,KAAKC,MAAMC,WACxBJ,EAAU,GAAA9V,OAAMmC,KAAKiQ,QAAQoC,gBAAe,eAAAxU,OAAc6V,GAAUE,EAAAzE,KAAA,EAEzDwB,EAAAA,EAASgC,YAAYqB,aAAahU,KAAKiQ,QAAQ3E,IAAKqI,GAAY,KAAD,EAAxE,GAAAC,EAAApD,KACEC,GAAG,CAADmD,EAAAzE,KAAA,QAC4E,OAApFnP,KAAKmR,aAAa,mEAAkEyC,EAAAlB,OAAA,iBAWvF,OAPKtI,EAAa,CACf6J,UAAWjU,KAAKiQ,QAAQ3E,IACxBgH,YAAaoB,EACbQ,gBAAgB,GAADrW,OAAKmC,KAAKiQ,QAAQoC,gBAAe,eAAAxU,OAAc6V,GAC9D7I,KAAM,YACNG,YAAa,GACbqB,UAAW,IACduH,EAAAzE,KAAA,GAEYwB,EAAAA,EAASC,gBAAgBuD,uBAAuB/J,GAAY,KAAD,GAApE,GAAAwJ,EAAApD,KACMC,GAAG,CAADmD,EAAAzE,KAAA,SAC4E,OAApFnP,KAAKmR,aAAa,mEAAkEyC,EAAAlB,OAAA,yBAAAkB,EAAAzE,KAAA,GAIzDwB,EAAAA,EAASC,gBAAgBwD,iBAAiB,KAAD,GAAxEpU,KAAKsO,MAAMnE,YAAWyJ,EAAApD,KAEtBxQ,KAAK4N,kBAAkB,yBAAAgG,EAAArE,OAAA,GAAAkE,EAAA,UAC1B,yBAAAD,EAAA9T,MAAA,KAAAC,UAAA,EA9BA,IA8BA,CAAAE,IAAA,mBAAA7B,MAAA,eAAAqW,GAAA1F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAyF,EAAuBlK,EAAYC,GAAQ,OAAAuE,EAAAA,EAAAA,KAAAI,MAAA,SAAAuF,GAAA,cAAAA,EAAArF,KAAAqF,EAAApF,MAAA,OACvCnP,KAAKwU,cAAgB,CACjBC,aAAczU,KAAKkQ,eACnB9F,WAAYA,EACZC,SAAUA,GAGdrK,KAAK2J,UAAUpB,kBAAmB,EAElCvI,KAAK4N,kBAAkB,wBAAA2G,EAAAhF,OAAA,GAAA+E,EAAA,UAC1B,gBAAAI,EAAAC,GAAA,OAAAN,EAAA3U,MAAA,KAAAC,UAAA,EAZA,IAYA,CAAAE,IAAA,qBAAA7B,MAAA,eAAA4W,GAAAjG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAgG,EAAyBzK,GAAU,OAAAwE,EAAAA,EAAAA,KAAAI,MAAA,SAAA8F,GAAA,cAAAA,EAAA5F,KAAA4F,EAAA3F,MAAA,OAC/BnP,KAAKwU,cAAgB,CACjBC,aAAczU,KAAKmQ,iBACnB/F,WAAYA,GAGhBpK,KAAK2J,UAAUpB,kBAAmB,EAElCvI,KAAK4N,kBAAkB,wBAAAkH,EAAAvF,OAAA,GAAAsF,EAAA,UAC1B,gBAAAE,GAAA,OAAAH,EAAAlV,MAAA,KAAAC,UAAA,EAXA,IAWA,CAAAE,IAAA,iBAAA7B,MAED,WACIgC,KAAKwU,cAAcC,aAAazU,KAAKwU,cAAcpK,WAAYpK,KAAKwU,cAAcnK,UAElFrK,KAAK2J,UAAUpB,kBAAmB,EAElCvI,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,iBAAA7B,MAED,WACIgC,KAAK2J,UAAUpB,kBAAmB,EAElCvI,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,iBAAA7B,MAAA,eAAAgX,GAAArG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAoG,EAAqB7K,EAAYC,GAAQ,OAAAuE,EAAAA,EAAAA,KAAAI,MAAA,SAAAkG,GAAA,cAAAA,EAAAhG,KAAAgG,EAAA/F,MAAA,cAAA+F,EAAA/F,KAAA,EACpBwB,EAAAA,EAASC,gBAAgBV,eAAe7F,EAASiB,KAAK,KAAD,EAA9D,GAAA4J,EAAA1E,KACEC,GAAG,CAADyE,EAAA/F,KAAA,QAC0E,OAAlFnP,KAAKmR,aAAa,iEAAgE+D,EAAAxC,OAAA,iBAIL,OAAjFtI,EAAWiC,UAAajC,EAAWiC,UAAU8I,QAAO,SAAAC,GAAC,OAAIA,EAAE9J,MAAQjB,EAASiB,GAAG,IAAE4J,EAAA/F,KAAA,EAEpEwB,EAAAA,EAASgC,YAAY0C,aAAarV,KAAKiQ,QAAQ3E,IAAKjB,EAAS6J,iBAAiB,KAAD,EAAtF,GAAAgB,EAAA1E,KACMC,GAAG,CAADyE,EAAA/F,KAAA,SACiF,OAAzFnP,KAAKmR,aAAa,wEAAuE+D,EAAAxC,OAAA,kBAI7F1S,KAAKqQ,iBAELrQ,KAAK+Q,eAAe,qBAEpB/Q,KAAK4N,kBAAkB,yBAAAsH,EAAA3F,OAAA,GAAA0F,EAAA,UAC1B,gBAAAK,EAAAC,GAAA,OAAAP,EAAAtV,MAAA,KAAAC,UAAA,EAtBA,IAsBA,CAAAE,IAAA,mBAAA7B,MAAA,eAAAwX,GAAA7G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA4G,EAAuBrL,GAAU,OAAAwE,EAAAA,EAAAA,KAAAI,MAAA,SAAA0G,GAAA,cAAAA,EAAAxG,KAAAwG,EAAAvG,MAAA,cAAAuG,EAAAvG,KAAA,EACZwB,EAAAA,EAASC,gBAAgB+E,yBAAyBvL,EAAWkB,KAAK,KAAD,EAA1E,GAAAoK,EAAAlF,KACEC,GAAG,CAADiF,EAAAvG,KAAA,QAC4E,OAApFnP,KAAKmR,aAAa,mEAAkEuE,EAAAhD,OAAA,iBAIF,OAAtF1S,KAAKsO,MAAMnE,YAAcnK,KAAKsO,MAAMnE,YAAYgL,QAAO,SAAAS,GAAC,OAAIA,EAAEtK,MAAQlB,EAAWkB,GAAG,IAAEoK,EAAAvG,KAAA,EAEzEwB,EAAAA,EAASgC,YAAY0C,aAAarV,KAAKiQ,QAAQ3E,IAAKlB,EAAW8J,iBAAiB,KAAD,EAAxF,GAAAwB,EAAAlF,KACMC,GAAG,CAADiF,EAAAvG,KAAA,SACmF,OAA3FnP,KAAKmR,aAAa,0EAAyEuE,EAAAhD,OAAA,kBAI/F1S,KAAKqQ,iBAELrQ,KAAK+Q,eAAe,sBAEpB/Q,KAAK4N,kBAAkB,yBAAA8H,EAAAnG,OAAA,GAAAkG,EAAA,UAC1B,gBAAAI,GAAA,OAAAL,EAAA9V,MAAA,KAAAC,UAAA,EAtBA,IAsBA,CAAAE,IAAA,gBAAA7B,MAAA,eAAA8X,GAAAnH,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAkH,EAAoB3L,GAAU,IAAAsJ,EAAAC,EAAAtJ,EAAA9D,EAAA,OAAAqI,EAAAA,EAAAA,KAAAI,MAAA,SAAAgH,GAAA,cAAAA,EAAA9G,KAAA8G,EAAA7G,MAAA,OAE0E,OAD9FuE,EAAaG,KAAKC,MAAMC,WACxBJ,EAAU,GAAA9V,OAAMmC,KAAKiQ,QAAQoC,gBAAe,eAAAxU,OAAcuM,EAAWkI,YAAW,KAAAzU,OAAI6V,GAAUsC,EAAA7G,KAAA,EAEnFwB,EAAAA,EAASgC,YAAYqB,aAAahU,KAAKiQ,QAAQ3E,IAAKqI,GAAY,KAAD,EAAxE,GAAAqC,EAAAxF,KACEC,GAAG,CAADuF,EAAA7G,KAAA,QAC4E,OAApFnP,KAAKmR,aAAa,mEAAkE6E,EAAAtD,OAAA,iBAWvF,OAPGrI,EAAW,CACX4L,aAAc7L,EAAWkB,IACzBgH,YAAaoB,EACbQ,gBAAgB,GAADrW,OAAKmC,KAAKiQ,QAAQoC,gBAAe,eAAAxU,OAAcuM,EAAWkI,YAAW,KAAAzU,OAAI6V,GACxFlJ,SAAU,GACVK,KAAM,YACNG,YAAa,IAChBgL,EAAA7G,KAAA,GAEgBwB,EAAAA,EAASC,gBAAgBsF,aAAa7L,GAAU,KAAD,GAAxD,GAAF9D,EAAEyP,EAAAxF,KACA,CAADwF,EAAA7G,KAAA,SACiF,OAApFnP,KAAKmR,aAAa,mEAAkE6E,EAAAtD,OAAA,yBAAAsD,EAAA7G,KAAA,GAIvEwB,EAAAA,EAASC,gBAAgBuF,gBAAgB5P,GAAI,KAAD,GAA7D8D,EAAQ2L,EAAAxF,KAERpG,EAAWiC,UAAUgD,KAAKhF,GAE1BrK,KAAK4N,kBAAkB,yBAAAoI,EAAAzG,OAAA,GAAAwG,EAAA,UAC1B,gBAAAK,GAAA,OAAAN,EAAApW,MAAA,KAAAC,UAAA,EAhCA,IAgCA,CAAAE,IAAA,kBAAA7B,MAED,SAAgBqM,GACRA,EAASwB,UACTxB,EAASwB,QAAU,CAAEC,kBAAkB,IAE3CzB,EAASwB,QAAQC,kBAAoBzB,EAASwB,QAAQC,iBAEtD9L,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,mBAAA7B,MAAA,eAAAqY,GAAA1H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAyH,EAAuBlM,GAAU,OAAAwE,EAAAA,EAAAA,KAAAI,MAAA,SAAAuH,GAAA,cAAAA,EAAArH,KAAAqH,EAAApH,MAAA,OAQ2B,GAR3BoH,EAAArH,KAAA,EAGrB9E,EAAWyB,UACXzB,EAAWyB,QAAU,CACjBlN,MAAM,IAGdyL,EAAWyB,QAAQlN,MAASyL,EAAWyB,QAAQlN,KAE1CyL,EAAWiC,UAAUC,OAAO,CAADiK,EAAApH,KAAA,QAIL,OAFvBnP,KAAK2J,UAAU+C,mBAAoB,EAEnC1M,KAAK4N,kBAAkB2I,EAAApH,KAAA,EAEMwB,EAAAA,EAASC,gBAAgB4F,2BAA2BpM,EAAWkB,KAAK,KAAD,EAAhGlB,EAAWiC,UAASkK,EAAA/F,KAAA,OAAA+F,EAAApH,KAAA,iBAAAoH,EAAArH,KAAA,GAAAqH,EAAAvF,GAAAuF,EAAA,SAIxBvW,KAAKmR,aAAa,kEAAiE,QAK5D,OAL4DoF,EAAArH,KAAA,GAGnFlP,KAAK2J,UAAU+C,mBAAoB,EAEnC1M,KAAK4N,kBAAkB2I,EAAAE,OAAA,6BAAAF,EAAAhH,OAAA,GAAA+G,EAAA,yBAE9B,gBAAAI,GAAA,OAAAL,EAAA3W,MAAA,KAAAC,UAAA,EA7BA,IA6BA,CAAAE,IAAA,iBAAA7B,MAED,SAAeoM,GACXpK,KAAK2J,UAAUK,aAAc,EAC7BhK,KAAK2J,UAAUkE,qBAAuBzD,EAAWkB,IAEjDtL,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,iBAAA7B,MAED,WACIgC,KAAK2J,UAAUK,aAAc,EAE7BhK,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,yBAAA7B,MAED,SAAuBiK,EAAGmC,GACtBA,EAAWS,KAAO5C,EAAEpD,OAAO7G,MAE3BgC,KAAK2J,UAAUC,UAAW,EAE1B5J,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,yBAAA7B,MAED,SAAuBiK,EAAGmC,GACtBA,EAAWY,YAAc/C,EAAEpD,OAAO7G,MAElCgC,KAAK2J,UAAUC,UAAW,EAE1B5J,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,uBAAA7B,MAED,SAAqBiK,EAAGoC,GACpBA,EAASQ,KAAO5C,EAAEpD,OAAO7G,MAEzBgC,KAAK2J,UAAUC,UAAW,EAE1B5J,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,uBAAA7B,MAED,SAAqBiK,EAAGoC,GACpBA,EAASW,YAAc/C,EAAEpD,OAAO7G,MAEhCgC,KAAK2J,UAAUC,UAAW,EAE1B5J,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,eAAA7B,MAED,SAAaoM,EAAYC,GACrBrK,KAAKuQ,cAAgB,CACjBnG,WAAYA,EACZC,SAAUA,GAGVA,EAASG,SACTxK,KAAKoQ,mBAAmBlH,WAAa,CACjClJ,KAAK8Q,aAAa9Q,KAAKuQ,cAAcnG,WAAYpK,KAAKuQ,cAAclG,WAGxErK,KAAKoQ,mBAAmBlH,WAAa,GAEzClJ,KAAK2N,cAAc/O,MAAK,GAExBoB,KAAK4N,iBACT,GAAC,CAAA/N,IAAA,gBAAA7B,MAAA,eAAA2Y,GAAAhI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAA+H,IAAA,OAAAhI,EAAAA,EAAAA,KAAAI,MAAA,SAAA6H,GAAA,cAAAA,EAAA3H,KAAA2H,EAAA1H,MAAA,cAAA0H,EAAA1H,KAAA,EACUwB,EAAAA,EAASC,gBAAgBkG,kBAAkB9W,KAAKsO,MAAMnE,aAAa,KAAD,EAExEnK,KAAK+Q,eAAe,kBAAiB,wBAAA8F,EAAAtH,OAAA,GAAAqH,EAAA,UACxC,yBAAAD,EAAAjX,MAAA,KAAAC,UAAA,EANA,IAMA,CAAAE,IAAA,kBAAA7B,MAED,WAA8B,IAAd+R,EAAIpQ,UAAA2M,OAAA,QAAA9H,IAAA7E,UAAA,GAAAA,UAAA,GAAG,KACfoQ,IACA/P,KAAK+P,KAAOA,GAEhB/P,KAAK+P,MAAQ/P,KAAK+P,KAAKjM,SAAS,CAC5B6F,WAAS3M,EAAAA,EAAAA,GAAA,GAAOgD,KAAK2J,WACrBO,YAAUlN,EAAAA,EAAAA,GAAA,GAAOgD,KAAKsO,QAE9B,KAAC0B,CAAA,CA5ZwC,GCExB+G,EAAe,SAAA1X,IAAAC,EAAAA,EAAAA,GAAAyX,EAAA1X,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAuX,GAChC,SAAAA,EAAYva,GAAQ,IAADuD,EAKb,OALaN,EAAAA,EAAAA,GAAA,KAAAsX,IACfhX,EAAAR,EAAA4D,KAAA,KAAM3G,IAED4G,MAAQ,CACT0G,oBAAoB,GACtB/J,CACN,CAwBC,OAxBAH,EAAAA,EAAAA,GAAAmX,EAAA,EAAAlX,IAAA,oBAAA7B,MAAA,eAAAgZ,GAAArI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAED,SAAAC,IAAA,IAAAmB,EAAA,OAAArB,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACoB,OAAhBnP,KAAKsO,MAAQ,CAAC,EAAEW,EAAAE,KAAA,EAEewB,EAAAA,EAASC,gBAAgBwD,iBAAiB,KAAD,EAAlD,OAAtBpU,KAAKsO,MAAMnE,YAAW8E,EAAAuB,KAAAvB,EAAAE,KAAA,EAEAwB,EAAAA,EAASe,eAAeuF,QAAQzF,EAAAA,GAAYC,gBAAgBG,gBAAgB,KAAD,EAA3F3B,EAAOhB,EAAAuB,KAEbxQ,KAAK8I,UAAY,IAAIkH,EAAyBC,EAASjQ,KAAKsO,OAE5DtO,KAAKkX,cAELlX,KAAK8D,SAAS,CAAEgG,oBAAoB,IAAS,yBAAAmF,EAAAM,OAAA,GAAAT,EAAA,UAChD,yBAAAkI,EAAAtX,MAAA,KAAAC,UAAA,EAdA,IAcA,CAAAE,IAAA,SAAA7B,MAED,WAAU,IAADmZ,EACL,OACI1a,EAAAA,EAAAA,MAAC+B,EAAAA,SAAQ,CAAA3B,SAAA,EACLC,EAAAA,EAAAA,KAACwB,EAAAA,EAAc,CAACrB,QAAQ,gBAAgB2B,KAAMoB,KAAKoD,MAAM0G,mBAAoBnM,MAAO,CAAE2H,OAAQ,WAE9FxI,EAAAA,EAAAA,KAAC4M,EAAmB,CAACZ,UAAW9I,KAAK8I,UAAW4E,IAAmB,QAAhByJ,EAAEnX,KAAK8I,iBAAS,IAAAqO,OAAA,EAAdA,EAAgBvJ,oBAGjF,KAACmJ,CAAA,CA/B+B,CAAStW,EAAAA,U","sources":["common/loading/circularProgressWithLabel.js","common/loading/loadingOverlay.js","common/ui/alertDialog.js","common/ui/alertResponseDialog.js","ezyvuecore/models/user.js","common/ui/titleHeader.js","common/ui/fullScreenDialog.js","common/ui/contextMenu.js","common/ui/imageGrid.js","common/ui/uploadButton.js","members/features/ezyvueStudio/features/texturePicker/texturePickerDialogView.js","common/ui/overlay.js","members/features/panoramas/managePanoramasView.js","members/features/ezyvueStudio/features/texturePicker/texturePickerDialogViewModel.js","members/features/panoramas/managePanoramasViewModel.js","members/features/panoramas/managePanoramas.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nexport default function CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress {...props} />\r\n      {\r\n        props.variant === 'determinate' &&\r\n        <Box\r\n          top={0}\r\n          left={0}\r\n          bottom={0}\r\n          right={0}\r\n          position=\"absolute\"\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n        >\r\n          <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">\r\n            <span style={{ fontSize: props.fontSize }}>\r\n              {\r\n                `${Math.round(props.value)}%`\r\n              }\r\n            </span>\r\n          </Typography>\r\n        </Box>\r\n      }\r\n    </Box>\r\n  );\r\n}\r\n\r\nCircularProgressWithLabel.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  fontSize: PropTypes.string,\r\n  variant: PropTypes.string\r\n};\r\n","import React, {Fragment} from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgressWithLabel from './circularProgressWithLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  backdrop: {\r\n    zIndex: 5,\r\n    color: 'white',\r\n    backgroundColor: 'rgb(255, 255, 255)'\r\n  },\r\n}));\r\n\r\nexport default function LoadingOverlay(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Fragment>\r\n        <Backdrop className={classes.backdrop} open={props.show} transitionDuration={{exit: 1000, enter: 0, appear: 0}}>\r\n            <div style={{textAlign: \"center\"}}>\r\n                <CircularProgressWithLabel variant={props.variant} color=\"primary\" value={props.value} size={85} fontSize='24px' />\r\n            </div>\r\n        </Backdrop>\r\n        {props.children}\r\n      </Fragment>\r\n  );\r\n}\r\n\r\nLoadingOverlay.defaultProps = {\r\n  variant: 'indeterminate',\r\n  value: 0\r\n};\r\n\r\nLoadingOverlay.propTypes = {\r\n  show: PropTypes.bool.isRequired,\r\n  value: PropTypes.number,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.array,\r\n    PropTypes.object\r\n  ]),\r\n  variant: PropTypes.string // indeterminate or determinate\r\n};","import React from 'react';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class AlertDialog extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.open && !prevProps.open)\r\n      setTimeout(() => { this.props.onClose && this.props.onClose(true); }, 10000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{\r\n        position: 'fixed',\r\n        left: '15px',\r\n        top: '100px',\r\n        display: this.props.open ? 'block' : 'none',\r\n        minWidth: '250px',\r\n        maxWidth: '95%',\r\n        zIndex: '1500'\r\n      }} >\r\n        <Alert\r\n          severity={this.props.severity || \"error\"}\r\n          onClose={() => { this.props.onClose && this.props.onClose(false) }} >\r\n          {this.props.message}\r\n        </Alert>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAlertDialog.propTypes = {\r\n  severity: PropTypes.string,\r\n  message: PropTypes.string,\r\n  onClose: PropTypes.func,\r\n  onTimeout: PropTypes.func,\r\n  open: PropTypes.bool\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport PropTypes from 'prop-types'\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nexport default function AlertResponseDialog(props) {\r\n    return (\r\n        <Dialog\r\n            fullWidth={false}\r\n            maxWidth=\"md\"\r\n            open={props.open}>\r\n            <DialogContent>\r\n                <div style={{ color: 'red', display: 'flex', alignItems: 'center' }} >\r\n                    <WarningIcon fontSize='large' color='error' />&nbsp;Alert\r\n                </div>\r\n                <div style={{ color: 'red', paddingTop: '2   0px' }} dangerouslySetInnerHTML={{ __html: props.message }}>\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={props.onOk}>\r\n                    <span style={{ color: 'red' }}>{props.okText}</span>\r\n                </Button>\r\n                <Button style={{ color: 'green' }} onClick={props.onCancel}>\r\n                    {props.cancelText}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nAlertResponseDialog.defaultProps = {\r\n    okText: 'OK',\r\n    cancelText: 'CANCEL'\r\n}\r\n\r\nAlertResponseDialog.propTypes = {\r\n    open: PropTypes.bool.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n    onOk: PropTypes.func.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    okText: PropTypes.string,\r\n    cancelText: PropTypes.string,\r\n};","export const UserRoles = {\r\n  USER: 1,\r\n  DESIGNER: 2,\r\n  ADMINISTRATOR: 3,\r\n  WEBSITE_ADMINISTRATOR: 4,\r\n  WEBSITE_OWNER: 5,\r\n  COUNT: 5,\r\n};\r\n\r\nexport const Permissions = {\r\n  MEMBER_ACCESS: 1,\r\n  CREATE_UPDATE_ASSET: 2,\r\n  DELETE_ASSET: 3,              // DEPRECATED\r\n  ADMIN_ACCESS: 4,\r\n  MASTER_ADMIN_ACCESS: 10,\r\n  COUNT: 5,\r\n};\r\n\r\nexport class User {\r\n  constructor(FirstName, LastName, Email, Password, LastAccessed, StoreAccountId, RoleIdCode, PrimaryAccountHolder) {\r\n    this.FirstName = FirstName;\r\n    this.LastName = LastName;\r\n    this.Email = Email;\r\n    this.Password = Password;\r\n    this.LastAccessed = LastAccessed;\r\n    this.StoreAccountId = StoreAccountId;\r\n    this.RoleIdCode = RoleIdCode;\r\n    this.PrimaryAccountHolder = PrimaryAccountHolder;\r\n  }\r\n}\r\n\r\n// Permission value for a given role in a store account\r\nexport class UserRolePermission {\r\n  constructor(UserRoleId, PermissionId, StoreAccountId, Granted) {\r\n    this.UserRoleId = UserRoleId;\r\n    this.PermissionId = PermissionId;\r\n    this.StoreAccountId = StoreAccountId; // Store Account\r\n    this.Granted = Granted;\r\n  }\r\n}\r\n","import React from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default function TitleHeader(props) {\r\n    return (\r\n        <div className='tool-heading'>\r\n            {\r\n                props.showCloseIcon && \r\n                <CloseIcon style={{alignSelf: 'center', fontSize: 'medium', textAlign: 'left'}} onClick={props.onClose}>\r\n                </CloseIcon>\r\n            }\r\n            <div className='tool-heading-title'>{props.title}</div>\r\n        </div>                              \r\n    ); \r\n}","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport TitleHeader from './titleHeader'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class FullScreenDialog extends React.Component {\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          fullWidth={this.props.fullWidth}\r\n          fullScreen={this.props.fullScreen}\r\n          maxWidth={this.props.maxWidth}\r\n          open={this.props.open}\r\n          onClose={this.props.handleCancel}\r\n          aria-labelledby='responsive-dialog-title'>\r\n          { \r\n            this.props.showHeader && \r\n            <TitleHeader title={this.props.title} />\r\n          }\r\n          <DialogContent>\r\n            {this.props.renderContent && this.props.renderContent()}\r\n          </DialogContent>\r\n          <div>\r\n            {this.props.renderFixedContent && this.props.renderFixedContent()}\r\n          </div>\r\n          <DialogActions>      \r\n            <Button autoFocus disabled={this.props.okButtonDisabled} onClick={(this.props.handleOk)} color='primary'>\r\n              {this.props.okButtonName}\r\n            </Button>\r\n            {\r\n              this.props.showCancelButton &&\r\n              <Button onClick={this.props.handleCancel} color='primary' autoFocus>\r\n                {this.props.cancelButtonName}\r\n              </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nFullScreenDialog.defaultProps = {\r\n  fullScreen: false,\r\n  fullWidth: false,\r\n  title: '',\r\n  open: false,\r\n  okButtonName: 'Ok',\r\n  okButtonDisabled: false,\r\n  cancelButtonName: 'Cancel',\r\n  maxWidth: 'md',\r\n  showCancelButton: true,\r\n  showHeader: true\r\n};\r\n\r\nFullScreenDialog.propTypes = {\r\n  fullScreen: PropTypes.bool,\r\n  fullWidth: PropTypes.bool,\r\n  title: PropTypes.string,\r\n  showHeader: PropTypes.bool,\r\n  open: PropTypes.bool,\r\n  handleOk: PropTypes.func,\r\n  handleCancel: PropTypes.func,\r\n  renderFixedContent: PropTypes.func,\r\n  renderContent: PropTypes.func,\r\n  okButtonName: PropTypes.string,\r\n  okButtonDisabled: PropTypes.bool,\r\n  cancelButtonName: PropTypes.string,\r\n  maxWidth: PropTypes.string,\r\n  showCancelButton: PropTypes.bool,\r\n};","import React from 'react';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ContextMenu extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            mouseX: null,\r\n            mouseY: null,\r\n        };\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    handleClick(event) {\r\n        event.preventDefault();\r\n\r\n        if (!this.props.enabled)\r\n            return;\r\n\r\n        this.setState({\r\n            mouseX: event.clientX - 2,\r\n            mouseY: event.clientY - 4,\r\n        });\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({\r\n            mouseX: null,\r\n            mouseY: null,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onContextMenu={this.handleClick} style={{ cursor: 'context-menu' }}>\r\n                {this.props.children}\r\n                <Menu\r\n                    keepMounted\r\n                    open={this.state.mouseY !== null && this.props.menuItems}\r\n                    onClose={this.handleClose}\r\n                    anchorReference=\"anchorPosition\"\r\n                    anchorPosition={\r\n                        this.state.mouseY !== null && this.state.mouseX !== null\r\n                            ? { top: this.state.mouseY, left: this.state.mouseX }\r\n                            : undefined\r\n                    } >\r\n                    {\r\n                        this.props.menuItems && this.props.menuItems.map((item, i) => {\r\n                            return (\r\n                                <MenuItem\r\n                                    key={i}\r\n                                    onClick={() => {\r\n                                        item.onClick(this.props.target, i);\r\n                                        this.handleClose();\r\n                                    }} >\r\n                                    {item.text}\r\n                                </MenuItem>\r\n                            )\r\n                        })\r\n                    }\r\n                </Menu>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nContextMenu.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array\r\n    ]),\r\n    menuItems: PropTypes.array,\r\n    target: PropTypes.object,\r\n    enabled: PropTypes.bool\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContextMenu from './contextMenu';\r\n\r\nexport default class ImageGrid extends React.Component\r\n{\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(tile) {\r\n    if(this.props.disableTileClickEvents)\r\n      return;\r\n\r\n    this.props.handleSelectionChanged && this.props.handleSelectionChanged(tile);\r\n    this.props.onTileClicked && this.props.onTileClicked(tile);\r\n  }\r\n\r\n  render() {\r\n    const width =this.props.tileWidth || 'auto';\r\n    const height =this.props.tileHeight || 'auto';\r\n\r\n    return (\r\n      <div className=\"imageGridContainer\" style={{flexDirection: this.props.flexDirection}}>\r\n          {\r\n            this.props.tiles && this.props.tiles.map((tile, index) => {\r\n                let img= tile.img;\r\n\r\n                return (\r\n                    <ContextMenu target={tile} enabled={tile.hasContextMenu} key={index} menuItems={this.props.contextMenuItems}>\r\n                      <div \r\n                        className=\"imageGridItem\"\r\n                        style={{\r\n                            margin: this.props.tileMargin,\r\n                            marginBottom: this.props.titleUnderImage ? '25px' : this.props.tileMargin,\r\n                            boxShadow: this.props.tileShadow\r\n                        }} > \r\n                      {\r\n                        this.props.renderTileContent && this.props.renderTileContent(tile)\r\n                      }\r\n                      {\r\n                        this.props.colorTiles ?\r\n                        <div style={{\r\n                                border: tile.id === this.props.selectedTileId ?  '2px solid orange' : 'none',\r\n                                backgroundColor: tile.color, \r\n                                width: width, \r\n                                height: height,\r\n                                borderRadius: this.props.tileBorderRadius\r\n                             }} />\r\n                        :\r\n                        <img src={img} \r\n                            alt={tile.title}\r\n                            style={{\r\n                                border: tile.id === this.props.selectedTileId ?  '2px solid orange' : 'none',\r\n                                backgroundColor: tile.color, \r\n                                width: width, \r\n                                height: height,\r\n                                borderRadius: this.props.tileBorderRadius\r\n                            }} \r\n                            onClick={() => {this.handleClick(tile)}}/>\r\n                      }\r\n                      {\r\n                        this.props.showLabels && \r\n                        <div className='title' \r\n                              style={{\r\n                                width: width, \r\n                                fontSize: this.props.labelFontSize,\r\n                                bottom: this.props.titleUnderImage ? '-25px': '0',\r\n                                color: this.props.titleColour,\r\n                                backgroundColor: this.props.titleUnderImage ? 'transparent' : 'rgba(0, 0, 0, 0.5)'\r\n                              }} >\r\n                          {tile.title}\r\n                        </div>\r\n                      }\r\n                    </div>\r\n                  </ContextMenu>\r\n                );\r\n            })\r\n          }\r\n          {\r\n            this.props.showOnAddItem && \r\n            <div className=\"imageGridItem\" style={{\r\n                                width: width, \r\n                                height: height,\r\n                                borderRadius: this.props.tileBorderRadius            \r\n                            }} >\r\n              <img src={this.props.addItemImageSrc} \r\n                    alt='add' \r\n                    style={{\r\n                        width: width, \r\n                        height:height,\r\n                        backgroundColor: 'orange',\r\n                        borderRadius: this.props.tileBorderRadius\r\n                    }} \r\n                    onClick={this.props.onAddNewClick} />\r\n            </div>\r\n          }\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nImageGrid.defaultProps = {\r\n    tileMargin: '8px',\r\n    titleUnderImage: false,\r\n    showOnAddItem: false,\r\n    tileBorderRadius: '0',\r\n    labelFontSize: '1em',\r\n    tileShadow: 'auto',\r\n    showLabels: true,\r\n    flexDirection: 'row',\r\n    titleColour: 'white'\r\n};\r\n\r\nImageGrid.propTypes = {\r\n    disableTileClickEvents: PropTypes.bool,\r\n    showOnAddItem: PropTypes.bool,\r\n    addItemImageSrc: PropTypes.string,\r\n    titleUnderImage: PropTypes.bool,\r\n    tiles: PropTypes.array,\r\n    tileWidth: PropTypes.string,\r\n    tileHeight: PropTypes.string,\r\n    tileMargin: PropTypes.string,\r\n    tileBorderRadius: PropTypes.string,\r\n    colorTiles: PropTypes.bool,\r\n    contextMenuItems: PropTypes.array,\r\n    labelFontSize: PropTypes.string,\r\n    tileShadow: PropTypes.string,\r\n    showLabels: PropTypes.bool,\r\n    selectedTileId: PropTypes.any,\r\n    flexDirection: PropTypes.string,\r\n    titleColour: PropTypes.string,\r\n\r\n    onTileClicked: PropTypes.func,\r\n    handleSelectionChanged: PropTypes.func,\r\n    renderTileContent: PropTypes.func,\r\n    onAddNewClick: PropTypes.func,\r\n}\r\n","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n}));\r\n\r\n// <UploadButton accept=\"accept values\" handleUpload={func}>\r\nexport default function UploadButton(props) {\r\n  const classes = useStyles();\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n  const onClick = (e) => {  \r\n    if(selectedFile) {\r\n      props.handleUpload(selectedFile);\r\n      \r\n      document.getElementById('file-input').value = '';\r\n    }\r\n  }\r\n\r\n  const onChange = (e) => {\r\n    setSelectedFile(e.target.files[0]);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <input\r\n        accept={props.accept}\r\n        id=\"file-input\"\r\n        type=\"file\"\r\n        onChange={onChange}\r\n      />\r\n      <Button variant=\"contained\" color=\"primary\" component=\"span\" onClick={onClick}>\r\n        Upload\r\n      </Button>\r\n    </div>\r\n  );\r\n}","import React, { Fragment } from 'react';\r\nimport FullScreenDialog from 'common/ui/fullScreenDialog';\r\nimport ImageGrid from 'common/ui/imageGrid';\r\nimport UploadButton from 'common/ui/uploadButton';\r\nimport PropTypes from 'prop-types';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AlertResponseDialog from 'common/ui/alertResponseDialog'\r\n\r\nexport default class TexturePickerDialogView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            deleteDialogOpen: false\r\n        };\r\n\r\n        this.onDelete = this.onDelete.bind(this);\r\n        this.deleteImage = this.deleteImage.bind(this);\r\n    }\r\n\r\n    renderTileMenu(tile) {\r\n        if (!this.state.deleteEnabled || this.state.noTileMenu)\r\n            return null;\r\n\r\n        return (\r\n            <div style={{ position: 'absolute', top: '5px', right: '5px' }}>\r\n                <Tooltip title='Delete' >\r\n                    <DeleteIcon\r\n                        style={{ color: 'orange', fontSize: 24 }}\r\n                        onClick={() => this.onDelete(tile)} />\r\n                </Tooltip>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteImage() {\r\n        this.setState({ deleteDialogOpen: false });\r\n        this.props.viewModel.onDeleteImage(this.imageToDelete);\r\n    }\r\n\r\n    onDelete(tile) {\r\n        this.setState({ deleteDialogOpen: true });\r\n        this.imageToDelete = tile;\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.viewModel)\r\n            return null;\r\n\r\n        return (\r\n            <Fragment>\r\n                <FullScreenDialog\r\n                    open={this.state.open}\r\n                    handleOk={this.props.viewModel.onOk}\r\n                    handleCancel={this.props.viewModel.onCancel}\r\n                    renderContent={() => {\r\n                        return (\r\n                            <ImageGrid\r\n                                tiles={this.state.imageTiles}\r\n                                selectedTileId={this.state.selectedTileId}\r\n                                tileWidth='200px'\r\n                                tileHeight='200px'\r\n                                handleSelectionChanged={this.props.viewModel.onSelectChange}\r\n                                renderTileContent={tile => this.renderTileMenu(tile)} />\r\n                        )\r\n                    }}\r\n                    renderFixedContent={() => {\r\n                        return (\r\n                            (!this.state.uploadDisabled && !this.state.overAssetLimit) && \r\n                            <UploadButton handleUpload={this.props.viewModel.handleImageUpload} accept=\"image/*\" />\r\n                        )\r\n                    }}\r\n                    okButtonDisabled={this.state.okButtonDisabled}\r\n                    title=\"Choose an Image\"\r\n                    okButtonName=\"OK\"\r\n                    cancelButtonName=\"CANCEL\" />\r\n                <AlertResponseDialog\r\n                    open={Boolean(this.state.deleteDialogOpen)}\r\n                    message='Are you sure you want to delete this texture? This operation cannot be undone!'\r\n                    okText='DELETE'\r\n                    onOk={this.deleteImage}\r\n                    onCancel={() => this.setState({ deleteDialogOpen: false })} />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nTexturePickerDialogView.propTypes = {\r\n    viewModel: PropTypes.object,\r\n};","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Overlay extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                position: 'fixed',\r\n                display: this.props.open ? 'block' : 'none',\r\n                top: '0',\r\n                left: '0',\r\n                right: '0',\r\n                bottom: '0',\r\n                backgroundColor: 'white',\r\n                zIndex: '2000',\r\n                cursor: 'pointer'\r\n            }} >\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nOverlay.propTypes = {\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.object,\r\n        PropTypes.array\r\n    ]),\r\n    open: PropTypes.bool\r\n}","import React, { Fragment } from 'react';\r\nimport AlertDialog from 'common/ui/alertDialog'\r\nimport LoadingOverlay from 'common/loading/loadingOverlay';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircle from '@material-ui/icons/AddCircle';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport PropTypes from 'prop-types';\r\nimport TexturePickerDialogView from 'members/features/ezyvueStudio/features/texturePicker/texturePickerDialogView';\r\nimport PageviewIcon from '@material-ui/icons/Pageview';\r\nimport Overlay from 'common/ui/overlay';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DeleteIcon from '@material-ui/icons/Close';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport AlertResponseDialog from 'common/ui/alertResponseDialog';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { Prompt } from 'react-router';\r\n\r\nexport default class ManagePanoramasView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            viewState: {\r\n                modified: false,\r\n                alertMessage: '',\r\n                showLoadingOverlay: false,\r\n                expandedPanel: false,\r\n                popOverOpen: false,\r\n                deleteDialogOpen: false,\r\n                panoramaId: '',\r\n            },\r\n            modelState: {\r\n                collections: []\r\n            }\r\n        };\r\n    }\r\n\r\n    renderPanorama(collection, panorama, index) {\r\n        return (\r\n            <div key={index} style={{ margin: '10px' }}>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <img style={{ width: '200px', height: 'auto', cursor: 'pointer' }}\r\n                                    loading='lazy'\r\n                                    src={this.props.viewModel.getImageUrl(collection, panorama, panorama.imageUrl)}\r\n                                    onClick={() => this.props.viewModel.onImageClick(collection, panorama)} />\r\n                            </td>\r\n                            <td style={{ position: 'relative' }}>\r\n                                {\r\n                                    this.state.viewState.hasEditPermission &&\r\n                                    <DeleteIcon style={{ position: 'absolute', top: '10px', right: '10px' }}\r\n                                        onClick={() => this.props.viewModel.onDeletePanorama(collection, panorama)} />\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Title</td>\r\n                            <td>\r\n                                <input\r\n                                    disabled={!this.state.viewState.hasEditPermission}\r\n                                    style={{ width: '100%' }}\r\n                                    label='Name'\r\n                                    name='name'\r\n                                    value={panorama.name || ''}\r\n                                    onChange={e => this.props.viewModel.onPanoramaNameChange(e, panorama)} />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Description</td>\r\n                            <td>\r\n                                <textarea\r\n                                    disabled={!this.state.viewState.hasEditPermission}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        height: '50px',\r\n                                        overflowY: 'scroll'\r\n                                    }}\r\n                                    value={panorama.description || ''}\r\n                                    name='description'\r\n                                    onChange={e => this.props.viewModel.onPanoramaDescChange(e, panorama)} />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCollection(collection) {\r\n        const embedCode = `<iframe src=\"${process.env.REACT_APP_VIEWER_URL}/panoramic-viewer?panoramaCollectionId=${collection._id}\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            style=\"border: none;\"\r\n            frameBorder=\"0\"\r\n            allow=\"xr-spatial-tracking\" \r\n            allowFullScreen={true}\r\n            mozallowfullscreen=\"true\"\r\n            webkitallowfullscreen=\"true\"\r\n            />`;\r\n\r\n        return (\r\n            <div style={{ width: '100%', marginTop: '30px' }}>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Collection Name</td>\r\n                            <td style={{ position: 'relative' }}>\r\n                                <input\r\n                                    disabled={!this.state.viewState.hasEditPermission}\r\n                                    style={{ width: '100%' }}\r\n                                    label='Name'\r\n                                    name='name'\r\n                                    value={collection.name || ''}\r\n                                    onChange={e => this.props.viewModel.onCollectionNameChange(e, collection)}\r\n                                />\r\n                                {\r\n                                    this.state.viewState.hasEditPermission &&\r\n                                    <DeleteIcon style={{ position: 'absolute', top: '10px', right: '10px' }} onClick={() => this.props.viewModel.onDeleteCollection(collection)} />\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Description</td>\r\n                            <td>\r\n                                <textarea\r\n                                    disabled={!this.state.viewState.hasEditPermission}\r\n                                    style={{\r\n                                        width: '100%',\r\n                                        height: '50px',\r\n                                        overflowY: 'scroll'\r\n                                    }}\r\n                                    value={collection.description || ''}\r\n                                    name='description'\r\n                                    onChange={e => this.props.viewModel.onCollectionDescChange(e, collection)}\r\n                                />\r\n                            </td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>ID</td>\r\n                            <td style={{ fontSize: 'small', color: '#888' }}>\r\n                                {\r\n                                    collection._id\r\n                                }\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Embed Code</td>\r\n                            <td>\r\n                                <Accordion\r\n                                    expanded={collection?.uiState?.embedCodeVisible}\r\n                                    onChange={this.props.viewModel.onOpenEmbedCode}>\r\n                                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails style={{ backgroundColor: 'white' }}>\r\n                                        <div style={{ padding: '10px' }}>\r\n                                            {\r\n                                                embedCode\r\n                                            }\r\n                                        </div>\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            </td>\r\n                            <td></td>\r\n                        </tr>\r\n                        <tr />\r\n                        <tr>\r\n                            <td style={{ position: 'relative' }}>\r\n                                <Button\r\n                                    disabled={!collection.panoramas.length}\r\n                                    startIcon={<PageviewIcon size='small' />}\r\n                                    variant='contained'\r\n                                    color='primary'\r\n                                    size='small'\r\n                                    style={{ width: '120px' }}\r\n                                    onClick={() => this.props.viewModel.onPreviewClick(collection)} >\r\n                                    Preview\r\n                                </Button>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <div>\r\n                    <div>\r\n                        {\r\n                            !this.state.viewState.collectionLoading &&\r\n                            <Accordion\r\n                                expanded={collection?.uiState?.open}\r\n                                onChange={() => { this.props.viewModel.onOpenCollection(collection) }}>\r\n                                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\r\n                                    {\r\n                                        <h4>Panoramas</h4>\r\n                                    }\r\n                                </AccordionSummary>\r\n                                <AccordionDetails style={{ backgroundColor: 'white', display: 'flex', flexDirection: 'column' }}>\r\n                                    {\r\n                                        collection.panoramas.map((panorama, index) => {\r\n                                            return this.renderPanorama(collection, panorama, index)\r\n                                        })\r\n                                    }\r\n                                </AccordionDetails>\r\n                                <div>\r\n                                    <Button\r\n                                        disabled={!this.state.viewState.hasEditPermission || this.state.viewState.overAssetLimit}\r\n                                        variant='contained'\r\n                                        color='primary'\r\n                                        size='large'\r\n                                        onClick={() => this.props.viewModel.onNewPanorama(collection)}\r\n                                        startIcon={<AddCircle fontSize='large' style={{ color: 'black' }} />} >\r\n                                        New Panorama\r\n                                    </Button>\r\n                                </div>\r\n                            </Accordion>\r\n                        }\r\n                    </div>\r\n                    <CircularProgress style={{ display: this.state.viewState.collectionLoading ? 'block' : 'none', margin: 'auto' }} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCollections() {\r\n        return (\r\n            <Fragment>\r\n\r\n                {\r\n                    this.state.modelState.collections.length ?\r\n                        this.state.modelState.collections.map((col, index) => {\r\n                            return this.renderCollection(col)\r\n                        })\r\n                        :\r\n                        <div style={{ margin: 'auto' }}>You don&apos;t have any collections</div>\r\n                }\r\n            </Fragment >\r\n        );\r\n    }\r\n    render() {\r\n        if (!this.props.viewModel || !this.state.modelState || !this.state.viewState)\r\n            return null;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className='std-page center-page-x center'>\r\n                    <div className='centered-page-box' style={{ width: '100%' }}>\r\n                        {\r\n                            this.state.viewState.uploadLimitReached &&\r\n                            <Alert severity=\"warning\">\r\n                                You have reached your plan storage limit.\r\n                            </Alert>\r\n                        }\r\n                        <LoadingOverlay variant='indeterminate' show={this.state.viewState.showLoadingOverlay}>\r\n                        </LoadingOverlay >\r\n                        <AlertDialog\r\n                            message={this.state.viewState.alertMessage}\r\n                            severity={this.state.viewState.alertSeverity}\r\n                            open={this.state.viewState.alertMessage !== ''}\r\n                            onClose={this.props.viewModel.onAlertDialogClose} />\r\n                        <AlertResponseDialog\r\n                            open={this.state.viewState.deleteDialogOpen}\r\n                            message='Are you sure you want to delete this asset? This operation cannot be undone!'\r\n                            onOk={this.props.viewModel.onDeleteObject}\r\n                            onCancel={this.props.viewModel.onDeleteCancel} />\r\n\r\n                        <h1>Manage 360&#176; Panoramas</h1>\r\n                        {\r\n                            this.renderCollections()\r\n                        }\r\n                        <div style={{ display: 'flex', marginTop: '20px' }}>\r\n                            <Button\r\n                                disabled={!this.state.viewState.hasEditPermission || this.state.viewState.overAssetLimit}\r\n                                variant='contained'\r\n                                color='primary'\r\n                                size='large'\r\n                                onClick={this.props.viewModel.onNewCollection}\r\n                                startIcon={<AddCircle fontSize='large' style={{ color: 'black' }} />} >\r\n                                New Collection\r\n                            </Button>\r\n                            {\r\n                                <Button\r\n                                    disabled={!this.state.viewState.modified}\r\n                                    variant='contained'\r\n                                    color='primary'\r\n                                    size='large'\r\n                                    style={{ margin: 'auto' }}\r\n                                    onClick={this.props.viewModel.onSaveChanges} >\r\n                                    Save changes\r\n                                </Button>\r\n                            }\r\n                        </div>\r\n                        <TexturePickerDialogView ref={this.props.viewModel.texturePicker.updateViewState}\r\n                            viewModel={this.props.viewModel.texturePicker} />\r\n\r\n                    </div>\r\n                </div>\r\n                <Overlay open={this.state.viewState.popOverOpen}>\r\n                    <div style={{ width: '100%', height: '100%' }}>\r\n                        {\r\n                            this.state.viewState.panoramaCollectionId &&\r\n                            <iframe src={`${process.env.REACT_APP_VIEWER_URL}/panoramic-viewer?panoramaCollectionId=${this.state.viewState.panoramaCollectionId}`}\r\n                                width=\"100%\"\r\n                                height=\"100%\"\r\n                                style={{ border: 'none' }}\r\n                                frameBorder=\"0\"\r\n                                allowFullScreen={true}\r\n                                mozallowfullscreen=\"true\"\r\n                                webkitallowfullscreen=\"true\" />\r\n                        }\r\n                    </div>\r\n                    <CloseIcon style={{ position: 'absolute', right: '20px', top: '20px' }} onClick={this.props.viewModel.onClosePreview} />\r\n                </Overlay>\r\n                <Prompt when={true} message='Are you sure you want to leave? Unsaved changes will be lost.' />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nManagePanoramasView.propTypes = {\r\n    viewModel: PropTypes.object\r\n};","export default class TexturePickerDialogViewModel {\r\n    constructor(model) {\r\n        this.model = model;\r\n\r\n        this.model.okButtonDisabled = false;\r\n        this.model.uploadDisabled = false;\r\n\r\n        this.onOk = this.onOk.bind(this);\r\n        this.onCancel = this.onCancel.bind(this);\r\n        this.onSelectChange = this.onSelectChange.bind(this);\r\n        this.handleImageUpload = this.handleImageUpload.bind(this);\r\n        this.onDeleteImage = this.onDeleteImage.bind(this);\r\n        this.updateViewState = this.updateViewState.bind(this);\r\n    }\r\n\r\n    show(show = true) {\r\n        this.model.open = show;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onOk() {\r\n        this.show(false);\r\n\r\n       // if(this.selectedTile) {\r\n            this.onTextureSelectedHandler && this.onTextureSelectedHandler(this.selectedTile);\r\n      //  }\r\n\r\n        this.selectedTile = null;\r\n        this.model.selectedTileId = null;\r\n    }\r\n\r\n    onCancel() {\r\n        this.show(false);\r\n    }\r\n\r\n    onSelectChange(tile) {\r\n        if(tile.isLoading)\r\n            return;\r\n\r\n        if(this.selectedTile === tile) {\r\n            this.selectedTile = null;\r\n            this.model.selectedTileId = null;\r\n        }  \r\n        else {\r\n            this.selectedTile = tile;\r\n            this.model.selectedTileId = tile.id;\r\n        }\r\n        \r\n        this.updateViewState();\r\n    }\r\n\r\n    async handleImageUpload(file) {\r\n        if(this.onServerUpload)\r\n        {\r\n            // stop user from doing anything\r\n            this.model.okButtonDisabled = true;\r\n            this.model.uploadDisabled = true;\r\n            this.model.deleteEnabled = false;\r\n\r\n            // add a dummy loading tile\r\n            this.model.imageTiles.push({\r\n                id: file.name,\r\n                img: `${process.env.REACT_APP_FILE_SERVER_URL}/files/images/loading.gif`,\r\n                title: file.name,\r\n                isLoading: true\r\n            });\r\n\r\n            this.updateViewState();\r\n\r\n            await this.onServerUpload(file);\r\n\r\n            this.model.okButtonDisabled = false;\r\n            this.model.uploadDisabled = false;\r\n            this.model.deleteEnabled = true;\r\n\r\n            this.updateViewState();\r\n\r\n            this.model.uploading = false;\r\n        }\r\n    }\r\n\r\n    async onDeleteImage(tile) {\r\n        if(tile) {\r\n            if(this.onServerDelete) {\r\n\r\n                this.model.okButtonDisabled = true;\r\n                this.model.uploadDisabled = true;\r\n                this.model.deleteEnabled = false;\r\n    \r\n                this.selectedTile = null;\r\n                this.model.selectedTileId = null;\r\n\r\n                const img = tile.img;\r\n\r\n                tile.img = `${process.env.REACT_APP_FILE_SERVER_URL}/files/images/loading.gif`;\r\n\r\n                this.onImageDeletedHandler && this.onImageDeletedHandler(img);\r\n                                \r\n                this.updateViewState();\r\n                    \r\n                await this.onServerDelete(tile);\r\n      \r\n                this.model.okButtonDisabled = false;\r\n                this.model.uploadDisabled = false;\r\n                this.model.deleteEnabled = true;\r\n    \r\n                this.updateViewState();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateViewState(view = null) {\r\n        if(view)\r\n            this.view = view;\r\n\r\n        if(this.view)\r\n            this.view.setState({...this.model});\r\n    }\r\n}","import TexturePickerDialogViewModel from \"members/features/ezyvueStudio/features/texturePicker/texturePickerDialogViewModel\";\r\nimport Services from \"ezyvuecore/services/services\";\r\nimport AuthManager from \"ezyvuecore/core/auth/authManager\";\r\nimport { Permissions } from \"ezyvuecore/models/user\";\r\n\r\nexport default class ManagePanoramasViewModel {\r\n    constructor(account, model) {\r\n        this.model = model;\r\n        this.account = account;\r\n\r\n        this.viewState = {\r\n            modified: false,\r\n            alertMessage: '',\r\n            alertSeverity: 'error',\r\n            showLoadingOverlay: false,\r\n            popOverOpen: false,\r\n            panoramaCollectionId: '',\r\n        };\r\n\r\n        this.modelState = {\r\n            collections: []\r\n        };\r\n\r\n        this.onNewCollection = this.onNewCollection.bind(this);\r\n        this.onOpenCollection = this.onOpenCollection.bind(this);\r\n        this.updateViewState = this.updateViewState.bind(this);\r\n        this.onNewPanorama = this.onNewPanorama.bind(this);\r\n        this.onCollectionDescChange = this.onCollectionDescChange.bind(this);\r\n        this.onCollectionNameChange = this.onCollectionNameChange.bind(this);\r\n        this.onPanoramaDescChange = this.onCollectionDescChange.bind(this);\r\n        this.onPanoramaNameChange = this.onPanoramaNameChange.bind(this);\r\n        this.onSaveChanges = this.onSaveChanges.bind(this);\r\n        this.onAlertDialogClose = this.onAlertDialogClose.bind(this);\r\n        this.onClosePreview = this.onClosePreview.bind(this);\r\n        this.onPreviewClick = this.onPreviewClick.bind(this);\r\n        this.onOpenEmbedCode = this.onOpenEmbedCode.bind(this);\r\n        this.onDeletePanorama = this.onDeletePanorama.bind(this);\r\n        this.onDeleteCancel = this.onDeleteCancel.bind(this);\r\n        this.onDeleteObject = this.onDeleteObject.bind(this);\r\n        this.deletePanorama = this.deletePanorama.bind(this);\r\n        this.deleteCollection = this.deleteCollection.bind(this);\r\n\r\n        // create texture picker\r\n        this.texturePickerModel = {\r\n            open: false,\r\n            imageTiles: [],\r\n            selectedTileId: null,\r\n            deleteEnabled: true,\r\n            overAssetLimit: false,\r\n            noTileMenu: true\r\n        };\r\n\r\n        this.setPermissions();\r\n\r\n        this.texturePicker = new TexturePickerDialogViewModel(this.texturePickerModel);\r\n\r\n        this.texturePicker.onServerUpload = async (file) => {\r\n            try {\r\n                let resp;\r\n\r\n                if (this.uploadContext.panorama.imageUrl) {\r\n                    resp = await this.deleteImage(this.uploadContext.collection, this.uploadContext.panorama, this.uploadContext.panorama.imageUrl);\r\n                    if (!resp.ok)\r\n                        throw 'failed to delete existing image';\r\n                }\r\n\r\n                resp = await this.uploadImage(file, this.uploadContext.collection, this.uploadContext.panorama);\r\n                if (!resp.ok)\r\n                    throw 'failed to upload image';\r\n\r\n                this.uploadContext.panorama.imageUrl = file.name;\r\n\r\n                resp = await Services.panoramaService.updatePanorama(this.uploadContext.panorama);\r\n                if (!resp.ok) {\r\n                    this.deleteImage(this.uploadContext.collection, this.uploadContext.panorama, this.uploadContext.panorama.imageUrl);\r\n                    throw 'failed to update panorama';\r\n                }\r\n\r\n                this.texturePickerModel.imageTiles = [\r\n                    this.getImageTile(this.uploadContext.collection, this.uploadContext.panorama)\r\n                ];\r\n\r\n                this.texturePicker.updateViewState();\r\n\r\n                this.setPermissions();\r\n\r\n                this.displayMessage('Image uploaded');\r\n            }\r\n            catch (e) {\r\n                this.texturePicker.show(false);\r\n\r\n                console.log(e);\r\n\r\n                this.displayError('Failed to upload texture. Check your connection and try again.');\r\n            }\r\n        }\r\n    }\r\n\r\n    async setPermissions() {        \r\n        const cookie = AuthManager.getAuthCookie();\r\n\r\n        const status = await Services.accountService.getStatus(cookie.storeAccountId);\r\n\r\n        const editPerm = cookie.permissions.find(perm => perm.PermissionId === Permissions.CREATE_UPDATE_ASSET);\r\n\r\n        this.viewState.hasEditPermission = editPerm && editPerm.Granted;\r\n        this.viewState.overAssetLimit = !status.underAssetLimit;\r\n        \r\n        this.updateViewState();\r\n    }\r\n\r\n    getImageTile(collection, panorama) {\r\n        return {\r\n            id: panorama,\r\n            img: this.getImageUrl(collection, panorama, panorama.imageUrl),\r\n            title: panorama.imageUrl,\r\n            filename: panorama.imageUrl\r\n        }\r\n    }\r\n\r\n    getImageUrl(collection, panorama, filename) {\r\n        if (!filename)\r\n            return `${process.env.REACT_APP_FILE_SERVER_URL}/files/images/upload.jpg`;\r\n\r\n        return `${process.env.REACT_APP_FILE_SERVER_URL}/files/${this.getImagePath(collection, panorama, filename)}`;\r\n    }\r\n\r\n    getImagePath(collection, panorama, filename) {\r\n        return `${this.account.AssetFolderName}/panoramas/${collection.assetFolder}/${panorama.assetFolder}/${filename}`;\r\n    }\r\n\r\n    async deleteImage(collection, panorama, filename) {\r\n        return Services.fileService.deleteFile(this.account._id, this.getImagePath(collection, panorama, filename));\r\n    }\r\n\r\n    async uploadImage(file, collection, panorama) {\r\n        const rootPath = `${this.account.AssetFolderName}/panoramas/${collection.assetFolder}/${panorama.assetFolder}`;\r\n\r\n        return Services.fileService.uploadFiles(this.account._id, rootPath, [file.name], [file]);\r\n    }\r\n\r\n    displayError(msg) {\r\n        this.viewState.alertMessage = msg;\r\n        this.viewState.alertSeverity = 'error'\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    displayMessage(msg) {\r\n        this.viewState.alertMessage = msg;\r\n        this.viewState.alertSeverity = 'success'\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onAlertDialogClose() {\r\n        this.displayError('');\r\n    }\r\n\r\n    async onNewCollection() {\r\n        const folderName = Date.now().toString();\r\n        const folderPath = `${this.account.AssetFolderName}/panoramas/${folderName}`;\r\n\r\n        let resp = await Services.fileService.createFolder(this.account._id, folderPath);\r\n        if (!resp.ok) {\r\n            this.displayError('Error creating collection. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        const collection = {\r\n            accountId: this.account._id,\r\n            assetFolder: folderName,\r\n            assetFolderPath: `${this.account.AssetFolderName}/panoramas/${folderName}`,\r\n            name: 'Untiltled',\r\n            description: '',\r\n            panoramas: []\r\n        }\r\n\r\n        resp = await Services.panoramaService.postPanoramaCollection(collection);\r\n        if (!resp.ok) {\r\n            this.displayError('Error creating collection. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        this.model.collections = await Services.panoramaService.getCollections();\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    async onDeletePanorama(collection, panorama) {\r\n        this.deleteContext = {\r\n            deleteMethod: this.deletePanorama,\r\n            collection: collection,\r\n            panorama: panorama\r\n        };\r\n\r\n        this.viewState.deleteDialogOpen = true;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    async onDeleteCollection(collection) {\r\n        this.deleteContext = {\r\n            deleteMethod: this.deleteCollection,\r\n            collection: collection,\r\n        };\r\n\r\n        this.viewState.deleteDialogOpen = true;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onDeleteObject() {\r\n        this.deleteContext.deleteMethod(this.deleteContext.collection, this.deleteContext.panorama);\r\n\r\n        this.viewState.deleteDialogOpen = false;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onDeleteCancel() {\r\n        this.viewState.deleteDialogOpen = false;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    async deletePanorama(collection, panorama) {\r\n        let resp = await Services.panoramaService.deletePanorama(panorama._id);\r\n        if (!resp.ok) {\r\n            this.displayError('Error deleting panorama. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        collection.panoramas  = collection.panoramas.filter(p => p._id !== panorama._id);\r\n\r\n        resp = await Services.fileService.deleteFolder(this.account._id, panorama.assetFolderPath);\r\n        if (!resp.ok) {\r\n            this.displayError('Error deleting panorama folder. Check your connection and try again.')\r\n            return;\r\n        }\r\n        \r\n        this.setPermissions();\r\n\r\n        this.displayMessage('Panormama deleted');\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    async deleteCollection(collection) {\r\n        let resp = await Services.panoramaService.deletePanoramaCollection(collection._id);\r\n        if (!resp.ok) {\r\n            this.displayError('Error deleting collection. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        this.model.collections = this.model.collections.filter(c => c._id !== collection._id);\r\n\r\n        resp = await Services.fileService.deleteFolder(this.account._id, collection.assetFolderPath);\r\n        if (!resp.ok) {\r\n            this.displayError('Error deleting collection folder. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        this.setPermissions();\r\n\r\n        this.displayMessage('Collection deleted');\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    async onNewPanorama(collection) {\r\n        const folderName = Date.now().toString();\r\n        const folderPath = `${this.account.AssetFolderName}/panoramas/${collection.assetFolder}/${folderName}`;\r\n\r\n        let resp = await Services.fileService.createFolder(this.account._id, folderPath);\r\n        if (!resp.ok) {\r\n            this.displayError('Error creating collection. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        let panorama = {\r\n            collectionId: collection._id,\r\n            assetFolder: folderName,\r\n            assetFolderPath: `${this.account.AssetFolderName}/panoramas/${collection.assetFolder}/${folderName}`,\r\n            imageUrl: '',\r\n            name: 'Untiltled',\r\n            description: '',\r\n        }\r\n\r\n        const id = await Services.panoramaService.postPanorama(panorama);\r\n        if (!id) {\r\n            this.displayError('Error creating collection. Check your connection and try again.')\r\n            return;\r\n        }\r\n\r\n        panorama = await Services.panoramaService.getPanoramaById(id);\r\n\r\n        collection.panoramas.push(panorama);\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onOpenEmbedCode(panorama) {\r\n        if(!panorama.uiState)\r\n            panorama.uiState = { embedCodeVisible: false };\r\n\r\n        panorama.uiState.embedCodeVisible = !panorama.uiState.embedCodeVisible;\r\n \r\n        this.updateViewState();\r\n    }\r\n\r\n    async onOpenCollection(collection) {\r\n        try {\r\n\r\n            if(!collection.uiState)\r\n                collection.uiState = {\r\n                    open: false\r\n                };\r\n\r\n            collection.uiState.open = ! collection.uiState.open;\r\n\r\n            if (!collection.panoramas.length) {\r\n\r\n                this.viewState.collectionLoading = true;\r\n\r\n                this.updateViewState();\r\n\r\n                collection.panoramas = await Services.panoramaService.getPanoramasByCollectionId(collection._id);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.displayError('Error loading collection. Check your connection and try again.')\r\n        }\r\n        finally {\r\n            this.viewState.collectionLoading = false;\r\n\r\n            this.updateViewState();\r\n        }\r\n    }\r\n\r\n    onPreviewClick(collection) {\r\n        this.viewState.popOverOpen = true;\r\n        this.viewState.panoramaCollectionId = collection._id;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onClosePreview() {\r\n        this.viewState.popOverOpen = false;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onCollectionNameChange(e, collection) {\r\n        collection.name = e.target.value;\r\n\r\n        this.viewState.modified = true;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onCollectionDescChange(e, collection) {\r\n        collection.description = e.target.value;\r\n\r\n        this.viewState.modified = true;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onPanoramaNameChange(e, panorama) {\r\n        panorama.name = e.target.value;\r\n\r\n        this.viewState.modified = true;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onPanoramaDescChange(e, panorama) {\r\n        panorama.description = e.target.value;\r\n\r\n        this.viewState.modified = true;\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    onImageClick(collection, panorama) {\r\n        this.uploadContext = {\r\n            collection: collection,\r\n            panorama: panorama\r\n        }\r\n\r\n        if (panorama.imageUrl)\r\n            this.texturePickerModel.imageTiles = [\r\n                this.getImageTile(this.uploadContext.collection, this.uploadContext.panorama)\r\n            ];\r\n        else\r\n            this.texturePickerModel.imageTiles = [];\r\n\r\n        this.texturePicker.show(true);\r\n\r\n        this.updateViewState();\r\n    }\r\n\r\n    async onSaveChanges() {\r\n        await Services.panoramaService.updateCollections(this.model.collections);\r\n\r\n        this.displayMessage('Changes saved.')\r\n    }\r\n\r\n    updateViewState(view = null) {\r\n        if (view)\r\n            this.view = view;\r\n\r\n        this.view && this.view.setState({\r\n            viewState: { ...this.viewState },\r\n            modelState: { ...this.model }\r\n        });\r\n    }\r\n}","import AuthManager from \"ezyvuecore/core/auth/authManager\";\r\nimport LoadingOverlay from \"common/loading/loadingOverlay\";\r\nimport React, { Fragment } from \"react\";\r\nimport Services from \"ezyvuecore/services/services\";\r\nimport ManagePanoramasView from \"./managePanoramasView\";\r\nimport ManagePanoramasViewModel from \"./managePanoramasViewModel\";\r\n\r\nexport default class ManagePanoramas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showLoadingOverlay: true\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.model = {};\r\n\r\n        this.model.collections = await Services.panoramaService.getCollections();\r\n\r\n        const account = await Services.accountService.getById(AuthManager.getAuthCookie().storeAccountId);\r\n\r\n        this.viewModel = new ManagePanoramasViewModel(account, this.model);\r\n\r\n        this.forceUpdate();\r\n\r\n        this.setState({ showLoadingOverlay: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <LoadingOverlay variant='indeterminate' show={this.state.showLoadingOverlay} style={{ height: '100%' }}>\r\n                </LoadingOverlay>\r\n                <ManagePanoramasView viewModel={this.viewModel} ref={this.viewModel?.updateViewState} />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n"],"names":["CircularProgressWithLabel","props","_jsxs","Box","position","display","children","_jsx","CircularProgress","_objectSpread","variant","top","left","bottom","right","alignItems","justifyContent","Typography","component","color","style","fontSize","concat","Math","round","value","useStyles","makeStyles","backdrop","zIndex","backgroundColor","LoadingOverlay","classes","Fragment","Backdrop","className","open","show","transitionDuration","exit","enter","appear","textAlign","size","defaultProps","AlertDialog","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","prevProps","_this","this","setTimeout","onClose","_this2","minWidth","maxWidth","Alert","severity","message","React","AlertResponseDialog","Dialog","fullWidth","DialogContent","WarningIcon","paddingTop","dangerouslySetInnerHTML","__html","DialogActions","Button","onClick","onOk","okText","onCancel","cancelText","Permissions","MEMBER_ACCESS","CREATE_UPDATE_ASSET","DELETE_ASSET","ADMIN_ACCESS","MASTER_ADMIN_ACCESS","COUNT","TitleHeader","showCloseIcon","CloseIcon","alignSelf","title","FullScreenDialog","fullScreen","handleCancel","showHeader","renderContent","renderFixedContent","autoFocus","disabled","okButtonDisabled","handleOk","okButtonName","showCancelButton","cancelButtonName","ContextMenu","call","state","mouseX","mouseY","handleClick","bind","_assertThisInitialized","handleClose","event","preventDefault","enabled","setState","clientX","clientY","onContextMenu","cursor","Menu","keepMounted","menuItems","anchorReference","anchorPosition","undefined","map","item","i","MenuItem","target","text","ImageGrid","tile","disableTileClickEvents","handleSelectionChanged","onTileClicked","width","tileWidth","height","tileHeight","flexDirection","tiles","index","img","hasContextMenu","contextMenuItems","margin","tileMargin","marginBottom","titleUnderImage","boxShadow","tileShadow","renderTileContent","colorTiles","border","id","selectedTileId","borderRadius","tileBorderRadius","src","alt","showLabels","labelFontSize","titleColour","showOnAddItem","addItemImageSrc","onAddNewClick","theme","root","spacing","input","UploadButton","_useState","useState","_useState2","_slicedToArray","selectedFile","setSelectedFile","accept","type","onChange","e","files","handleUpload","document","getElementById","TexturePickerDialogView","deleteDialogOpen","onDelete","deleteImage","deleteEnabled","noTileMenu","Tooltip","DeleteIcon","viewModel","onDeleteImage","imageToDelete","_this3","imageTiles","onSelectChange","renderTileMenu","uploadDisabled","overAssetLimit","handleImageUpload","Boolean","Overlay","ManagePanoramasView","viewState","modified","alertMessage","showLoadingOverlay","expandedPanel","popOverOpen","panoramaId","modelState","collections","collection","panorama","loading","getImageUrl","imageUrl","onImageClick","hasEditPermission","onDeletePanorama","label","name","onPanoramaNameChange","overflowY","description","onPanoramaDescChange","_collection$uiState","_collection$uiState2","embedCode","process","_id","marginTop","onCollectionNameChange","onDeleteCollection","onCollectionDescChange","Accordion","expanded","uiState","embedCodeVisible","onOpenEmbedCode","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","padding","panoramas","length","startIcon","PageviewIcon","onPreviewClick","collectionLoading","onOpenCollection","renderPanorama","onNewPanorama","AddCircle","_this4","col","renderCollection","uploadLimitReached","alertSeverity","onAlertDialogClose","onDeleteObject","onDeleteCancel","renderCollections","onNewCollection","onSaveChanges","ref","texturePicker","updateViewState","panoramaCollectionId","frameBorder","allowFullScreen","mozallowfullscreen","webkitallowfullscreen","onClosePreview","Prompt","when","TexturePickerDialogViewModel","model","onTextureSelectedHandler","selectedTile","isLoading","_handleImageUpload","_asyncToGenerator","_regeneratorRuntime","mark","_callee","file","wrap","_context","prev","next","onServerUpload","push","uploading","stop","_x","_onDeleteImage","_callee2","_context2","onServerDelete","onImageDeletedHandler","_x2","view","ManagePanoramasViewModel","account","deletePanorama","deleteCollection","texturePickerModel","setPermissions","_ref","uploadContext","sent","ok","uploadImage","Services","panoramaService","updatePanorama","getImageTile","displayMessage","t0","console","log","displayError","_setPermissions","cookie","status","editPerm","AuthManager","getAuthCookie","accountService","getStatus","storeAccountId","permissions","find","perm","PermissionId","Granted","underAssetLimit","filename","getImagePath","AssetFolderName","assetFolder","_deleteImage","_callee3","_context3","abrupt","fileService","deleteFile","_x3","_x4","_uploadImage","_callee4","rootPath","_context4","uploadFiles","_x5","_x6","_x7","msg","_onNewCollection","_callee5","folderName","folderPath","_context5","Date","now","toString","createFolder","accountId","assetFolderPath","postPanoramaCollection","getCollections","_onDeletePanorama","_callee6","_context6","deleteContext","deleteMethod","_x8","_x9","_onDeleteCollection","_callee7","_context7","_x10","_deletePanorama","_callee8","_context8","filter","p","deleteFolder","_x11","_x12","_deleteCollection","_callee9","_context9","deletePanoramaCollection","c","_x13","_onNewPanorama","_callee10","_context10","collectionId","postPanorama","getPanoramaById","_x14","_onOpenCollection","_callee11","_context11","getPanoramasByCollectionId","finish","_x15","_onSaveChanges","_callee12","_context12","updateCollections","ManagePanoramas","_componentDidMount","getById","forceUpdate","_this$viewModel"],"sourceRoot":""}