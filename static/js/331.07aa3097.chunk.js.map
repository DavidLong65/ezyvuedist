{"version":3,"file":"static/js/331.07aa3097.chunk.js","mappings":"gNAUMA,EAAS,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAEd,SAAAA,EAAaK,GAAW,IAADC,EAIG,OAJHC,EAAAA,EAAAA,GAAA,KAAAP,IAEtBM,EAAAH,EAAAK,KAAA,KAAOH,IAEFI,cAAe,EAAKH,CAE1B,CA6aC,OA7aAI,EAAAA,EAAAA,GAAAV,EAAA,EAAAW,IAAA,OAAAC,MAED,SAAMC,EAAKC,EAAQC,EAAYC,GAE9B,IAAMC,EAAQC,KAERC,EAAS,IAAIC,EAAAA,IAAYH,EAAMZ,SACrCc,EAAOE,QAASJ,EAAMK,MACtBH,EAAOI,gBAAiB,eACxBJ,EAAOK,iBAAkBP,EAAMQ,eAC/BN,EAAOO,mBAAoBT,EAAMU,iBACjCR,EAAOS,KAAMf,GAAK,SAAWgB,GAE5B,IAECf,EAAQG,EAAMa,MAAOD,GAEtB,CAAE,MAAQE,GAEJf,EAEJA,EAASe,GAITC,QAAQC,MAAOF,GAIhBd,EAAMZ,QAAQ6B,UAAWrB,EAE1B,CAED,GAAGE,EAAYC,EAEhB,GAAC,CAAAL,IAAA,QAAAC,MAED,SAAOiB,GAqKN,IAAMM,GAAW,IAAIC,aAAcC,OAAQR,GAIrCS,EAhHN,SAAsBT,GAErB,IAAMS,EAAY,CAAC,EACbC,EAAUV,EAAKW,OAAQ,wBACvBC,EAAU,uBAAuBC,KAAMb,EAAKc,MAAOJ,EAAU,IAyDnE,GAvDAD,EAAUT,KAAOY,EAAS,GAC1BH,EAAUM,UAAYH,EAAS,GAAII,OAASN,EAC5CD,EAAUQ,IAAMjB,EAAKc,MAAO,EAAGL,EAAUM,WAIzCN,EAAUQ,IAAMR,EAAUQ,IAAIC,QAAS,QAAS,IAIhDT,EAAUU,QAAU,gBAAgBN,KAAMJ,EAAUQ,KACpDR,EAAUW,OAAS,eAAeP,KAAMJ,EAAUQ,KAClDR,EAAUY,KAAO,aAAaR,KAAMJ,EAAUQ,KAC9CR,EAAUa,KAAO,aAAaT,KAAMJ,EAAUQ,KAC9CR,EAAUc,MAAQ,cAAcV,KAAMJ,EAAUQ,KAChDR,EAAUe,MAAQ,cAAcX,KAAMJ,EAAUQ,KAChDR,EAAUgB,OAAS,eAAeZ,KAAMJ,EAAUQ,KAClDR,EAAUiB,UAAY,kBAAkBb,KAAMJ,EAAUQ,KACxDR,EAAUkB,OAAS,eAAed,KAAMJ,EAAUQ,KAIvB,OAAtBR,EAAUU,UACdV,EAAUU,QAAUS,WAAYnB,EAAUU,QAAS,KAEpDV,EAAUW,OAAgC,OAArBX,EAAUW,OAAoBX,EAAUW,OAAQ,GAAIS,MAAO,KAAQ,GAEhE,OAAnBpB,EAAUa,OACdb,EAAUa,KAAOb,EAAUa,KAAM,GAAIO,MAAO,MAEpB,OAApBpB,EAAUe,QACdf,EAAUe,MAAQM,SAAUrB,EAAUe,MAAO,KAEpB,OAArBf,EAAUgB,SACdhB,EAAUgB,OAASK,SAAUrB,EAAUgB,OAAQ,KAEnB,OAAxBhB,EAAUiB,YACdjB,EAAUiB,UAAYjB,EAAUiB,UAAW,IAElB,OAArBjB,EAAUkB,SACdlB,EAAUkB,OAASG,SAAUrB,EAAUkB,OAAQ,GAAK,KAE3B,OAArBlB,EAAUkB,SACdlB,EAAUkB,OAASlB,EAAUe,MAAQf,EAAUgB,QAExB,OAAnBhB,EAAUY,OAEdZ,EAAUY,KAAOZ,EAAUY,KAAM,GAAIQ,MAAO,KAAME,KAAK,SAAWC,GAEjE,OAAOF,SAAUE,EAAG,GAErB,KAIwB,OAApBvB,EAAUc,MAEdd,EAAUc,MAAQd,EAAUc,MAAO,GAAIM,MAAO,KAAME,KAAK,SAAWC,GAEnE,OAAOF,SAAUE,EAAG,GAErB,QAEM,CAENvB,EAAUc,MAAQ,GAElB,IAAM,IAAIU,EAAI,EAAGC,EAAIzB,EAAUW,OAAOJ,OAAQiB,EAAIC,EAAGD,IAEpDxB,EAAUc,MAAMY,KAAM,EAIxB,CAEA1B,EAAU2B,OAAS,CAAC,EAIpB,IAFA,IAAIC,EAAU,EAEJJ,EAAI,EAAGC,EAAIzB,EAAUW,OAAOJ,OAAQiB,EAAIC,EAAGD,IAE5B,UAAnBxB,EAAUT,KAEdS,EAAU2B,OAAQ3B,EAAUW,OAAQa,IAAQA,GAI5CxB,EAAU2B,OAAQ3B,EAAUW,OAAQa,IAAQI,EAC5CA,GAAW5B,EAAUY,KAAMY,GAAMxB,EAAUc,MAAOU,IAUpD,OAFAxB,EAAU6B,QAAUD,EAEb5B,CAER,CAMkB8B,CAAajC,GAIzBkC,EAAW,GACXC,EAAS,GACTC,EAAQ,GACRC,EAAY,GACZC,EAAQ,GAId,GAAwB,UAAnBnC,EAAUT,KAMd,IAJA,IAAMoC,EAAS3B,EAAU2B,OAEnBS,EADUvC,EAASQ,MAAOL,EAAUM,WACpBc,MAAO,MAEnBI,EAAI,EAAGC,EAAIW,EAAM7B,OAAQiB,EAAIC,EAAGD,IAEzC,GAAoB,KAAfY,EAAOZ,GAAZ,CAEA,IAAMa,EAAOD,EAAOZ,GAAIJ,MAAO,KAU/B,QARkBkB,IAAbX,EAAOJ,IAEXQ,EAASL,KAAMP,WAAYkB,EAAMV,EAAOJ,KACxCQ,EAASL,KAAMP,WAAYkB,EAAMV,EAAOY,KACxCR,EAASL,KAAMP,WAAYkB,EAAMV,EAAOa,WAIrBF,IAAfX,EAAOc,IAAoB,CAE/B,IAAMC,EAAkB1C,EAAUW,OAAOgC,WAAW,SAAEC,GAAK,MAAgB,QAAVA,CAAe,IAC1EC,EAAW7C,EAAUa,KAAM6B,GAE3BI,EAAQ3B,WAAYkB,EAAMV,EAAOc,MACnCA,EAAMK,EAEV,GAAkB,MAAbD,EAAmB,CAIvB,IAAME,EAAO,IAAIC,aAAc,GAC/BD,EAAM,GAAMD,EACZL,EAAM,IAAIQ,WAAYF,EAAKG,QAAU,EAEtC,CAEA,IAAMC,EAAMV,GAAO,GAAO,IACpBW,EAAMX,GAAO,EAAM,IACnBY,EAAMZ,GAAO,EAAM,IACzBR,EAAMP,KAAMyB,EAAI,IAAKC,EAAI,IAAKC,EAAI,IAEnC,MAEyBf,IAApBX,EAAO2B,WAEXtB,EAAON,KAAMP,WAAYkB,EAAMV,EAAO2B,YACtCtB,EAAON,KAAMP,WAAYkB,EAAMV,EAAO4B,YACtCvB,EAAON,KAAMP,WAAYkB,EAAMV,EAAO6B,kBAIblB,IAArBX,EAAOO,WAEXA,EAAUR,KAAMP,WAAYkB,EAAMV,EAAOO,kBAIpBI,IAAjBX,EAAOQ,OAEXA,EAAMT,KAAML,SAAUgB,EAAMV,EAAOQ,QArDH,CAmEnC,GAAwB,sBAAnBnC,EAAUT,KAUd,IARA,IAAMkE,EAAQ,IAAIC,YAAanE,EAAKc,MAAOL,EAAUM,UAAWN,EAAUM,UAAY,IAChFqD,EAAiBF,EAAO,GACxBG,EAAmBH,EAAO,GAC1BI,EAjQP,SAAwBC,EAAQC,GAE/B,IAIIC,EACAC,EACAC,EANEC,EAAWL,EAAOvD,OAClB6D,EAAU,IAAIC,WAAYN,GAC5BO,EAAQ,EACRC,EAAS,EAIb,GAGC,IADAP,EAAOF,EAAQQ,MACD,GAAW,CAGxB,GAAKC,KADLP,EACqBD,EAAY,MAAM,IAAIS,MAAO,qCAClD,GAAKF,EAAQN,EAAOG,EAAW,MAAM,IAAIK,MAAO,2BAChD,GAECJ,EAASG,KAAcT,EAAQQ,aAEnBN,EAEd,KAAO,CAIN,GAFAC,EAAMD,GAAQ,EACdE,EAAMK,IAAoB,GAAPP,IAAiB,GAAM,EACrCM,GAASH,EAAW,MAAM,IAAIK,MAAO,2BAC1C,GAAa,IAARP,IAEJA,GAAOH,EAAQQ,KACVA,GAASH,GAAW,MAAM,IAAIK,MAAO,2BAK3C,GADAN,GAAOJ,EAAQQ,KACVC,EAASN,EAAM,EAAIF,EAAY,MAAM,IAAIS,MAAO,qCACrD,GAAKN,EAAM,EAAI,MAAM,IAAIM,MAAO,2BAChC,GAAKN,GAAOK,EAAS,MAAM,IAAIC,MAAO,2BACtC,GAECJ,EAASG,KAAcH,EAASF,WAEd,IAAND,EAEd,QAESK,EAAQH,GAElB,OAAOC,CAER,CA8MsBK,CAAe,IAAIJ,WAAY9E,EAAMS,EAAUM,UAAY,EAAGqD,GAAkBC,GAC/Fc,EAAW,IAAIC,SAAUd,EAAaX,QAEtCvB,EAAS3B,EAAU2B,OAEfH,EAAI,EAAGA,EAAIxB,EAAUkB,OAAQM,IAAO,CAE7C,QAAkBc,IAAbX,EAAOJ,EAAkB,CAE7B,IAAMqD,EAAS5E,EAAUW,OAAOkE,QAAS,KACnCC,EAAS9E,EAAUW,OAAOkE,QAAS,KACnCE,EAAS/E,EAAUW,OAAOkE,QAAS,KACzC9C,EAASL,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAOJ,EAAMvB,EAAUY,KAAMgE,GAAWpD,EAAG5C,KAAKT,eACzG4D,EAASL,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAOY,EAAMvC,EAAUY,KAAMkE,GAAWtD,EAAG5C,KAAKT,eACzG4D,EAASL,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAOa,EAAMxC,EAAUY,KAAMmE,GAAWvD,EAAG5C,KAAKT,cAE1G,CAEA,QAAoBmE,IAAfX,EAAOc,IAAoB,CAE/B,IAAMwC,EAAWjF,EAAUW,OAAOkE,QAAS,OAC3C5C,EAAMP,KAAMgD,EAASQ,SAAYlF,EAAUkB,OAASS,EAAOc,IAAQzC,EAAUY,KAAMqE,GAAazD,EAAI,GAAM,KAC1GS,EAAMP,KAAMgD,EAASQ,SAAYlF,EAAUkB,OAASS,EAAOc,IAAQzC,EAAUY,KAAMqE,GAAazD,EAAI,GAAM,KAC1GS,EAAMP,KAAMgD,EAASQ,SAAYlF,EAAUkB,OAASS,EAAOc,IAAQzC,EAAUY,KAAMqE,GAAazD,EAAI,GAAM,IAE3G,CAEA,QAAyBc,IAApBX,EAAO2B,SAAyB,CAEpC,IAAMsB,EAAS5E,EAAUW,OAAOkE,QAAS,YACnCC,EAAS9E,EAAUW,OAAOkE,QAAS,YACnCE,EAAS/E,EAAUW,OAAOkE,QAAS,YACzC7C,EAAON,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAO2B,SAAatD,EAAUY,KAAMgE,GAAWpD,EAAG5C,KAAKT,eAC9G6D,EAAON,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAO4B,SAAavD,EAAUY,KAAMkE,GAAWtD,EAAG5C,KAAKT,eAC9G6D,EAAON,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAO6B,SAAaxD,EAAUY,KAAMmE,GAAWvD,EAAG5C,KAAKT,cAE/G,CAEA,QAA0BmE,IAArBX,EAAOO,UAA0B,CAErC,IAAMiD,EAAiBnF,EAAUW,OAAOkE,QAAS,aACjD3C,EAAUR,KAAMgD,EAASM,WAAchF,EAAUkB,OAASS,EAAOO,UAAclC,EAAUY,KAAMuE,GAAmB3D,EAAG5C,KAAKT,cAE3H,CAEA,QAAsBmE,IAAjBX,EAAOQ,MAAsB,CAEjC,IAAMiD,EAAapF,EAAUW,OAAOkE,QAAS,SAC7C1C,EAAMT,KAAMgD,EAASW,SAAYrF,EAAUkB,OAASS,EAAOQ,MAAUnC,EAAUY,KAAMwE,GAAe5D,EAAG5C,KAAKT,cAE7G,CAED,CAMD,GAAwB,WAAnB6B,EAAUT,KAKd,IAHA,IAAMmF,EAAW,IAAIC,SAAUpF,EAAMS,EAAUM,WACzCqB,EAAS3B,EAAU2B,OAEfH,EAAI,EAAG8D,EAAM,EAAG9D,EAAIxB,EAAUkB,OAAQM,IAAM8D,GAAOtF,EAAU6B,aAEpDS,IAAbX,EAAOJ,IAEXQ,EAASL,KAAMgD,EAASM,WAAYM,EAAM3D,EAAOJ,EAAG3C,KAAKT,eACzD4D,EAASL,KAAMgD,EAASM,WAAYM,EAAM3D,EAAOY,EAAG3D,KAAKT,eACzD4D,EAASL,KAAMgD,EAASM,WAAYM,EAAM3D,EAAOa,EAAG5D,KAAKT,qBAItCmE,IAAfX,EAAOc,MAEXR,EAAMP,KAAMgD,EAASQ,SAAUI,EAAM3D,EAAOc,IAAM,GAAM,KACxDR,EAAMP,KAAMgD,EAASQ,SAAUI,EAAM3D,EAAOc,IAAM,GAAM,KACxDR,EAAMP,KAAMgD,EAASQ,SAAUI,EAAM3D,EAAOc,IAAM,GAAM,WAIhCH,IAApBX,EAAO2B,WAEXtB,EAAON,KAAMgD,EAASM,WAAYM,EAAM3D,EAAO2B,SAAU1E,KAAKT,eAC9D6D,EAAON,KAAMgD,EAASM,WAAYM,EAAM3D,EAAO4B,SAAU3E,KAAKT,eAC9D6D,EAAON,KAAMgD,EAASM,WAAYM,EAAM3D,EAAO6B,SAAU5E,KAAKT,qBAIrCmE,IAArBX,EAAOO,WAEXA,EAAUR,KAAMgD,EAASM,WAAYM,EAAM3D,EAAOO,UAAWtD,KAAKT,oBAI7CmE,IAAjBX,EAAOQ,OAEXA,EAAMT,KAAMgD,EAASW,SAAUC,EAAM3D,EAAOQ,MAAOvD,KAAKT,eAU3D,IAAMoH,EAAW,IAAIC,EAAAA,IAEhBzD,EAASxB,OAAS,GAAIgF,EAASE,aAAc,WAAY,IAAIC,EAAAA,IAAwB3D,EAAU,IAC/FC,EAAOzB,OAAS,GAAIgF,EAASE,aAAc,SAAU,IAAIC,EAAAA,IAAwB1D,EAAQ,IACzFC,EAAM1B,OAAS,GAAIgF,EAASE,aAAc,QAAS,IAAIC,EAAAA,IAAwBzD,EAAO,IACtFC,EAAU3B,OAAS,GAAIgF,EAASE,aAAc,YAAa,IAAIC,EAAAA,IAAwBxD,EAAW,IAClGC,EAAM5B,OAAS,GAAIgF,EAASE,aAAc,QAAS,IAAIE,EAAAA,IAAsBxD,EAAO,IAEzFoD,EAASK,wBAIT,IAAMC,EAAW,IAAIC,EAAAA,IAAgB,CAAElF,KAAM,OAU7C,OARKqB,EAAM1B,OAAS,IAEnBsF,EAASE,cAAe,GAMlB,IAAIC,EAAAA,IAAQT,EAAUM,EAE9B,KAACnI,CAAA,CArba,CAASuI,EAAAA,I","sources":["ezyvuecore/three/examples/jsm/loaders/PCDLoader.js"],"sourcesContent":["import {\r\n\tBufferGeometry,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tInt32BufferAttribute,\r\n\tLoader,\r\n\tPoints,\r\n\tPointsMaterial\r\n} from '../../../build/three';\r\n\r\nclass PCDLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.littleEndian = true;\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( data ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( data ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( data ) {\r\n\r\n\t\t// from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\r\n\r\n\t\tfunction decompressLZF( inData, outLength ) {\r\n\r\n\t\t\tconst inLength = inData.length;\r\n\t\t\tconst outData = new Uint8Array( outLength );\r\n\t\t\tlet inPtr = 0;\r\n\t\t\tlet outPtr = 0;\r\n\t\t\tlet ctrl;\r\n\t\t\tlet len;\r\n\t\t\tlet ref;\r\n\t\t\tdo {\r\n\r\n\t\t\t\tctrl = inData[ inPtr ++ ];\r\n\t\t\t\tif ( ctrl < ( 1 << 5 ) ) {\r\n\r\n\t\t\t\t\tctrl ++;\r\n\t\t\t\t\tif ( outPtr + ctrl > outLength ) throw new Error( 'Output buffer is not large enough' );\r\n\t\t\t\t\tif ( inPtr + ctrl > inLength ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\toutData[ outPtr ++ ] = inData[ inPtr ++ ];\r\n\r\n\t\t\t\t\t} while ( -- ctrl );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlen = ctrl >> 5;\r\n\t\t\t\t\tref = outPtr - ( ( ctrl & 0x1f ) << 8 ) - 1;\r\n\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tif ( len === 7 ) {\r\n\r\n\t\t\t\t\t\tlen += inData[ inPtr ++ ];\r\n\t\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tref -= inData[ inPtr ++ ];\r\n\t\t\t\t\tif ( outPtr + len + 2 > outLength ) throw new Error( 'Output buffer is not large enough' );\r\n\t\t\t\t\tif ( ref < 0 ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tif ( ref >= outPtr ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\toutData[ outPtr ++ ] = outData[ ref ++ ];\r\n\r\n\t\t\t\t\t} while ( -- len + 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} while ( inPtr < inLength );\r\n\r\n\t\t\treturn outData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseHeader( data ) {\r\n\r\n\t\t\tconst PCDheader = {};\r\n\t\t\tconst result1 = data.search( /[\\r\\n]DATA\\s(\\S*)\\s/i );\r\n\t\t\tconst result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec( data.slice( result1 - 1 ) );\r\n\r\n\t\t\tPCDheader.data = result2[ 1 ];\r\n\t\t\tPCDheader.headerLen = result2[ 0 ].length + result1;\r\n\t\t\tPCDheader.str = data.slice( 0, PCDheader.headerLen );\r\n\r\n\t\t\t// remove comments\r\n\r\n\t\t\tPCDheader.str = PCDheader.str.replace( /#.*/gi, '' );\r\n\r\n\t\t\t// parse\r\n\r\n\t\t\tPCDheader.version = /VERSION (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.fields = /FIELDS (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.size = /SIZE (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.type = /TYPE (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.count = /COUNT (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.width = /WIDTH (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.height = /HEIGHT (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.viewpoint = /VIEWPOINT (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.points = /POINTS (.*)/i.exec( PCDheader.str );\r\n\r\n\t\t\t// evaluate\r\n\r\n\t\t\tif ( PCDheader.version !== null )\r\n\t\t\t\tPCDheader.version = parseFloat( PCDheader.version[ 1 ] );\r\n\r\n\t\t\tPCDheader.fields = ( PCDheader.fields !== null ) ? PCDheader.fields[ 1 ].split( ' ' ) : [];\r\n\r\n\t\t\tif ( PCDheader.type !== null )\r\n\t\t\t\tPCDheader.type = PCDheader.type[ 1 ].split( ' ' );\r\n\r\n\t\t\tif ( PCDheader.width !== null )\r\n\t\t\t\tPCDheader.width = parseInt( PCDheader.width[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.height !== null )\r\n\t\t\t\tPCDheader.height = parseInt( PCDheader.height[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.viewpoint !== null )\r\n\t\t\t\tPCDheader.viewpoint = PCDheader.viewpoint[ 1 ];\r\n\r\n\t\t\tif ( PCDheader.points !== null )\r\n\t\t\t\tPCDheader.points = parseInt( PCDheader.points[ 1 ], 10 );\r\n\r\n\t\t\tif ( PCDheader.points === null )\r\n\t\t\t\tPCDheader.points = PCDheader.width * PCDheader.height;\r\n\r\n\t\t\tif ( PCDheader.size !== null ) {\r\n\r\n\t\t\t\tPCDheader.size = PCDheader.size[ 1 ].split( ' ' ).map( function ( x ) {\r\n\r\n\t\t\t\t\treturn parseInt( x, 10 );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( PCDheader.count !== null ) {\r\n\r\n\t\t\t\tPCDheader.count = PCDheader.count[ 1 ].split( ' ' ).map( function ( x ) {\r\n\r\n\t\t\t\t\treturn parseInt( x, 10 );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tPCDheader.count = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tPCDheader.count.push( 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tPCDheader.offset = {};\r\n\r\n\t\t\tlet sizeSum = 0;\r\n\r\n\t\t\tfor ( let i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( PCDheader.data === 'ascii' ) {\r\n\r\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = i;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = sizeSum;\r\n\t\t\t\t\tsizeSum += PCDheader.size[ i ] * PCDheader.count[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// for binary only\r\n\r\n\t\t\tPCDheader.rowSize = sizeSum;\r\n\r\n\t\t\treturn PCDheader;\r\n\r\n\t\t}\r\n\r\n\t\tconst textData = new TextDecoder().decode( data );\r\n\r\n\t\t// parse header (always ascii format)\r\n\r\n\t\tconst PCDheader = parseHeader( textData );\r\n\r\n\t\t// parse data\r\n\r\n\t\tconst position = [];\r\n\t\tconst normal = [];\r\n\t\tconst color = [];\r\n\t\tconst intensity = [];\r\n\t\tconst label = [];\r\n\r\n\t\t// ascii\r\n\r\n\t\tif ( PCDheader.data === 'ascii' ) {\r\n\r\n\t\t\tconst offset = PCDheader.offset;\r\n\t\t\tconst pcdData = textData.slice( PCDheader.headerLen );\r\n\t\t\tconst lines = pcdData.split( '\\n' );\r\n\r\n\t\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( lines[ i ] === '' ) continue;\r\n\r\n\t\t\t\tconst line = lines[ i ].split( ' ' );\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.x ] ) );\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.y ] ) );\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.z ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tconst rgb_field_index = PCDheader.fields.findIndex( ( field ) => field === 'rgb' );\r\n\t\t\t\t\tconst rgb_type = PCDheader.type[ rgb_field_index ];\r\n\r\n\t\t\t\t\tconst float = parseFloat( line[ offset.rgb ] );\r\n\t\t\t\t\tlet rgb = float;\r\n\r\n\t\t\t\t\tif ( rgb_type === 'F' ) {\r\n\r\n\t\t\t\t\t\t// treat float values as int\r\n\t\t\t\t\t\t// https://github.com/daavoo/pyntcloud/pull/204/commits/7b4205e64d5ed09abe708b2e91b615690c24d518\r\n\t\t\t\t\t\tconst farr = new Float32Array( 1 );\r\n\t\t\t\t\t\tfarr[ 0 ] = float;\r\n\t\t\t\t\t\trgb = new Int32Array( farr.buffer )[ 0 ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst r = ( rgb >> 16 ) & 0x0000ff;\r\n\t\t\t\t\tconst g = ( rgb >> 8 ) & 0x0000ff;\r\n\t\t\t\t\tconst b = ( rgb >> 0 ) & 0x0000ff;\r\n\t\t\t\t\tcolor.push( r / 255, g / 255, b / 255 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_x ] ) );\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_y ] ) );\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_z ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.intensity !== undefined ) {\r\n\r\n\t\t\t\t\tintensity.push( parseFloat( line[ offset.intensity ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.label !== undefined ) {\r\n\r\n\t\t\t\t\tlabel.push( parseInt( line[ offset.label ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// binary-compressed\r\n\r\n\t\t// normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\r\n\t\t// binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\r\n\t\t// that requires a totally different parsing approach compared to non-compressed data\r\n\r\n\t\tif ( PCDheader.data === 'binary_compressed' ) {\r\n\r\n\t\t\tconst sizes = new Uint32Array( data.slice( PCDheader.headerLen, PCDheader.headerLen + 8 ) );\r\n\t\t\tconst compressedSize = sizes[ 0 ];\r\n\t\t\tconst decompressedSize = sizes[ 1 ];\r\n\t\t\tconst decompressed = decompressLZF( new Uint8Array( data, PCDheader.headerLen + 8, compressedSize ), decompressedSize );\r\n\t\t\tconst dataview = new DataView( decompressed.buffer );\r\n\r\n\t\t\tconst offset = PCDheader.offset;\r\n\r\n\t\t\tfor ( let i = 0; i < PCDheader.points; i ++ ) {\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tconst xIndex = PCDheader.fields.indexOf( 'x' );\r\n\t\t\t\t\tconst yIndex = PCDheader.fields.indexOf( 'y' );\r\n\t\t\t\t\tconst zIndex = PCDheader.fields.indexOf( 'z' );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.x ) + PCDheader.size[ xIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.y ) + PCDheader.size[ yIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.z ) + PCDheader.size[ zIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tconst rgbIndex = PCDheader.fields.indexOf( 'rgb' );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 2 ) / 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 1 ) / 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 0 ) / 255.0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tconst xIndex = PCDheader.fields.indexOf( 'normal_x' );\r\n\t\t\t\t\tconst yIndex = PCDheader.fields.indexOf( 'normal_y' );\r\n\t\t\t\t\tconst zIndex = PCDheader.fields.indexOf( 'normal_z' );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_x ) + PCDheader.size[ xIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_y ) + PCDheader.size[ yIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_z ) + PCDheader.size[ zIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.intensity !== undefined ) {\r\n\r\n\t\t\t\t\tconst intensityIndex = PCDheader.fields.indexOf( 'intensity' );\r\n\t\t\t\t\tintensity.push( dataview.getFloat32( ( PCDheader.points * offset.intensity ) + PCDheader.size[ intensityIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.label !== undefined ) {\r\n\r\n\t\t\t\t\tconst labelIndex = PCDheader.fields.indexOf( 'label' );\r\n\t\t\t\t\tlabel.push( dataview.getInt32( ( PCDheader.points * offset.label ) + PCDheader.size[ labelIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// binary\r\n\r\n\t\tif ( PCDheader.data === 'binary' ) {\r\n\r\n\t\t\tconst dataview = new DataView( data, PCDheader.headerLen );\r\n\t\t\tconst offset = PCDheader.offset;\r\n\r\n\t\t\tfor ( let i = 0, row = 0; i < PCDheader.points; i ++, row += PCDheader.rowSize ) {\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.x, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.y, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.z, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 2 ) / 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 1 ) / 255.0 );\r\n\t\t\t\t\tcolor.push( dataview.getUint8( row + offset.rgb + 0 ) / 255.0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_x, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_y, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_z, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.intensity !== undefined ) {\r\n\r\n\t\t\t\t\tintensity.push( dataview.getFloat32( row + offset.intensity, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.label !== undefined ) {\r\n\r\n\t\t\t\t\tlabel.push( dataview.getInt32( row + offset.label, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\tif ( position.length > 0 ) geometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\t\tif ( normal.length > 0 ) geometry.setAttribute( 'normal', new Float32BufferAttribute( normal, 3 ) );\r\n\t\tif ( color.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( color, 3 ) );\r\n\t\tif ( intensity.length > 0 ) geometry.setAttribute( 'intensity', new Float32BufferAttribute( intensity, 1 ) );\r\n\t\tif ( label.length > 0 ) geometry.setAttribute( 'label', new Int32BufferAttribute( label, 1 ) );\r\n\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t// build material\r\n\r\n\t\tconst material = new PointsMaterial( { size: 0.005 } );\r\n\r\n\t\tif ( color.length > 0 ) {\r\n\r\n\t\t\tmaterial.vertexColors = true;\r\n\r\n\t\t}\r\n\r\n\t\t// build point cloud\r\n\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PCDLoader };\r\n"],"names":["PCDLoader","_Loader","_inherits","_super","_createSuper","manager","_this","_classCallCheck","call","littleEndian","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","data","parse","e","console","error","itemError","textData","TextDecoder","decode","PCDheader","result1","search","result2","exec","slice","headerLen","length","str","replace","version","fields","size","type","count","width","height","viewpoint","points","parseFloat","split","parseInt","map","x","i","l","push","offset","sizeSum","rowSize","parseHeader","position","normal","color","intensity","label","lines","line","undefined","y","z","rgb","rgb_field_index","findIndex","field","rgb_type","float","farr","Float32Array","Int32Array","buffer","r","g","b","normal_x","normal_y","normal_z","sizes","Uint32Array","compressedSize","decompressedSize","decompressed","inData","outLength","ctrl","len","ref","inLength","outData","Uint8Array","inPtr","outPtr","Error","decompressLZF","dataview","DataView","xIndex","indexOf","yIndex","zIndex","getFloat32","rgbIndex","getUint8","intensityIndex","labelIndex","getInt32","row","geometry","BufferGeometry","setAttribute","Float32BufferAttribute","Int32BufferAttribute","computeBoundingSphere","material","PointsMaterial","vertexColors","Points","Loader"],"sourceRoot":""}