{"version":3,"file":"static/js/54.ca1b04c6.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/loaders/MTLLoader.js"],"sourcesContent":["import {\r\n\tColor,\r\n\tDefaultLoadingManager,\r\n\tFileLoader,\r\n\tFrontSide,\r\n\tLoader,\r\n\tLoaderUtils,\r\n\tMeshPhongMaterial,\r\n\tRepeatWrapping,\r\n\tTextureLoader,\r\n\tVector2,\r\n\tsRGBEncoding\r\n} from '../../../build/three';\r\n\r\n/**\r\n * Loads a Wavefront .mtl file specifying materials\r\n */\r\n\r\nclass MTLLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Loads and parses a MTL asset from a URL.\r\n\t *\r\n\t * @param {String} url - URL to the MTL file.\r\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\r\n\t * @param {Function} [onProgress] - Callback for download progress.\r\n\t * @param {Function} [onError] - Callback for download errors.\r\n\t *\r\n\t * @see setPath setResourcePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setResourcePath() explicitly prior to load.\r\n\t */\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setRequestHeader( this.requestHeader );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( text, path ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tsetMaterialOptions( value ) {\r\n\r\n\t\tthis.materialOptions = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Parses a MTL file.\r\n\t *\r\n\t * @param {String} text - Content of MTL file\r\n\t * @return {MaterialCreator}\r\n\t *\r\n\t * @see setPath setResourcePath\r\n\t *\r\n\t * @note In order for relative texture references to resolve correctly\r\n\t * you must call setResourcePath() explicitly prior to parse.\r\n\t */\r\n\tparse( text, path ) {\r\n\r\n\t\tconst lines = text.split( '\\n' );\r\n\t\tlet info = {};\r\n\t\tconst delimiter_pattern = /\\s+/;\r\n\t\tconst materialsInfo = {};\r\n\r\n\t\tfor ( let i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlet line = lines[ i ];\r\n\t\t\tline = line.trim();\r\n\r\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\r\n\r\n\t\t\t\t// Blank line or comment ignore\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pos = line.indexOf( ' ' );\r\n\r\n\t\t\tlet key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\r\n\t\t\tkey = key.toLowerCase();\r\n\r\n\t\t\tlet value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\r\n\t\t\tvalue = value.trim();\r\n\r\n\t\t\tif ( key === 'newmtl' ) {\r\n\r\n\t\t\t\t// New material\r\n\r\n\t\t\t\tinfo = { name: value };\r\n\t\t\t\tmaterialsInfo[ value ] = info;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' || key === 'ke' ) {\r\n\r\n\t\t\t\t\tconst ss = value.split( delimiter_pattern, 3 );\r\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tinfo[ key ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst materialCreator = new MaterialCreator( this.resourcePath || path, this.materialOptions );\r\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\r\n\t\tmaterialCreator.setManager( this.manager );\r\n\t\tmaterialCreator.setMaterials( materialsInfo );\r\n\t\treturn materialCreator;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Create a new MTLLoader.MaterialCreator\r\n * @param baseUrl - Url relative to which textures are loaded\r\n * @param options - Set of options on how to construct the materials\r\n *                  side: Which side to apply the material\r\n *                        FrontSide (default), THREE.BackSide, THREE.DoubleSide\r\n *                  wrap: What type of wrapping to apply for textures\r\n *                        RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\r\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\r\n *                                Default: false, assumed to be already normalized\r\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\r\n *                                  Default: false\r\n * @constructor\r\n */\r\n\r\nclass MaterialCreator {\r\n\r\n\tconstructor( baseUrl = '', options = {} ) {\r\n\r\n\t\tthis.baseUrl = baseUrl;\r\n\t\tthis.options = options;\r\n\t\tthis.materialsInfo = {};\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t\tthis.crossOrigin = 'anonymous';\r\n\r\n\t\tthis.side = ( this.options.side !== undefined ) ? this.options.side : FrontSide;\r\n\t\tthis.wrap = ( this.options.wrap !== undefined ) ? this.options.wrap : RepeatWrapping;\r\n\r\n\t}\r\n\r\n\tsetCrossOrigin( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetManager( value ) {\r\n\r\n\t\tthis.manager = value;\r\n\r\n\t}\r\n\r\n\tsetMaterials( materialsInfo ) {\r\n\r\n\t\tthis.materialsInfo = this.convert( materialsInfo );\r\n\t\tthis.materials = {};\r\n\t\tthis.materialsArray = [];\r\n\t\tthis.nameLookup = {};\r\n\r\n\t}\r\n\r\n\tconvert( materialsInfo ) {\r\n\r\n\t\tif ( ! this.options ) return materialsInfo;\r\n\r\n\t\tconst converted = {};\r\n\r\n\t\tfor ( const mn in materialsInfo ) {\r\n\r\n\t\t\t// Convert materials info into normalized form based on options\r\n\r\n\t\t\tconst mat = materialsInfo[ mn ];\r\n\r\n\t\t\tconst covmat = {};\r\n\r\n\t\t\tconverted[ mn ] = covmat;\r\n\r\n\t\t\tfor ( const prop in mat ) {\r\n\r\n\t\t\t\tlet save = true;\r\n\t\t\t\tlet value = mat[ prop ];\r\n\t\t\t\tconst lprop = prop.toLowerCase();\r\n\r\n\t\t\t\tswitch ( lprop ) {\r\n\r\n\t\t\t\t\tcase 'kd':\r\n\t\t\t\t\tcase 'ka':\r\n\t\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\r\n\r\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\r\n\r\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// ignore\r\n\r\n\t\t\t\t\t\t\t\tsave = false;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( save ) {\r\n\r\n\t\t\t\t\tcovmat[ lprop ] = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn converted;\r\n\r\n\t}\r\n\r\n\tpreload() {\r\n\r\n\t\tfor ( const mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.create( mn );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetIndex( materialName ) {\r\n\r\n\t\treturn this.nameLookup[ materialName ];\r\n\r\n\t}\r\n\r\n\tgetAsArray() {\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( const mn in this.materialsInfo ) {\r\n\r\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\r\n\t\t\tthis.nameLookup[ mn ] = index;\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materialsArray;\r\n\r\n\t}\r\n\r\n\tcreate( materialName ) {\r\n\r\n\t\tif ( this.materials[ materialName ] === undefined ) {\r\n\r\n\t\t\tthis.createMaterial_( materialName );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t}\r\n\r\n\tcreateMaterial_( materialName ) {\r\n\r\n\t\t// Create material\r\n\r\n\t\tconst scope = this;\r\n\t\tconst mat = this.materialsInfo[ materialName ];\r\n\t\tconst params = {\r\n\r\n\t\t\tname: materialName,\r\n\t\t\tside: this.side\r\n\r\n\t\t};\r\n\r\n\t\tfunction resolveURL( baseUrl, url ) {\r\n\r\n\t\t\tif ( typeof url !== 'string' || url === '' )\r\n\t\t\t\treturn '';\r\n\r\n\t\t\t// Absolute URL\r\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) return url;\r\n\r\n\t\t\treturn baseUrl + url;\r\n\r\n\t\t}\r\n\r\n\t\tfunction setMapForType( mapType, value ) {\r\n\r\n\t\t\tif ( params[ mapType ] ) return; // Keep the first encountered texture\r\n\r\n\t\t\tconst texParams = scope.getTextureParams( value, params );\r\n\t\t\tconst map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );\r\n\r\n\t\t\tmap.repeat.copy( texParams.scale );\r\n\t\t\tmap.offset.copy( texParams.offset );\r\n\r\n\t\t\tmap.wrapS = scope.wrap;\r\n\t\t\tmap.wrapT = scope.wrap;\r\n\r\n\t\t\tif ( mapType === 'map' || mapType === 'emissiveMap' ) {\r\n\r\n\t\t\t\tmap.encoding = sRGBEncoding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tparams[ mapType ] = map;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const prop in mat ) {\r\n\r\n\t\t\tconst value = mat[ prop ];\r\n\t\t\tlet n;\r\n\r\n\t\t\tif ( value === '' ) continue;\r\n\r\n\t\t\tswitch ( prop.toLowerCase() ) {\r\n\r\n\t\t\t\t// Ns is material specular exponent\r\n\r\n\t\t\t\tcase 'kd':\r\n\r\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\r\n\r\n\t\t\t\t\tparams.color = new Color().fromArray( value ).convertSRGBToLinear();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ks':\r\n\r\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\r\n\t\t\t\t\tparams.specular = new Color().fromArray( value ).convertSRGBToLinear();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ke':\r\n\r\n\t\t\t\t\t// Emissive using RGB values\r\n\t\t\t\t\tparams.emissive = new Color().fromArray( value ).convertSRGBToLinear();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_kd':\r\n\r\n\t\t\t\t\t// Diffuse texture map\r\n\r\n\t\t\t\t\tsetMapForType( 'map', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ks':\r\n\r\n\t\t\t\t\t// Specular map\r\n\r\n\t\t\t\t\tsetMapForType( 'specularMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_ke':\r\n\r\n\t\t\t\t\t// Emissive map\r\n\r\n\t\t\t\t\tsetMapForType( 'emissiveMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'norm':\r\n\r\n\t\t\t\t\tsetMapForType( 'normalMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_bump':\r\n\t\t\t\tcase 'bump':\r\n\r\n\t\t\t\t\t// Bump texture map\r\n\r\n\t\t\t\t\tsetMapForType( 'bumpMap', value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'map_d':\r\n\r\n\t\t\t\t\t// Alpha map\r\n\r\n\t\t\t\t\tsetMapForType( 'alphaMap', value );\r\n\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ns':\r\n\r\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\r\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\r\n\r\n\t\t\t\t\tparams.shininess = parseFloat( value );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tn = parseFloat( value );\r\n\r\n\t\t\t\t\tif ( n < 1 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'tr':\r\n\t\t\t\t\tn = parseFloat( value );\r\n\r\n\t\t\t\t\tif ( this.options && this.options.invertTrProperty ) n = 1 - n;\r\n\r\n\t\t\t\t\tif ( n > 0 ) {\r\n\r\n\t\t\t\t\t\tparams.opacity = 1 - n;\r\n\t\t\t\t\t\tparams.transparent = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.materials[ materialName ] = new MeshPhongMaterial( params );\r\n\t\treturn this.materials[ materialName ];\r\n\r\n\t}\r\n\r\n\tgetTextureParams( value, matParams ) {\r\n\r\n\t\tconst texParams = {\r\n\r\n\t\t\tscale: new Vector2( 1, 1 ),\r\n\t\t\toffset: new Vector2( 0, 0 )\r\n\r\n\t\t };\r\n\r\n\t\tconst items = value.split( /\\s+/ );\r\n\t\tlet pos;\r\n\r\n\t\tpos = items.indexOf( '-bm' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\tmatParams.bumpScale = parseFloat( items[ pos + 1 ] );\r\n\t\t\titems.splice( pos, 2 );\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-s' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\tpos = items.indexOf( '-o' );\r\n\r\n\t\tif ( pos >= 0 ) {\r\n\r\n\t\t\ttexParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );\r\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\r\n\r\n\t\t}\r\n\r\n\t\ttexParams.url = items.join( ' ' ).trim();\r\n\t\treturn texParams;\r\n\r\n\t}\r\n\r\n\tloadTexture( url, mapping, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst manager = ( this.manager !== undefined ) ? this.manager : DefaultLoadingManager;\r\n\t\tlet loader = manager.getHandler( url );\r\n\r\n\t\tif ( loader === null ) {\r\n\r\n\t\t\tloader = new TextureLoader( manager );\r\n\r\n\t\t}\r\n\r\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tconst texture = loader.load( url, onLoad, onProgress, onError );\r\n\r\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MTLLoader };\r\n"],"names":["MTLLoader","_Loader","_inherits","_super","_createSuper","manager","_classCallCheck","call","_createClass","key","value","url","onLoad","onProgress","onError","scope","this","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","resourcePath","setCrossOrigin","crossOrigin","setManager","setMaterials","Loader","baseUrl","arguments","undefined","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","create","materialName","index","createMaterial_","params","setMapForType","mapType","texParams","getTextureParams","map","loadTexture","test","repeat","copy","scale","offset","wrapS","wrapT","encoding","sRGBEncoding","n","color","Color","fromArray","convertSRGBToLinear","specular","emissive","transparent","shininess","opacity","invertTrProperty","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","DefaultLoadingManager","getHandler","TextureLoader","texture"],"sourceRoot":""}