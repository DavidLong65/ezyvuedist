{"version":3,"file":"static/js/306.b9c4b777.chunk.js","mappings":"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","sources":["ezyvuecore/three/examples/jsm/curves/NURBSUtils.js","ezyvuecore/three/examples/jsm/curves/NURBSCurve.js","ezyvuecore/three/examples/jsm/loaders/FBXLoader.js"],"sourcesContent":["import {\r\n\tVector3,\r\n\tVector4\r\n} from '../../../build/three';\r\n\r\n/**\r\n * NURBS utils\r\n *\r\n * See NURBSCurve and NURBSSurface.\r\n **/\r\n\r\n\r\n/**************************************************************\r\n *\tNURBS Utils\r\n **************************************************************/\r\n\r\n/*\r\nFinds knot vector span.\r\n\r\np : degree\r\nu : parametric value\r\nU : knot vector\r\n\r\nreturns the span\r\n*/\r\nfunction findSpan( p, u, U ) {\r\n\r\n\tconst n = U.length - p - 1;\r\n\r\n\tif ( u >= U[ n ] ) {\r\n\r\n\t\treturn n - 1;\r\n\r\n\t}\r\n\r\n\tif ( u <= U[ p ] ) {\r\n\r\n\t\treturn p;\r\n\r\n\t}\r\n\r\n\tlet low = p;\r\n\tlet high = n;\r\n\tlet mid = Math.floor( ( low + high ) / 2 );\r\n\r\n\twhile ( u < U[ mid ] || u >= U[ mid + 1 ] ) {\r\n\r\n\t\tif ( u < U[ mid ] ) {\r\n\r\n\t\t\thigh = mid;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlow = mid;\r\n\r\n\t\t}\r\n\r\n\t\tmid = Math.floor( ( low + high ) / 2 );\r\n\r\n\t}\r\n\r\n\treturn mid;\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\r\n\r\nspan : span in which u lies\r\nu    : parametric point\r\np    : degree\r\nU    : knot vector\r\n\r\nreturns array[p+1] with basis functions values.\r\n*/\r\nfunction calcBasisFunctions( span, u, p, U ) {\r\n\r\n\tconst N = [];\r\n\tconst left = [];\r\n\tconst right = [];\r\n\tN[ 0 ] = 1.0;\r\n\r\n\tfor ( let j = 1; j <= p; ++ j ) {\r\n\r\n\t\tleft[ j ] = u - U[ span + 1 - j ];\r\n\t\tright[ j ] = U[ span + j ] - u;\r\n\r\n\t\tlet saved = 0.0;\r\n\r\n\t\tfor ( let r = 0; r < j; ++ r ) {\r\n\r\n\t\t\tconst rv = right[ r + 1 ];\r\n\t\t\tconst lv = left[ j - r ];\r\n\t\t\tconst temp = N[ r ] / ( rv + lv );\r\n\t\t\tN[ r ] = saved + rv * temp;\r\n\t\t\tsaved = lv * temp;\r\n\r\n\t\t}\r\n\r\n\t\tN[ j ] = saved;\r\n\r\n\t}\r\n\r\n\treturn N;\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\r\n\r\np : degree of B-Spline\r\nU : knot vector\r\nP : control points (x, y, z, w)\r\nu : parametric point\r\n\r\nreturns point for given u\r\n*/\r\nfunction calcBSplinePoint( p, U, P, u ) {\r\n\r\n\tconst span = findSpan( p, u, U );\r\n\tconst N = calcBasisFunctions( span, u, p, U );\r\n\tconst C = new Vector4( 0, 0, 0, 0 );\r\n\r\n\tfor ( let j = 0; j <= p; ++ j ) {\r\n\r\n\t\tconst point = P[ span - p + j ];\r\n\t\tconst Nj = N[ j ];\r\n\t\tconst wNj = point.w * Nj;\r\n\t\tC.x += point.x * wNj;\r\n\t\tC.y += point.y * wNj;\r\n\t\tC.z += point.z * wNj;\r\n\t\tC.w += point.w * Nj;\r\n\r\n\t}\r\n\r\n\treturn C;\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\r\n\r\nspan : span in which u lies\r\nu    : parametric point\r\np    : degree\r\nn    : number of derivatives to calculate\r\nU    : knot vector\r\n\r\nreturns array[n+1][p+1] with basis functions derivatives\r\n*/\r\nfunction calcBasisFunctionDerivatives( span, u, p, n, U ) {\r\n\r\n\tconst zeroArr = [];\r\n\tfor ( let i = 0; i <= p; ++ i )\r\n\t\tzeroArr[ i ] = 0.0;\r\n\r\n\tconst ders = [];\r\n\r\n\tfor ( let i = 0; i <= n; ++ i )\r\n\t\tders[ i ] = zeroArr.slice( 0 );\r\n\r\n\tconst ndu = [];\r\n\r\n\tfor ( let i = 0; i <= p; ++ i )\r\n\t\tndu[ i ] = zeroArr.slice( 0 );\r\n\r\n\tndu[ 0 ][ 0 ] = 1.0;\r\n\r\n\tconst left = zeroArr.slice( 0 );\r\n\tconst right = zeroArr.slice( 0 );\r\n\r\n\tfor ( let j = 1; j <= p; ++ j ) {\r\n\r\n\t\tleft[ j ] = u - U[ span + 1 - j ];\r\n\t\tright[ j ] = U[ span + j ] - u;\r\n\r\n\t\tlet saved = 0.0;\r\n\r\n\t\tfor ( let r = 0; r < j; ++ r ) {\r\n\r\n\t\t\tconst rv = right[ r + 1 ];\r\n\t\t\tconst lv = left[ j - r ];\r\n\t\t\tndu[ j ][ r ] = rv + lv;\r\n\r\n\t\t\tconst temp = ndu[ r ][ j - 1 ] / ndu[ j ][ r ];\r\n\t\t\tndu[ r ][ j ] = saved + rv * temp;\r\n\t\t\tsaved = lv * temp;\r\n\r\n\t\t}\r\n\r\n\t\tndu[ j ][ j ] = saved;\r\n\r\n\t}\r\n\r\n\tfor ( let j = 0; j <= p; ++ j ) {\r\n\r\n\t\tders[ 0 ][ j ] = ndu[ j ][ p ];\r\n\r\n\t}\r\n\r\n\tfor ( let r = 0; r <= p; ++ r ) {\r\n\r\n\t\tlet s1 = 0;\r\n\t\tlet s2 = 1;\r\n\r\n\t\tconst a = [];\r\n\t\tfor ( let i = 0; i <= p; ++ i ) {\r\n\r\n\t\t\ta[ i ] = zeroArr.slice( 0 );\r\n\r\n\t\t}\r\n\r\n\t\ta[ 0 ][ 0 ] = 1.0;\r\n\r\n\t\tfor ( let k = 1; k <= n; ++ k ) {\r\n\r\n\t\t\tlet d = 0.0;\r\n\t\t\tconst rk = r - k;\r\n\t\t\tconst pk = p - k;\r\n\r\n\t\t\tif ( r >= k ) {\r\n\r\n\t\t\t\ta[ s2 ][ 0 ] = a[ s1 ][ 0 ] / ndu[ pk + 1 ][ rk ];\r\n\t\t\t\td = a[ s2 ][ 0 ] * ndu[ rk ][ pk ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst j1 = ( rk >= - 1 ) ? 1 : - rk;\r\n\t\t\tconst j2 = ( r - 1 <= pk ) ? k - 1 : p - r;\r\n\r\n\t\t\tfor ( let j = j1; j <= j2; ++ j ) {\r\n\r\n\t\t\t\ta[ s2 ][ j ] = ( a[ s1 ][ j ] - a[ s1 ][ j - 1 ] ) / ndu[ pk + 1 ][ rk + j ];\r\n\t\t\t\td += a[ s2 ][ j ] * ndu[ rk + j ][ pk ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( r <= pk ) {\r\n\r\n\t\t\t\ta[ s2 ][ k ] = - a[ s1 ][ k - 1 ] / ndu[ pk + 1 ][ r ];\r\n\t\t\t\td += a[ s2 ][ k ] * ndu[ r ][ pk ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tders[ k ][ r ] = d;\r\n\r\n\t\t\tconst j = s1;\r\n\t\t\ts1 = s2;\r\n\t\t\ts2 = j;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlet r = p;\r\n\r\n\tfor ( let k = 1; k <= n; ++ k ) {\r\n\r\n\t\tfor ( let j = 0; j <= p; ++ j ) {\r\n\r\n\t\t\tders[ k ][ j ] *= r;\r\n\r\n\t\t}\r\n\r\n\t\tr *= p - k;\r\n\r\n\t}\r\n\r\n\treturn ders;\r\n\r\n}\r\n\r\n\r\n/*\r\n\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\r\n\r\n\tp  : degree\r\n\tU  : knot vector\r\n\tP  : control points\r\n\tu  : Parametric points\r\n\tnd : number of derivatives\r\n\r\n\treturns array[d+1] with derivatives\r\n\t*/\r\nfunction calcBSplineDerivatives( p, U, P, u, nd ) {\r\n\r\n\tconst du = nd < p ? nd : p;\r\n\tconst CK = [];\r\n\tconst span = findSpan( p, u, U );\r\n\tconst nders = calcBasisFunctionDerivatives( span, u, p, du, U );\r\n\tconst Pw = [];\r\n\r\n\tfor ( let i = 0; i < P.length; ++ i ) {\r\n\r\n\t\tconst point = P[ i ].clone();\r\n\t\tconst w = point.w;\r\n\r\n\t\tpoint.x *= w;\r\n\t\tpoint.y *= w;\r\n\t\tpoint.z *= w;\r\n\r\n\t\tPw[ i ] = point;\r\n\r\n\t}\r\n\r\n\tfor ( let k = 0; k <= du; ++ k ) {\r\n\r\n\t\tconst point = Pw[ span - p ].clone().multiplyScalar( nders[ k ][ 0 ] );\r\n\r\n\t\tfor ( let j = 1; j <= p; ++ j ) {\r\n\r\n\t\t\tpoint.add( Pw[ span - p + j ].clone().multiplyScalar( nders[ k ][ j ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tCK[ k ] = point;\r\n\r\n\t}\r\n\r\n\tfor ( let k = du + 1; k <= nd + 1; ++ k ) {\r\n\r\n\t\tCK[ k ] = new Vector4( 0, 0, 0 );\r\n\r\n\t}\r\n\r\n\treturn CK;\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate \"K over I\"\r\n\r\nreturns k!/(i!(k-i)!)\r\n*/\r\nfunction calcKoverI( k, i ) {\r\n\r\n\tlet nom = 1;\r\n\r\n\tfor ( let j = 2; j <= k; ++ j ) {\r\n\r\n\t\tnom *= j;\r\n\r\n\t}\r\n\r\n\tlet denom = 1;\r\n\r\n\tfor ( let j = 2; j <= i; ++ j ) {\r\n\r\n\t\tdenom *= j;\r\n\r\n\t}\r\n\r\n\tfor ( let j = 2; j <= k - i; ++ j ) {\r\n\r\n\t\tdenom *= j;\r\n\r\n\t}\r\n\r\n\treturn nom / denom;\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\r\n\r\nPders : result of function calcBSplineDerivatives\r\n\r\nreturns array with derivatives for rational curve.\r\n*/\r\nfunction calcRationalCurveDerivatives( Pders ) {\r\n\r\n\tconst nd = Pders.length;\r\n\tconst Aders = [];\r\n\tconst wders = [];\r\n\r\n\tfor ( let i = 0; i < nd; ++ i ) {\r\n\r\n\t\tconst point = Pders[ i ];\r\n\t\tAders[ i ] = new Vector3( point.x, point.y, point.z );\r\n\t\twders[ i ] = point.w;\r\n\r\n\t}\r\n\r\n\tconst CK = [];\r\n\r\n\tfor ( let k = 0; k < nd; ++ k ) {\r\n\r\n\t\tconst v = Aders[ k ].clone();\r\n\r\n\t\tfor ( let i = 1; i <= k; ++ i ) {\r\n\r\n\t\t\tv.sub( CK[ k - i ].clone().multiplyScalar( calcKoverI( k, i ) * wders[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tCK[ k ] = v.divideScalar( wders[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn CK;\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\r\n\r\np  : degree\r\nU  : knot vector\r\nP  : control points in homogeneous space\r\nu  : parametric points\r\nnd : number of derivatives\r\n\r\nreturns array with derivatives.\r\n*/\r\nfunction calcNURBSDerivatives( p, U, P, u, nd ) {\r\n\r\n\tconst Pders = calcBSplineDerivatives( p, U, P, u, nd );\r\n\treturn calcRationalCurveDerivatives( Pders );\r\n\r\n}\r\n\r\n\r\n/*\r\nCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\r\n\r\np1, p2 : degrees of B-Spline surface\r\nU1, U2 : knot vectors\r\nP      : control points (x, y, z, w)\r\nu, v   : parametric values\r\n\r\nreturns point for given (u, v)\r\n*/\r\nfunction calcSurfacePoint( p, q, U, V, P, u, v, target ) {\r\n\r\n\tconst uspan = findSpan( p, u, U );\r\n\tconst vspan = findSpan( q, v, V );\r\n\tconst Nu = calcBasisFunctions( uspan, u, p, U );\r\n\tconst Nv = calcBasisFunctions( vspan, v, q, V );\r\n\tconst temp = [];\r\n\r\n\tfor ( let l = 0; l <= q; ++ l ) {\r\n\r\n\t\ttemp[ l ] = new Vector4( 0, 0, 0, 0 );\r\n\t\tfor ( let k = 0; k <= p; ++ k ) {\r\n\r\n\t\t\tconst point = P[ uspan - p + k ][ vspan - q + l ].clone();\r\n\t\t\tconst w = point.w;\r\n\t\t\tpoint.x *= w;\r\n\t\t\tpoint.y *= w;\r\n\t\t\tpoint.z *= w;\r\n\t\t\ttemp[ l ].add( point.multiplyScalar( Nu[ k ] ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst Sw = new Vector4( 0, 0, 0, 0 );\r\n\tfor ( let l = 0; l <= q; ++ l ) {\r\n\r\n\t\tSw.add( temp[ l ].multiplyScalar( Nv[ l ] ) );\r\n\r\n\t}\r\n\r\n\tSw.divideScalar( Sw.w );\r\n\ttarget.set( Sw.x, Sw.y, Sw.z );\r\n\r\n}\r\n\r\n\r\n\r\nexport {\r\n\tfindSpan,\r\n\tcalcBasisFunctions,\r\n\tcalcBSplinePoint,\r\n\tcalcBasisFunctionDerivatives,\r\n\tcalcBSplineDerivatives,\r\n\tcalcKoverI,\r\n\tcalcRationalCurveDerivatives,\r\n\tcalcNURBSDerivatives,\r\n\tcalcSurfacePoint,\r\n};\r\n","import {\r\n\tCurve,\r\n\tVector3,\r\n\tVector4\r\n} from '../../../build/three';\r\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\r\n\r\n/**\r\n * NURBS curve object\r\n *\r\n * Derives from Curve, overriding getPoint and getTangent.\r\n *\r\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\r\n *\r\n **/\r\n\r\nclass NURBSCurve extends Curve {\r\n\r\n\tconstructor(\r\n\t\tdegree,\r\n\t\tknots /* array of reals */,\r\n\t\tcontrolPoints /* array of Vector(2|3|4) */,\r\n\t\tstartKnot /* index in knots */,\r\n\t\tendKnot /* index in knots */\r\n\t) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.degree = degree;\r\n\t\tthis.knots = knots;\r\n\t\tthis.controlPoints = [];\r\n\t\t// Used by periodic NURBS to remove hidden spans\r\n\t\tthis.startKnot = startKnot || 0;\r\n\t\tthis.endKnot = endKnot || ( this.knots.length - 1 );\r\n\r\n\t\tfor ( let i = 0; i < controlPoints.length; ++ i ) {\r\n\r\n\t\t\t// ensure Vector4 for control points\r\n\t\t\tconst point = controlPoints[ i ];\r\n\t\t\tthis.controlPoints[ i ] = new Vector4( point.x, point.y, point.z, point.w );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetPoint( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst point = optionalTarget;\r\n\r\n\t\tconst u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u\r\n\r\n\t\t// following results in (wx, wy, wz, w) homogeneous point\r\n\t\tconst hpoint = NURBSUtils.calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );\r\n\r\n\t\tif ( hpoint.w !== 1.0 ) {\r\n\r\n\t\t\t// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\r\n\t\t\thpoint.divideScalar( hpoint.w );\r\n\r\n\t\t}\r\n\r\n\t\treturn point.set( hpoint.x, hpoint.y, hpoint.z );\r\n\r\n\t}\r\n\r\n\tgetTangent( t, optionalTarget = new Vector3() ) {\r\n\r\n\t\tconst tangent = optionalTarget;\r\n\r\n\t\tconst u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );\r\n\t\tconst ders = NURBSUtils.calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );\r\n\t\ttangent.copy( ders[ 1 ] ).normalize();\r\n\r\n\t\treturn tangent;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { NURBSCurve };\r\n","import {\r\n\tAmbientLight,\r\n\tAnimationClip,\r\n\tBone,\r\n\tBufferGeometry,\r\n\tClampToEdgeWrapping,\r\n\tColor,\r\n\tDirectionalLight,\r\n\tEquirectangularReflectionMapping,\r\n\tEuler,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tGroup,\r\n\tLine,\r\n\tLineBasicMaterial,\r\n\tLoader,\r\n\tLoaderUtils,\r\n\tMathUtils,\r\n\tMatrix3,\r\n\tMatrix4,\r\n\tMesh,\r\n\tMeshLambertMaterial,\r\n\tMeshPhongMaterial,\r\n\tNumberKeyframeTrack,\r\n\tObject3D,\r\n\tOrthographicCamera,\r\n\tPerspectiveCamera,\r\n\tPointLight,\r\n\tPropertyBinding,\r\n\tQuaternion,\r\n\tQuaternionKeyframeTrack,\r\n\tRepeatWrapping,\r\n\tSkeleton,\r\n\tSkinnedMesh,\r\n\tSpotLight,\r\n\tTexture,\r\n\tTextureLoader,\r\n\tUint16BufferAttribute,\r\n\tVector3,\r\n\tVector4,\r\n\tVectorKeyframeTrack,\r\n\tsRGBEncoding\r\n} from '../../../build/three';\r\nimport * as fflate from '../libs/fflate.module.js';\r\nimport { NURBSCurve } from '../curves/NURBSCurve.js';\r\n\r\n/**\r\n * Loader loads FBX file and generates Group representing FBX scene.\r\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\r\n * Versions lower than this may load but will probably have errors\r\n *\r\n * Needs Support:\r\n *  Morph normals / blend shape normals\r\n *\r\n * FBX format references:\r\n * \thttps://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\r\n *\r\n * Binary format specification:\r\n *\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\r\n */\r\n\r\n\r\nlet fbxTree;\r\nlet connections;\r\nlet sceneGraph;\r\n\r\nclass FBXLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\r\n\r\n\t\tconst loader = new FileLoader( this.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( buffer, path ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( FBXBuffer, path ) {\r\n\r\n\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\r\n\r\n\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst FBXText = convertArrayBufferToString( FBXBuffer );\r\n\r\n\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfbxTree = new TextParser().parse( FBXText );\r\n\r\n\t\t}\r\n\r\n\t\t// console.log( fbxTree );\r\n\r\n\t\tconst textureLoader = new TextureLoader( this.manager ).setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\r\n\r\n\t\treturn new FBXTreeParser( textureLoader, this.manager ).parse( fbxTree );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Parse the FBXTree object returned by the BinaryParser or TextParser and return a Group\r\nclass FBXTreeParser {\r\n\r\n\tconstructor( textureLoader, manager ) {\r\n\r\n\t\tthis.textureLoader = textureLoader;\r\n\t\tthis.manager = manager;\r\n\r\n\t}\r\n\r\n\tparse() {\r\n\r\n\t\tconnections = this.parseConnections();\r\n\r\n\t\tconst images = this.parseImages();\r\n\t\tconst textures = this.parseTextures( images );\r\n\t\tconst materials = this.parseMaterials( textures );\r\n\t\tconst deformers = this.parseDeformers();\r\n\t\tconst geometryMap = new GeometryParser().parse( deformers );\r\n\r\n\t\tthis.parseScene( deformers, geometryMap, materials );\r\n\r\n\t\treturn sceneGraph;\r\n\r\n\t}\r\n\r\n\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\r\n\t// and details the connection type\r\n\tparseConnections() {\r\n\r\n\t\tconst connectionMap = new Map();\r\n\r\n\t\tif ( 'Connections' in fbxTree ) {\r\n\r\n\t\t\tconst rawConnections = fbxTree.Connections.connections;\r\n\r\n\t\t\trawConnections.forEach( function ( rawConnection ) {\r\n\r\n\t\t\t\tconst fromID = rawConnection[ 0 ];\r\n\t\t\t\tconst toID = rawConnection[ 1 ];\r\n\t\t\t\tconst relationship = rawConnection[ 2 ];\r\n\r\n\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\r\n\r\n\t\t\t\t\tconnectionMap.set( fromID, {\r\n\t\t\t\t\t\tparents: [],\r\n\t\t\t\t\t\tchildren: []\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst parentRelationship = { ID: toID, relationship: relationship };\r\n\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\r\n\r\n\t\t\t\tif ( ! connectionMap.has( toID ) ) {\r\n\r\n\t\t\t\t\tconnectionMap.set( toID, {\r\n\t\t\t\t\t\tparents: [],\r\n\t\t\t\t\t\tchildren: []\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst childRelationship = { ID: fromID, relationship: relationship };\r\n\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn connectionMap;\r\n\r\n\t}\r\n\r\n\t// Parse FBXTree.Objects.Video for embedded image data\r\n\t// These images are connected to textures in FBXTree.Objects.Textures\r\n\t// via FBXTree.Connections.\r\n\tparseImages() {\r\n\r\n\t\tconst images = {};\r\n\t\tconst blobs = {};\r\n\r\n\t\tif ( 'Video' in fbxTree.Objects ) {\r\n\r\n\t\t\tconst videoNodes = fbxTree.Objects.Video;\r\n\r\n\t\t\tfor ( const nodeID in videoNodes ) {\r\n\r\n\t\t\t\tconst videoNode = videoNodes[ nodeID ];\r\n\r\n\t\t\t\tconst id = parseInt( nodeID );\r\n\r\n\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\r\n\r\n\t\t\t\t// raw image data is in videoNode.Content\r\n\t\t\t\tif ( 'Content' in videoNode ) {\r\n\r\n\t\t\t\t\tconst arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\r\n\t\t\t\t\tconst base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\r\n\r\n\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\r\n\r\n\t\t\t\t\t\tconst image = this.parseImage( videoNodes[ nodeID ] );\r\n\r\n\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const id in images ) {\r\n\r\n\t\t\tconst filename = images[ id ];\r\n\r\n\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\r\n\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t}\r\n\r\n\t// Parse embedded image data in FBXTree.Video.Content\r\n\tparseImage( videoNode ) {\r\n\r\n\t\tconst content = videoNode.Content;\r\n\t\tconst fileName = videoNode.RelativeFilename || videoNode.Filename;\r\n\t\tconst extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\r\n\r\n\t\tlet type;\r\n\r\n\t\tswitch ( extension ) {\r\n\r\n\t\t\tcase 'bmp':\r\n\r\n\t\t\t\ttype = 'image/bmp';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'jpg':\r\n\t\t\tcase 'jpeg':\r\n\r\n\t\t\t\ttype = 'image/jpeg';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'png':\r\n\r\n\t\t\t\ttype = 'image/png';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'tif':\r\n\r\n\t\t\t\ttype = 'image/tiff';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'tga':\r\n\r\n\t\t\t\tif ( this.manager.getHandler( '.tga' ) === null ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, skipping ', fileName );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttype = 'image/tga';\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof content === 'string' ) { // ASCII format\r\n\r\n\t\t\treturn 'data:' + type + ';base64,' + content;\r\n\r\n\t\t} else { // Binary Format\r\n\r\n\t\t\tconst array = new Uint8Array( content );\r\n\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Parse nodes in FBXTree.Objects.Texture\r\n\t// These contain details such as UV scaling, cropping, rotation etc and are connected\r\n\t// to images in FBXTree.Objects.Video\r\n\tparseTextures( images ) {\r\n\r\n\t\tconst textureMap = new Map();\r\n\r\n\t\tif ( 'Texture' in fbxTree.Objects ) {\r\n\r\n\t\t\tconst textureNodes = fbxTree.Objects.Texture;\r\n\t\t\tfor ( const nodeID in textureNodes ) {\r\n\r\n\t\t\t\tconst texture = this.parseTexture( textureNodes[ nodeID ], images );\r\n\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn textureMap;\r\n\r\n\t}\r\n\r\n\t// Parse individual node in FBXTree.Objects.Texture\r\n\tparseTexture( textureNode, images ) {\r\n\r\n\t\tconst texture = this.loadTexture( textureNode, images );\r\n\r\n\t\ttexture.ID = textureNode.id;\r\n\r\n\t\ttexture.name = textureNode.attrName;\r\n\r\n\t\tconst wrapModeU = textureNode.WrapModeU;\r\n\t\tconst wrapModeV = textureNode.WrapModeV;\r\n\r\n\t\tconst valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\r\n\t\tconst valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\r\n\r\n\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\r\n\t\t// 0: repeat(default), 1: clamp\r\n\r\n\t\ttexture.wrapS = valueU === 0 ? RepeatWrapping : ClampToEdgeWrapping;\r\n\t\ttexture.wrapT = valueV === 0 ? RepeatWrapping : ClampToEdgeWrapping;\r\n\r\n\t\tif ( 'Scaling' in textureNode ) {\r\n\r\n\t\t\tconst values = textureNode.Scaling.value;\r\n\r\n\t\t\ttexture.repeat.x = values[ 0 ];\r\n\t\t\ttexture.repeat.y = values[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( 'Translation' in textureNode ) {\r\n\r\n\t\t\tconst values = textureNode.Translation.value;\r\n\r\n\t\t\ttexture.offset.x = values[ 0 ];\r\n\t\t\ttexture.offset.y = values[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\t// load a texture specified as a blob or data URI, or via an external URL using TextureLoader\r\n\tloadTexture( textureNode, images ) {\r\n\r\n\t\tlet fileName;\r\n\r\n\t\tconst currentPath = this.textureLoader.path;\r\n\r\n\t\tconst children = connections.get( textureNode.id ).children;\r\n\r\n\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\r\n\r\n\t\t\tfileName = images[ children[ 0 ].ID ];\r\n\r\n\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\r\n\r\n\t\t\t\tthis.textureLoader.setPath( undefined );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet texture;\r\n\r\n\t\tconst extension = textureNode.FileName.slice( - 3 ).toLowerCase();\r\n\r\n\t\tif ( extension === 'tga' ) {\r\n\r\n\t\t\tconst loader = this.manager.getHandler( '.tga' );\r\n\r\n\t\t\tif ( loader === null ) {\r\n\r\n\t\t\t\tconsole.warn( 'FBXLoader: TGA loader not found, creating placeholder texture for', textureNode.RelativeFilename );\r\n\t\t\t\ttexture = new Texture();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tloader.setPath( this.textureLoader.path );\r\n\t\t\t\ttexture = loader.load( fileName );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( extension === 'psd' ) {\r\n\r\n\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating placeholder texture for', textureNode.RelativeFilename );\r\n\t\t\ttexture = new Texture();\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttexture = this.textureLoader.load( fileName );\r\n\r\n\t\t}\r\n\r\n\t\tthis.textureLoader.setPath( currentPath );\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\t// Parse nodes in FBXTree.Objects.Material\r\n\tparseMaterials( textureMap ) {\r\n\r\n\t\tconst materialMap = new Map();\r\n\r\n\t\tif ( 'Material' in fbxTree.Objects ) {\r\n\r\n\t\t\tconst materialNodes = fbxTree.Objects.Material;\r\n\r\n\t\t\tfor ( const nodeID in materialNodes ) {\r\n\r\n\t\t\t\tconst material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\r\n\r\n\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materialMap;\r\n\r\n\t}\r\n\r\n\t// Parse single node in FBXTree.Objects.Material\r\n\t// Materials are connected to texture maps in FBXTree.Objects.Textures\r\n\t// FBX format currently only supports Lambert and Phong shading models\r\n\tparseMaterial( materialNode, textureMap ) {\r\n\r\n\t\tconst ID = materialNode.id;\r\n\t\tconst name = materialNode.attrName;\r\n\t\tlet type = materialNode.ShadingModel;\r\n\r\n\t\t// Case where FBX wraps shading model in property object.\r\n\t\tif ( typeof type === 'object' ) {\r\n\r\n\t\t\ttype = type.value;\r\n\r\n\t\t}\r\n\r\n\t\t// Ignore unused materials which don't have any connections.\r\n\t\tif ( ! connections.has( ID ) ) return null;\r\n\r\n\t\tconst parameters = this.parseParameters( materialNode, textureMap, ID );\r\n\r\n\t\tlet material;\r\n\r\n\t\tswitch ( type.toLowerCase() ) {\r\n\r\n\t\t\tcase 'phong':\r\n\t\t\t\tmaterial = new MeshPhongMaterial();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'lambert':\r\n\t\t\t\tmaterial = new MeshLambertMaterial();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\r\n\t\t\t\tmaterial = new MeshPhongMaterial();\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.setValues( parameters );\r\n\t\tmaterial.name = name;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n\t// Parse FBX material and return parameters suitable for a three.js material\r\n\t// Also parse the texture map and return any textures associated with the material\r\n\tparseParameters( materialNode, textureMap, ID ) {\r\n\r\n\t\tconst parameters = {};\r\n\r\n\t\tif ( materialNode.BumpFactor ) {\r\n\r\n\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.Diffuse ) {\r\n\r\n\t\t\tparameters.color = new Color().fromArray( materialNode.Diffuse.value );\r\n\r\n\t\t} else if ( materialNode.DiffuseColor && ( materialNode.DiffuseColor.type === 'Color' || materialNode.DiffuseColor.type === 'ColorRGB' ) ) {\r\n\r\n\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\r\n\t\t\tparameters.color = new Color().fromArray( materialNode.DiffuseColor.value );\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.DisplacementFactor ) {\r\n\r\n\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.Emissive ) {\r\n\r\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.Emissive.value );\r\n\r\n\t\t} else if ( materialNode.EmissiveColor && ( materialNode.EmissiveColor.type === 'Color' || materialNode.EmissiveColor.type === 'ColorRGB' ) ) {\r\n\r\n\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\r\n\t\t\tparameters.emissive = new Color().fromArray( materialNode.EmissiveColor.value );\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.EmissiveFactor ) {\r\n\r\n\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.Opacity ) {\r\n\r\n\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\r\n\r\n\t\t}\r\n\r\n\t\tif ( parameters.opacity < 1.0 ) {\r\n\r\n\t\t\tparameters.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.ReflectionFactor ) {\r\n\r\n\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.Shininess ) {\r\n\r\n\t\t\tparameters.shininess = materialNode.Shininess.value;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialNode.Specular ) {\r\n\r\n\t\t\tparameters.specular = new Color().fromArray( materialNode.Specular.value );\r\n\r\n\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\r\n\r\n\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\r\n\t\t\tparameters.specular = new Color().fromArray( materialNode.SpecularColor.value );\r\n\r\n\t\t}\r\n\r\n\t\tconst scope = this;\r\n\t\tconnections.get( ID ).children.forEach( function ( child ) {\r\n\r\n\t\t\tconst type = child.relationship;\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 'Bump':\r\n\t\t\t\t\tparameters.bumpMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Maya|TEX_ao_map':\r\n\t\t\t\t\tparameters.aoMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DiffuseColor':\r\n\t\t\t\tcase 'Maya|TEX_color_map':\r\n\t\t\t\t\tparameters.map = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tif ( parameters.map !== undefined ) {\r\n\r\n\t\t\t\t\t\tparameters.map.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DisplacementColor':\r\n\t\t\t\t\tparameters.displacementMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'EmissiveColor':\r\n\t\t\t\t\tparameters.emissiveMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tif ( parameters.emissiveMap !== undefined ) {\r\n\r\n\t\t\t\t\t\tparameters.emissiveMap.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'NormalMap':\r\n\t\t\t\tcase 'Maya|TEX_normal_map':\r\n\t\t\t\t\tparameters.normalMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'ReflectionColor':\r\n\t\t\t\t\tparameters.envMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tif ( parameters.envMap !== undefined ) {\r\n\r\n\t\t\t\t\t\tparameters.envMap.mapping = EquirectangularReflectionMapping;\r\n\t\t\t\t\t\tparameters.envMap.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpecularColor':\r\n\t\t\t\t\tparameters.specularMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tif ( parameters.specularMap !== undefined ) {\r\n\r\n\t\t\t\t\t\tparameters.specularMap.encoding = sRGBEncoding;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'TransparentColor':\r\n\t\t\t\tcase 'TransparencyFactor':\r\n\t\t\t\t\tparameters.alphaMap = scope.getTexture( textureMap, child.ID );\r\n\t\t\t\t\tparameters.transparent = true;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientColor':\r\n\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\r\n\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\r\n\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn parameters;\r\n\r\n\t}\r\n\r\n\t// get a texture from the textureMap for use by a material.\r\n\tgetTexture( textureMap, id ) {\r\n\r\n\t\t// if the texture is a layered texture, just use the first layer and issue a warning\r\n\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\r\n\t\t\tid = connections.get( id ).children[ 0 ].ID;\r\n\r\n\t\t}\r\n\r\n\t\treturn textureMap.get( id );\r\n\r\n\t}\r\n\r\n\t// Parse nodes in FBXTree.Objects.Deformer\r\n\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\r\n\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\r\n\tparseDeformers() {\r\n\r\n\t\tconst skeletons = {};\r\n\t\tconst morphTargets = {};\r\n\r\n\t\tif ( 'Deformer' in fbxTree.Objects ) {\r\n\r\n\t\t\tconst DeformerNodes = fbxTree.Objects.Deformer;\r\n\r\n\t\t\tfor ( const nodeID in DeformerNodes ) {\r\n\r\n\t\t\t\tconst deformerNode = DeformerNodes[ nodeID ];\r\n\r\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\r\n\r\n\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\r\n\r\n\t\t\t\t\tconst skeleton = this.parseSkeleton( relationships, DeformerNodes );\r\n\t\t\t\t\tskeleton.ID = nodeID;\r\n\r\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\r\n\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\r\n\r\n\t\t\t\t\tskeletons[ nodeID ] = skeleton;\r\n\r\n\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\r\n\r\n\t\t\t\t\tconst morphTarget = {\r\n\t\t\t\t\t\tid: nodeID,\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\r\n\t\t\t\t\tmorphTarget.id = nodeID;\r\n\r\n\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\r\n\r\n\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\r\n\t\t\tskeletons: skeletons,\r\n\t\t\tmorphTargets: morphTargets,\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Parse single nodes in FBXTree.Objects.Deformer\r\n\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\r\n\t// Each skin node represents a skeleton and each cluster node represents a bone\r\n\tparseSkeleton( relationships, deformerNodes ) {\r\n\r\n\t\tconst rawBones = [];\r\n\r\n\t\trelationships.children.forEach( function ( child ) {\r\n\r\n\t\t\tconst boneNode = deformerNodes[ child.ID ];\r\n\r\n\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\r\n\r\n\t\t\tconst rawBone = {\r\n\r\n\t\t\t\tID: child.ID,\r\n\t\t\t\tindices: [],\r\n\t\t\t\tweights: [],\r\n\t\t\t\ttransformLink: new Matrix4().fromArray( boneNode.TransformLink.a ),\r\n\t\t\t\t// transform: new Matrix4().fromArray( boneNode.Transform.a ),\r\n\t\t\t\t// linkMode: boneNode.Mode,\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( 'Indexes' in boneNode ) {\r\n\r\n\t\t\t\trawBone.indices = boneNode.Indexes.a;\r\n\t\t\t\trawBone.weights = boneNode.Weights.a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trawBones.push( rawBone );\r\n\r\n\t\t} );\r\n\r\n\t\treturn {\r\n\r\n\t\t\trawBones: rawBones,\r\n\t\t\tbones: []\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\r\n\tparseMorphTargets( relationships, deformerNodes ) {\r\n\r\n\t\tconst rawMorphTargets = [];\r\n\r\n\t\tfor ( let i = 0; i < relationships.children.length; i ++ ) {\r\n\r\n\t\t\tconst child = relationships.children[ i ];\r\n\r\n\t\t\tconst morphTargetNode = deformerNodes[ child.ID ];\r\n\r\n\t\t\tconst rawMorphTarget = {\r\n\r\n\t\t\t\tname: morphTargetNode.attrName,\r\n\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\r\n\t\t\t\tid: morphTargetNode.id,\r\n\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\r\n\r\n\t\t\trawMorphTarget.geoID = connections.get( parseInt( child.ID ) ).children.filter( function ( child ) {\r\n\r\n\t\t\t\treturn child.relationship === undefined;\r\n\r\n\t\t\t} )[ 0 ].ID;\r\n\r\n\t\t\trawMorphTargets.push( rawMorphTarget );\r\n\r\n\t\t}\r\n\r\n\t\treturn rawMorphTargets;\r\n\r\n\t}\r\n\r\n\t// create the main Group() to be returned by the loader\r\n\tparseScene( deformers, geometryMap, materialMap ) {\r\n\r\n\t\tsceneGraph = new Group();\r\n\r\n\t\tconst modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\r\n\r\n\t\tconst modelNodes = fbxTree.Objects.Model;\r\n\r\n\t\tconst scope = this;\r\n\t\tmodelMap.forEach( function ( model ) {\r\n\r\n\t\t\tconst modelNode = modelNodes[ model.ID ];\r\n\t\t\tscope.setLookAtProperties( model, modelNode );\r\n\r\n\t\t\tconst parentConnections = connections.get( model.ID ).parents;\r\n\r\n\t\t\tparentConnections.forEach( function ( connection ) {\r\n\r\n\t\t\t\tconst parent = modelMap.get( connection.ID );\r\n\t\t\t\tif ( parent !== undefined ) parent.add( model );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( model.parent === null ) {\r\n\r\n\t\t\t\tsceneGraph.add( model );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} );\r\n\r\n\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\r\n\r\n\t\tthis.createAmbientLight();\r\n\r\n\t\tsceneGraph.traverse( function ( node ) {\r\n\r\n\t\t\tif ( node.userData.transformData ) {\r\n\r\n\t\t\t\tif ( node.parent ) {\r\n\r\n\t\t\t\t\tnode.userData.transformData.parentMatrix = node.parent.matrix;\r\n\t\t\t\t\tnode.userData.transformData.parentMatrixWorld = node.parent.matrixWorld;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst transform = generateTransform( node.userData.transformData );\r\n\r\n\t\t\t\tnode.applyMatrix4( transform );\r\n\t\t\t\tnode.updateWorldMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tconst animations = new AnimationParser().parse();\r\n\r\n\t\t// if all the models where already combined in a single group, just return that\r\n\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\r\n\r\n\t\t\tsceneGraph.children[ 0 ].animations = animations;\r\n\t\t\tsceneGraph = sceneGraph.children[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\tsceneGraph.animations = animations;\r\n\r\n\t}\r\n\r\n\t// parse nodes in FBXTree.Objects.Model\r\n\tparseModels( skeletons, geometryMap, materialMap ) {\r\n\r\n\t\tconst modelMap = new Map();\r\n\t\tconst modelNodes = fbxTree.Objects.Model;\r\n\r\n\t\tfor ( const nodeID in modelNodes ) {\r\n\r\n\t\t\tconst id = parseInt( nodeID );\r\n\t\t\tconst node = modelNodes[ nodeID ];\r\n\t\t\tconst relationships = connections.get( id );\r\n\r\n\t\t\tlet model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\r\n\r\n\t\t\tif ( ! model ) {\r\n\r\n\t\t\t\tswitch ( node.attrType ) {\r\n\r\n\t\t\t\t\tcase 'Camera':\r\n\t\t\t\t\t\tmodel = this.createCamera( relationships );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Light':\r\n\t\t\t\t\t\tmodel = this.createLight( relationships );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Mesh':\r\n\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'NurbsCurve':\r\n\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'LimbNode':\r\n\t\t\t\t\tcase 'Root':\r\n\t\t\t\t\t\tmodel = new Bone();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Null':\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tmodel = new Group();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmodel.name = node.attrName ? PropertyBinding.sanitizeNodeName( node.attrName ) : '';\r\n\r\n\t\t\t\tmodel.ID = id;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.getTransformData( model, node );\r\n\t\t\tmodelMap.set( id, model );\r\n\r\n\t\t}\r\n\r\n\t\treturn modelMap;\r\n\r\n\t}\r\n\r\n\tbuildSkeleton( relationships, skeletons, id, name ) {\r\n\r\n\t\tlet bone = null;\r\n\r\n\t\trelationships.parents.forEach( function ( parent ) {\r\n\r\n\t\t\tfor ( const ID in skeletons ) {\r\n\r\n\t\t\t\tconst skeleton = skeletons[ ID ];\r\n\r\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\r\n\r\n\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\r\n\r\n\t\t\t\t\t\tconst subBone = bone;\r\n\t\t\t\t\t\tbone = new Bone();\r\n\r\n\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\r\n\r\n\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\r\n\r\n\t\t\t\t\t\tbone.name = name ? PropertyBinding.sanitizeNodeName( name ) : '';\r\n\t\t\t\t\t\tbone.ID = id;\r\n\r\n\t\t\t\t\t\tskeleton.bones[ i ] = bone;\r\n\r\n\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\r\n\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\r\n\t\t\t\t\t\tif ( subBone !== null ) {\r\n\r\n\t\t\t\t\t\t\tbone.add( subBone );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn bone;\r\n\r\n\t}\r\n\r\n\t// create a PerspectiveCamera or OrthographicCamera\r\n\tcreateCamera( relationships ) {\r\n\r\n\t\tlet model;\r\n\t\tlet cameraAttribute;\r\n\r\n\t\trelationships.children.forEach( function ( child ) {\r\n\r\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\r\n\r\n\t\t\tif ( attr !== undefined ) {\r\n\r\n\t\t\t\tcameraAttribute = attr;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tif ( cameraAttribute === undefined ) {\r\n\r\n\t\t\tmodel = new Object3D();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet type = 0;\r\n\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\r\n\r\n\t\t\t\ttype = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet nearClippingPlane = 1;\r\n\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\r\n\r\n\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet farClippingPlane = 1000;\r\n\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\r\n\r\n\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet width = window.innerWidth;\r\n\t\t\tlet height = window.innerHeight;\r\n\r\n\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\r\n\r\n\t\t\t\twidth = cameraAttribute.AspectWidth.value;\r\n\t\t\t\theight = cameraAttribute.AspectHeight.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst aspect = width / height;\r\n\r\n\t\t\tlet fov = 45;\r\n\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\r\n\r\n\t\t\t\tfov = cameraAttribute.FieldOfView.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 0: // Perspective\r\n\t\t\t\t\tmodel = new PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\r\n\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 1: // Orthographic\r\n\t\t\t\t\tmodel = new OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\r\n\t\t\t\t\tmodel = new Object3D();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn model;\r\n\r\n\t}\r\n\r\n\t// Create a DirectionalLight, PointLight or SpotLight\r\n\tcreateLight( relationships ) {\r\n\r\n\t\tlet model;\r\n\t\tlet lightAttribute;\r\n\r\n\t\trelationships.children.forEach( function ( child ) {\r\n\r\n\t\t\tconst attr = fbxTree.Objects.NodeAttribute[ child.ID ];\r\n\r\n\t\t\tif ( attr !== undefined ) {\r\n\r\n\t\t\t\tlightAttribute = attr;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tif ( lightAttribute === undefined ) {\r\n\r\n\t\t\tmodel = new Object3D();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet type;\r\n\r\n\t\t\t// LightType can be undefined for Point lights\r\n\t\t\tif ( lightAttribute.LightType === undefined ) {\r\n\r\n\t\t\t\ttype = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = lightAttribute.LightType.value;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet color = 0xffffff;\r\n\r\n\t\t\tif ( lightAttribute.Color !== undefined ) {\r\n\r\n\t\t\t\tcolor = new Color().fromArray( lightAttribute.Color.value );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\r\n\r\n\t\t\t// light disabled\r\n\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\r\n\r\n\t\t\t\tintensity = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet distance = 0;\r\n\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\r\n\r\n\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\r\n\r\n\t\t\t\t\tdistance = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\r\n\t\t\tconst decay = 1;\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 0: // Point\r\n\t\t\t\t\tmodel = new PointLight( color, intensity, distance, decay );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 1: // Directional\r\n\t\t\t\t\tmodel = new DirectionalLight( color, intensity );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 2: // Spot\r\n\t\t\t\t\tlet angle = Math.PI / 3;\r\n\r\n\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\r\n\r\n\t\t\t\t\t\tangle = MathUtils.degToRad( lightAttribute.InnerAngle.value );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet penumbra = 0;\r\n\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\r\n\r\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\r\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\r\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\r\n\t\t\t\t\t\tpenumbra = MathUtils.degToRad( lightAttribute.OuterAngle.value );\r\n\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tmodel = new SpotLight( color, intensity, distance, angle, penumbra, decay );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a PointLight.' );\r\n\t\t\t\t\tmodel = new PointLight( color, intensity );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\r\n\r\n\t\t\t\tmodel.castShadow = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn model;\r\n\r\n\t}\r\n\r\n\tcreateMesh( relationships, geometryMap, materialMap ) {\r\n\r\n\t\tlet model;\r\n\t\tlet geometry = null;\r\n\t\tlet material = null;\r\n\t\tconst materials = [];\r\n\r\n\t\t// get geometry and materials(s) from connections\r\n\t\trelationships.children.forEach( function ( child ) {\r\n\r\n\t\t\tif ( geometryMap.has( child.ID ) ) {\r\n\r\n\t\t\t\tgeometry = geometryMap.get( child.ID );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( materialMap.has( child.ID ) ) {\r\n\r\n\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tif ( materials.length > 1 ) {\r\n\r\n\t\t\tmaterial = materials;\r\n\r\n\t\t} else if ( materials.length > 0 ) {\r\n\r\n\t\t\tmaterial = materials[ 0 ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmaterial = new MeshPhongMaterial( { color: 0xcccccc } );\r\n\t\t\tmaterials.push( material );\r\n\r\n\t\t}\r\n\r\n\t\tif ( 'color' in geometry.attributes ) {\r\n\r\n\t\t\tmaterials.forEach( function ( material ) {\r\n\r\n\t\t\t\tmaterial.vertexColors = true;\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.FBX_Deformer ) {\r\n\r\n\t\t\tmodel = new SkinnedMesh( geometry, material );\r\n\t\t\tmodel.normalizeSkinWeights();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmodel = new Mesh( geometry, material );\r\n\r\n\t\t}\r\n\r\n\t\treturn model;\r\n\r\n\t}\r\n\r\n\tcreateCurve( relationships, geometryMap ) {\r\n\r\n\t\tconst geometry = relationships.children.reduce( function ( geo, child ) {\r\n\r\n\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\r\n\r\n\t\t\treturn geo;\r\n\r\n\t\t}, null );\r\n\r\n\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\r\n\t\tconst material = new LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\r\n\t\treturn new Line( geometry, material );\r\n\r\n\t}\r\n\r\n\t// parse the model node for transform data\r\n\tgetTransformData( model, modelNode ) {\r\n\r\n\t\tconst transformData = {};\r\n\r\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\r\n\r\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\r\n\t\telse transformData.eulerOrder = 'ZYX';\r\n\r\n\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\r\n\r\n\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\r\n\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\r\n\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\r\n\r\n\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\r\n\r\n\t\tif ( 'ScalingOffset' in modelNode ) transformData.scalingOffset = modelNode.ScalingOffset.value;\r\n\t\tif ( 'ScalingPivot' in modelNode ) transformData.scalingPivot = modelNode.ScalingPivot.value;\r\n\r\n\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\r\n\t\tif ( 'RotationPivot' in modelNode ) transformData.rotationPivot = modelNode.RotationPivot.value;\r\n\r\n\t\tmodel.userData.transformData = transformData;\r\n\r\n\t}\r\n\r\n\tsetLookAtProperties( model, modelNode ) {\r\n\r\n\t\tif ( 'LookAtProperty' in modelNode ) {\r\n\r\n\t\t\tconst children = connections.get( model.ID ).children;\r\n\r\n\t\t\tchildren.forEach( function ( child ) {\r\n\r\n\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\r\n\r\n\t\t\t\t\tconst lookAtTarget = fbxTree.Objects.Model[ child.ID ];\r\n\r\n\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\r\n\r\n\t\t\t\t\t\tconst pos = lookAtTarget.Lcl_Translation.value;\r\n\r\n\t\t\t\t\t\t// DirectionalLight, SpotLight\r\n\t\t\t\t\t\tif ( model.target !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\r\n\t\t\t\t\t\t\tsceneGraph.add( model.target );\r\n\r\n\t\t\t\t\t\t} else { // Cameras and other Object3Ds\r\n\r\n\t\t\t\t\t\t\tmodel.lookAt( new Vector3().fromArray( pos ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbindSkeleton( skeletons, geometryMap, modelMap ) {\r\n\r\n\t\tconst bindMatrices = this.parsePoseNodes();\r\n\r\n\t\tfor ( const ID in skeletons ) {\r\n\r\n\t\t\tconst skeleton = skeletons[ ID ];\r\n\r\n\t\t\tconst parents = connections.get( parseInt( skeleton.ID ) ).parents;\r\n\r\n\t\t\tparents.forEach( function ( parent ) {\r\n\r\n\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\r\n\r\n\t\t\t\t\tconst geoID = parent.ID;\r\n\t\t\t\t\tconst geoRelationships = connections.get( geoID );\r\n\r\n\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\r\n\r\n\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\r\n\r\n\t\t\t\t\t\t\tconst model = modelMap.get( geoConnParent.ID );\r\n\r\n\t\t\t\t\t\t\tmodel.bind( new Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tparsePoseNodes() {\r\n\r\n\t\tconst bindMatrices = {};\r\n\r\n\t\tif ( 'Pose' in fbxTree.Objects ) {\r\n\r\n\t\t\tconst BindPoseNode = fbxTree.Objects.Pose;\r\n\r\n\t\t\tfor ( const nodeID in BindPoseNode ) {\r\n\r\n\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' && BindPoseNode[ nodeID ].NbPoseNodes > 0 ) {\r\n\r\n\t\t\t\t\tconst poseNodes = BindPoseNode[ nodeID ].PoseNode;\r\n\r\n\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\r\n\r\n\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\r\n\r\n\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new Matrix4().fromArray( poseNode.Matrix.a );\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new Matrix4().fromArray( poseNodes.Matrix.a );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn bindMatrices;\r\n\r\n\t}\r\n\r\n\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\r\n\tcreateAmbientLight() {\r\n\r\n\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\r\n\r\n\t\t\tconst ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\r\n\t\t\tconst r = ambientColor[ 0 ];\r\n\t\t\tconst g = ambientColor[ 1 ];\r\n\t\t\tconst b = ambientColor[ 2 ];\r\n\r\n\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\r\n\r\n\t\t\t\tconst color = new Color( r, g, b );\r\n\t\t\t\tsceneGraph.add( new AmbientLight( color, 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// parse Geometry data from FBXTree and return map of BufferGeometries\r\nclass GeometryParser {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.negativeMaterialIndices = false;\r\n\r\n\t}\r\n\r\n\t// Parse nodes in FBXTree.Objects.Geometry\r\n\tparse( deformers ) {\r\n\r\n\t\tconst geometryMap = new Map();\r\n\r\n\t\tif ( 'Geometry' in fbxTree.Objects ) {\r\n\r\n\t\t\tconst geoNodes = fbxTree.Objects.Geometry;\r\n\r\n\t\t\tfor ( const nodeID in geoNodes ) {\r\n\r\n\t\t\t\tconst relationships = connections.get( parseInt( nodeID ) );\r\n\t\t\t\tconst geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\r\n\r\n\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// report warnings\r\n\r\n\t\tif ( this.negativeMaterialIndices === true ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.FBXLoader: The FBX file contains invalid (negative) material indices. The asset might not render as expected.' );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometryMap;\r\n\r\n\t}\r\n\r\n\t// Parse single node in FBXTree.Objects.Geometry\r\n\tparseGeometry( relationships, geoNode, deformers ) {\r\n\r\n\t\tswitch ( geoNode.attrType ) {\r\n\r\n\t\t\tcase 'Mesh':\r\n\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\r\n\r\n\t\t\tcase 'NurbsCurve':\r\n\t\t\t\treturn this.parseNurbsGeometry( geoNode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\r\n\tparseMeshGeometry( relationships, geoNode, deformers ) {\r\n\r\n\t\tconst skeletons = deformers.skeletons;\r\n\t\tconst morphTargets = [];\r\n\r\n\t\tconst modelNodes = relationships.parents.map( function ( parent ) {\r\n\r\n\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\r\n\r\n\t\t} );\r\n\r\n\t\t// don't create geometry if it is not associated with any models\r\n\t\tif ( modelNodes.length === 0 ) return;\r\n\r\n\t\tconst skeleton = relationships.children.reduce( function ( skeleton, child ) {\r\n\r\n\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\r\n\r\n\t\t\treturn skeleton;\r\n\r\n\t\t}, null );\r\n\r\n\t\trelationships.children.forEach( function ( child ) {\r\n\r\n\t\t\tif ( deformers.morphTargets[ child.ID ] !== undefined ) {\r\n\r\n\t\t\t\tmorphTargets.push( deformers.morphTargets[ child.ID ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\t// Assume one model and get the preRotation from that\r\n\t\t// if there is more than one model associated with the geometry this may cause problems\r\n\t\tconst modelNode = modelNodes[ 0 ];\r\n\r\n\t\tconst transformData = {};\r\n\r\n\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = getEulerOrder( modelNode.RotationOrder.value );\r\n\t\tif ( 'InheritType' in modelNode ) transformData.inheritType = parseInt( modelNode.InheritType.value );\r\n\r\n\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\r\n\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\r\n\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\r\n\r\n\t\tconst transform = generateTransform( transformData );\r\n\r\n\t\treturn this.genGeometry( geoNode, skeleton, morphTargets, transform );\r\n\r\n\t}\r\n\r\n\t// Generate a BufferGeometry from a node in FBXTree.Objects.Geometry\r\n\tgenGeometry( geoNode, skeleton, morphTargets, preTransform ) {\r\n\r\n\t\tconst geo = new BufferGeometry();\r\n\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\r\n\r\n\t\tconst geoInfo = this.parseGeoNode( geoNode, skeleton );\r\n\t\tconst buffers = this.genBuffers( geoInfo );\r\n\r\n\t\tconst positionAttribute = new Float32BufferAttribute( buffers.vertex, 3 );\r\n\r\n\t\tpositionAttribute.applyMatrix4( preTransform );\r\n\r\n\t\tgeo.setAttribute( 'position', positionAttribute );\r\n\r\n\t\tif ( buffers.colors.length > 0 ) {\r\n\r\n\t\t\tgeo.setAttribute( 'color', new Float32BufferAttribute( buffers.colors, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( skeleton ) {\r\n\r\n\t\t\tgeo.setAttribute( 'skinIndex', new Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\r\n\r\n\t\t\tgeo.setAttribute( 'skinWeight', new Float32BufferAttribute( buffers.vertexWeights, 4 ) );\r\n\r\n\t\t\t// used later to bind the skeleton to the model\r\n\t\t\tgeo.FBX_Deformer = skeleton;\r\n\r\n\t\t}\r\n\r\n\t\tif ( buffers.normal.length > 0 ) {\r\n\r\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( preTransform );\r\n\r\n\t\t\tconst normalAttribute = new Float32BufferAttribute( buffers.normal, 3 );\r\n\t\t\tnormalAttribute.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\tgeo.setAttribute( 'normal', normalAttribute );\r\n\r\n\t\t}\r\n\r\n\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\r\n\r\n\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\r\n\t\t\tlet name = 'uv' + ( i + 1 ).toString();\r\n\r\n\t\t\t// the first uv buffer is just called 'uv'\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tname = 'uv';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeo.setAttribute( name, new Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\r\n\r\n\t\t} );\r\n\r\n\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\r\n\r\n\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\r\n\t\t\tlet prevMaterialIndex = buffers.materialIndex[ 0 ];\r\n\t\t\tlet startIndex = 0;\r\n\r\n\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\r\n\r\n\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\r\n\r\n\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\r\n\r\n\t\t\t\t\tprevMaterialIndex = currentIndex;\r\n\t\t\t\t\tstartIndex = i;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\t// the loop above doesn't add the last group, do that here.\r\n\t\t\tif ( geo.groups.length > 0 ) {\r\n\r\n\t\t\t\tconst lastGroup = geo.groups[ geo.groups.length - 1 ];\r\n\t\t\t\tconst lastIndex = lastGroup.start + lastGroup.count;\r\n\r\n\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\r\n\r\n\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// case where there are multiple materials but the whole geometry is only\r\n\t\t\t// using one of them\r\n\t\t\tif ( geo.groups.length === 0 ) {\r\n\r\n\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.addMorphTargets( geo, geoNode, morphTargets, preTransform );\r\n\r\n\t\treturn geo;\r\n\r\n\t}\r\n\r\n\tparseGeoNode( geoNode, skeleton ) {\r\n\r\n\t\tconst geoInfo = {};\r\n\r\n\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\r\n\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\r\n\r\n\t\tif ( geoNode.LayerElementColor ) {\r\n\r\n\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geoNode.LayerElementMaterial ) {\r\n\r\n\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geoNode.LayerElementNormal ) {\r\n\r\n\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geoNode.LayerElementUV ) {\r\n\r\n\t\t\tgeoInfo.uv = [];\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\r\n\r\n\t\t\t\tif ( geoNode.LayerElementUV[ i ].UV ) {\r\n\r\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tgeoInfo.weightTable = {};\r\n\r\n\t\tif ( skeleton !== null ) {\r\n\r\n\t\t\tgeoInfo.skeleton = skeleton;\r\n\r\n\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\r\n\r\n\t\t\t\t// loop over the bone's vertex indices and weights\r\n\t\t\t\trawBone.indices.forEach( function ( index, j ) {\r\n\r\n\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\r\n\r\n\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\r\n\r\n\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\tweight: rawBone.weights[ j ],\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn geoInfo;\r\n\r\n\t}\r\n\r\n\tgenBuffers( geoInfo ) {\r\n\r\n\t\tconst buffers = {\r\n\t\t\tvertex: [],\r\n\t\t\tnormal: [],\r\n\t\t\tcolors: [],\r\n\t\t\tuvs: [],\r\n\t\t\tmaterialIndex: [],\r\n\t\t\tvertexWeights: [],\r\n\t\t\tweightsIndices: [],\r\n\t\t};\r\n\r\n\t\tlet polygonIndex = 0;\r\n\t\tlet faceLength = 0;\r\n\t\tlet displayedWeightsWarning = false;\r\n\r\n\t\t// these will hold data for a single face\r\n\t\tlet facePositionIndexes = [];\r\n\t\tlet faceNormals = [];\r\n\t\tlet faceColors = [];\r\n\t\tlet faceUVs = [];\r\n\t\tlet faceWeights = [];\r\n\t\tlet faceWeightIndices = [];\r\n\r\n\t\tconst scope = this;\r\n\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\r\n\r\n\t\t\tlet materialIndex;\r\n\t\t\tlet endOfFace = false;\r\n\r\n\t\t\t// Face index and vertex index arrays are combined in a single array\r\n\t\t\t// A cube with quad faces looks like this:\r\n\t\t\t// PolygonVertexIndex: *24 {\r\n\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\r\n\t\t\t//  }\r\n\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\r\n\t\t\t// to find index of last vertex bit shift the index: ^ - 1\r\n\t\t\tif ( vertexIndex < 0 ) {\r\n\r\n\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\r\n\t\t\t\tendOfFace = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet weightIndices = [];\r\n\t\t\tlet weights = [];\r\n\r\n\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\r\n\r\n\t\t\tif ( geoInfo.color ) {\r\n\r\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\r\n\r\n\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.skeleton ) {\r\n\r\n\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\r\n\r\n\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\r\n\r\n\t\t\t\t\t\tweights.push( wt.weight );\r\n\t\t\t\t\t\tweightIndices.push( wt.id );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( weights.length > 4 ) {\r\n\r\n\t\t\t\t\tif ( ! displayedWeightsWarning ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\r\n\t\t\t\t\t\tdisplayedWeightsWarning = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst wIndex = [ 0, 0, 0, 0 ];\r\n\t\t\t\t\tconst Weight = [ 0, 0, 0, 0 ];\r\n\r\n\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\r\n\r\n\t\t\t\t\t\tlet currentWeight = weight;\r\n\t\t\t\t\t\tlet currentIndex = weightIndices[ weightIndex ];\r\n\r\n\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\r\n\r\n\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\r\n\r\n\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\r\n\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\r\n\r\n\t\t\t\t\t\t\t\tconst tmp = wIndex[ comparedWeightIndex ];\r\n\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\r\n\t\t\t\t\t\t\t\tcurrentIndex = tmp;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tweightIndices = wIndex;\r\n\t\t\t\t\tweights = Weight;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if the weight array is shorter than 4 pad with 0s\r\n\t\t\t\twhile ( weights.length < 4 ) {\r\n\r\n\t\t\t\t\tweights.push( 0 );\r\n\t\t\t\t\tweightIndices.push( 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let i = 0; i < 4; ++ i ) {\r\n\r\n\t\t\t\t\tfaceWeights.push( weights[ i ] );\r\n\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.normal ) {\r\n\r\n\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\r\n\r\n\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\r\n\r\n\t\t\t\tmaterialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\r\n\r\n\t\t\t\tif ( materialIndex < 0 ) {\r\n\r\n\t\t\t\t\tscope.negativeMaterialIndices = true;\r\n\t\t\t\t\tmaterialIndex = 0; // fallback\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.uv ) {\r\n\r\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\r\n\r\n\t\t\t\t\tconst data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\r\n\r\n\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\r\n\r\n\t\t\t\t\t\tfaceUVs[ i ] = [];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\r\n\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceLength ++;\r\n\r\n\t\t\tif ( endOfFace ) {\r\n\r\n\t\t\t\tif ( faceLength > 4 ) console.warn( 'THREE.FBXLoader: Polygons with more than four sides are not supported. Make sure to triangulate the geometry during export.' );\r\n\r\n\t\t\t\tscope.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\r\n\r\n\t\t\t\tpolygonIndex ++;\r\n\t\t\t\tfaceLength = 0;\r\n\r\n\t\t\t\t// reset arrays for the next face\r\n\t\t\t\tfacePositionIndexes = [];\r\n\t\t\t\tfaceNormals = [];\r\n\t\t\t\tfaceColors = [];\r\n\t\t\t\tfaceUVs = [];\r\n\t\t\t\tfaceWeights = [];\r\n\t\t\t\tfaceWeightIndices = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn buffers;\r\n\r\n\t}\r\n\r\n\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\r\n\tgenFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\r\n\r\n\t\tfor ( let i = 2; i < faceLength; i ++ ) {\r\n\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\r\n\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\r\n\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\r\n\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\r\n\r\n\t\t\tif ( geoInfo.skeleton ) {\r\n\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\r\n\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\r\n\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\r\n\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\r\n\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\r\n\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\r\n\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\r\n\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.color ) {\r\n\r\n\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\r\n\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\r\n\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\r\n\r\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\r\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\r\n\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\r\n\r\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\r\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\r\n\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\r\n\r\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\r\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\r\n\t\t\t\tbuffers.materialIndex.push( materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.normal ) {\r\n\r\n\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\r\n\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\r\n\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\r\n\r\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\r\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\r\n\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\r\n\r\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\r\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\r\n\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geoInfo.uv ) {\r\n\r\n\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\r\n\r\n\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\r\n\r\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\r\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\r\n\r\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\r\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\r\n\r\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\r\n\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\taddMorphTargets( parentGeo, parentGeoNode, morphTargets, preTransform ) {\r\n\r\n\t\tif ( morphTargets.length === 0 ) return;\r\n\r\n\t\tparentGeo.morphTargetsRelative = true;\r\n\r\n\t\tparentGeo.morphAttributes.position = [];\r\n\t\t// parentGeo.morphAttributes.normal = []; // not implemented\r\n\r\n\t\tconst scope = this;\r\n\t\tmorphTargets.forEach( function ( morphTarget ) {\r\n\r\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\r\n\r\n\t\t\t\tconst morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\r\n\r\n\t\t\t\tif ( morphGeoNode !== undefined ) {\r\n\r\n\t\t\t\t\tscope.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, rawTarget.name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t// a morph geometry node is similar to a standard  node, and the node is also contained\r\n\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\r\n\t// and a special attribute Index defining which vertices of the original geometry are affected\r\n\t// Normal and position attributes only have data for the vertices that are affected by the morph\r\n\tgenMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform, name ) {\r\n\r\n\t\tconst vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\r\n\r\n\t\tconst morphPositionsSparse = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\r\n\t\tconst indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\r\n\r\n\t\tconst length = parentGeo.attributes.position.count * 3;\r\n\t\tconst morphPositions = new Float32Array( length );\r\n\r\n\t\tfor ( let i = 0; i < indices.length; i ++ ) {\r\n\r\n\t\t\tconst morphIndex = indices[ i ] * 3;\r\n\r\n\t\t\tmorphPositions[ morphIndex ] = morphPositionsSparse[ i * 3 ];\r\n\t\t\tmorphPositions[ morphIndex + 1 ] = morphPositionsSparse[ i * 3 + 1 ];\r\n\t\t\tmorphPositions[ morphIndex + 2 ] = morphPositionsSparse[ i * 3 + 2 ];\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: add morph normal support\r\n\t\tconst morphGeoInfo = {\r\n\t\t\tvertexIndices: vertexIndices,\r\n\t\t\tvertexPositions: morphPositions,\r\n\r\n\t\t};\r\n\r\n\t\tconst morphBuffers = this.genBuffers( morphGeoInfo );\r\n\r\n\t\tconst positionAttribute = new Float32BufferAttribute( morphBuffers.vertex, 3 );\r\n\t\tpositionAttribute.name = name || morphGeoNode.attrName;\r\n\r\n\t\tpositionAttribute.applyMatrix4( preTransform );\r\n\r\n\t\tparentGeo.morphAttributes.position.push( positionAttribute );\r\n\r\n\t}\r\n\r\n\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\r\n\tparseNormals( NormalNode ) {\r\n\r\n\t\tconst mappingType = NormalNode.MappingInformationType;\r\n\t\tconst referenceType = NormalNode.ReferenceInformationType;\r\n\t\tconst buffer = NormalNode.Normals.a;\r\n\t\tlet indexBuffer = [];\r\n\t\tif ( referenceType === 'IndexToDirect' ) {\r\n\r\n\t\t\tif ( 'NormalIndex' in NormalNode ) {\r\n\r\n\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\r\n\r\n\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\r\n\r\n\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdataSize: 3,\r\n\t\t\tbuffer: buffer,\r\n\t\t\tindices: indexBuffer,\r\n\t\t\tmappingType: mappingType,\r\n\t\t\treferenceType: referenceType\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\r\n\tparseUVs( UVNode ) {\r\n\r\n\t\tconst mappingType = UVNode.MappingInformationType;\r\n\t\tconst referenceType = UVNode.ReferenceInformationType;\r\n\t\tconst buffer = UVNode.UV.a;\r\n\t\tlet indexBuffer = [];\r\n\t\tif ( referenceType === 'IndexToDirect' ) {\r\n\r\n\t\t\tindexBuffer = UVNode.UVIndex.a;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdataSize: 2,\r\n\t\t\tbuffer: buffer,\r\n\t\t\tindices: indexBuffer,\r\n\t\t\tmappingType: mappingType,\r\n\t\t\treferenceType: referenceType\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\r\n\tparseVertexColors( ColorNode ) {\r\n\r\n\t\tconst mappingType = ColorNode.MappingInformationType;\r\n\t\tconst referenceType = ColorNode.ReferenceInformationType;\r\n\t\tconst buffer = ColorNode.Colors.a;\r\n\t\tlet indexBuffer = [];\r\n\t\tif ( referenceType === 'IndexToDirect' ) {\r\n\r\n\t\t\tindexBuffer = ColorNode.ColorIndex.a;\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdataSize: 4,\r\n\t\t\tbuffer: buffer,\r\n\t\t\tindices: indexBuffer,\r\n\t\t\tmappingType: mappingType,\r\n\t\t\treferenceType: referenceType\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\r\n\tparseMaterialIndices( MaterialNode ) {\r\n\r\n\t\tconst mappingType = MaterialNode.MappingInformationType;\r\n\t\tconst referenceType = MaterialNode.ReferenceInformationType;\r\n\r\n\t\tif ( mappingType === 'NoMappingInformation' ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdataSize: 1,\r\n\t\t\t\tbuffer: [ 0 ],\r\n\t\t\t\tindices: [ 0 ],\r\n\t\t\t\tmappingType: 'AllSame',\r\n\t\t\t\treferenceType: referenceType\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst materialIndexBuffer = MaterialNode.Materials.a;\r\n\r\n\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\r\n\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\r\n\t\t// for conforming with the other functions we've written for other data.\r\n\t\tconst materialIndices = [];\r\n\r\n\t\tfor ( let i = 0; i < materialIndexBuffer.length; ++ i ) {\r\n\r\n\t\t\tmaterialIndices.push( i );\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tdataSize: 1,\r\n\t\t\tbuffer: materialIndexBuffer,\r\n\t\t\tindices: materialIndices,\r\n\t\t\tmappingType: mappingType,\r\n\t\t\treferenceType: referenceType\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\r\n\tparseNurbsGeometry( geoNode ) {\r\n\r\n\t\tconst order = parseInt( geoNode.Order );\r\n\r\n\t\tif ( isNaN( order ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\r\n\t\t\treturn new BufferGeometry();\r\n\r\n\t\t}\r\n\r\n\t\tconst degree = order - 1;\r\n\r\n\t\tconst knots = geoNode.KnotVector.a;\r\n\t\tconst controlPoints = [];\r\n\t\tconst pointsValues = geoNode.Points.a;\r\n\r\n\t\tfor ( let i = 0, l = pointsValues.length; i < l; i += 4 ) {\r\n\r\n\t\t\tcontrolPoints.push( new Vector4().fromArray( pointsValues, i ) );\r\n\r\n\t\t}\r\n\r\n\t\tlet startKnot, endKnot;\r\n\r\n\t\tif ( geoNode.Form === 'Closed' ) {\r\n\r\n\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\r\n\r\n\t\t} else if ( geoNode.Form === 'Periodic' ) {\r\n\r\n\t\t\tstartKnot = degree;\r\n\t\t\tendKnot = knots.length - 1 - startKnot;\r\n\r\n\t\t\tfor ( let i = 0; i < degree; ++ i ) {\r\n\r\n\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst curve = new NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\r\n\t\tconst points = curve.getPoints( controlPoints.length * 12 );\r\n\r\n\t\treturn new BufferGeometry().setFromPoints( points );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// parse animation data from FBXTree\r\nclass AnimationParser {\r\n\r\n\t// take raw animation clips and turn them into three.js animation clips\r\n\tparse() {\r\n\r\n\t\tconst animationClips = [];\r\n\r\n\t\tconst rawClips = this.parseClips();\r\n\r\n\t\tif ( rawClips !== undefined ) {\r\n\r\n\t\t\tfor ( const key in rawClips ) {\r\n\r\n\t\t\t\tconst rawClip = rawClips[ key ];\r\n\r\n\t\t\t\tconst clip = this.addClip( rawClip );\r\n\r\n\t\t\t\tanimationClips.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn animationClips;\r\n\r\n\t}\r\n\r\n\tparseClips() {\r\n\r\n\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\r\n\t\t// if this is undefined we can safely assume there are no animations\r\n\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\r\n\r\n\t\tconst curveNodesMap = this.parseAnimationCurveNodes();\r\n\r\n\t\tthis.parseAnimationCurves( curveNodesMap );\r\n\r\n\t\tconst layersMap = this.parseAnimationLayers( curveNodesMap );\r\n\t\tconst rawClips = this.parseAnimStacks( layersMap );\r\n\r\n\t\treturn rawClips;\r\n\r\n\t}\r\n\r\n\t// parse nodes in FBXTree.Objects.AnimationCurveNode\r\n\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\r\n\t// and is referenced by an AnimationLayer\r\n\tparseAnimationCurveNodes() {\r\n\r\n\t\tconst rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\r\n\r\n\t\tconst curveNodesMap = new Map();\r\n\r\n\t\tfor ( const nodeID in rawCurveNodes ) {\r\n\r\n\t\t\tconst rawCurveNode = rawCurveNodes[ nodeID ];\r\n\r\n\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\r\n\r\n\t\t\t\tconst curveNode = {\r\n\r\n\t\t\t\t\tid: rawCurveNode.id,\r\n\t\t\t\t\tattr: rawCurveNode.attrName,\r\n\t\t\t\t\tcurves: {},\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn curveNodesMap;\r\n\r\n\t}\r\n\r\n\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\r\n\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\r\n\t// axis ( e.g. times and values of x rotation)\r\n\tparseAnimationCurves( curveNodesMap ) {\r\n\r\n\t\tconst rawCurves = fbxTree.Objects.AnimationCurve;\r\n\r\n\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\r\n\t\t// e.g. position times: [0, 0.4, 0. 8]\r\n\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\r\n\t\t// clearly, this should be optimised to\r\n\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\r\n\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\r\n\r\n\t\tfor ( const nodeID in rawCurves ) {\r\n\r\n\t\t\tconst animationCurve = {\r\n\r\n\t\t\t\tid: rawCurves[ nodeID ].id,\r\n\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\r\n\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\r\n\r\n\t\t\t};\r\n\r\n\t\t\tconst relationships = connections.get( animationCurve.id );\r\n\r\n\t\t\tif ( relationships !== undefined ) {\r\n\r\n\t\t\t\tconst animationCurveID = relationships.parents[ 0 ].ID;\r\n\t\t\t\tconst animationCurveRelationship = relationships.parents[ 0 ].relationship;\r\n\r\n\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\r\n\r\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\r\n\r\n\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\r\n\r\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\r\n\r\n\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\r\n\r\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\r\n\r\n\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\r\n\r\n\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\r\n\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\r\n\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\r\n\tparseAnimationLayers( curveNodesMap ) {\r\n\r\n\t\tconst rawLayers = fbxTree.Objects.AnimationLayer;\r\n\r\n\t\tconst layersMap = new Map();\r\n\r\n\t\tfor ( const nodeID in rawLayers ) {\r\n\r\n\t\t\tconst layerCurveNodes = [];\r\n\r\n\t\t\tconst connection = connections.get( parseInt( nodeID ) );\r\n\r\n\t\t\tif ( connection !== undefined ) {\r\n\r\n\t\t\t\t// all the animationCurveNodes used in the layer\r\n\t\t\t\tconst children = connection.children;\r\n\r\n\t\t\t\tchildren.forEach( function ( child, i ) {\r\n\r\n\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\r\n\r\n\t\t\t\t\t\tconst curveNode = curveNodesMap.get( child.ID );\r\n\r\n\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\r\n\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tconst modelID = connections.get( child.ID ).parents.filter( function ( parent ) {\r\n\r\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\r\n\r\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\r\n\r\n\t\t\t\t\t\t\t\tif ( modelID !== undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID.toString() ];\r\n\r\n\t\t\t\t\t\t\t\t\tif ( rawModel === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered a unused curve.', child );\r\n\t\t\t\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tconst node = {\r\n\r\n\t\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\r\n\t\t\t\t\t\t\t\t\t\tID: rawModel.id,\r\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\r\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\r\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\r\n\r\n\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\tif ( child.ID === rawModel.id ) {\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tnode.transform = child.matrix;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif ( child.userData.transformData ) node.eulerOrder = child.userData.transformData.eulerOrder;\r\n\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t\t\t\tif ( ! node.transform ) node.transform = new Matrix4();\r\n\r\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\r\n\t\t\t\t\t\t\t\t\t// animation value as well\r\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotation = rawModel.PreRotation.value;\r\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotation = rawModel.PostRotation.value;\r\n\r\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] ) layerCurveNodes[ i ][ curveNode.attr ] = curveNode;\r\n\r\n\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tconst deformerID = connections.get( child.ID ).parents.filter( function ( parent ) {\r\n\r\n\t\t\t\t\t\t\t\t\treturn parent.relationship !== undefined;\r\n\r\n\t\t\t\t\t\t\t\t} )[ 0 ].ID;\r\n\r\n\t\t\t\t\t\t\t\tconst morpherID = connections.get( deformerID ).parents[ 0 ].ID;\r\n\t\t\t\t\t\t\t\tconst geoID = connections.get( morpherID ).parents[ 0 ].ID;\r\n\r\n\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\r\n\t\t\t\t\t\t\t\tconst modelID = connections.get( geoID ).parents[ 0 ].ID;\r\n\r\n\t\t\t\t\t\t\t\tconst rawModel = fbxTree.Objects.Model[ modelID ];\r\n\r\n\t\t\t\t\t\t\t\tconst node = {\r\n\r\n\t\t\t\t\t\t\t\t\tmodelName: rawModel.attrName ? PropertyBinding.sanitizeNodeName( rawModel.attrName ) : '',\r\n\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\r\n\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn layersMap;\r\n\r\n\t}\r\n\r\n\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\r\n\t// hierarchy. Each Stack node will be used to create a AnimationClip\r\n\tparseAnimStacks( layersMap ) {\r\n\r\n\t\tconst rawStacks = fbxTree.Objects.AnimationStack;\r\n\r\n\t\t// connect the stacks (clips) up to the layers\r\n\t\tconst rawClips = {};\r\n\r\n\t\tfor ( const nodeID in rawStacks ) {\r\n\r\n\t\t\tconst children = connections.get( parseInt( nodeID ) ).children;\r\n\r\n\t\t\tif ( children.length > 1 ) {\r\n\r\n\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\r\n\t\t\t\t// where there are multiple layers per stack, we'll display a warning\r\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst layer = layersMap.get( children[ 0 ].ID );\r\n\r\n\t\t\trawClips[ nodeID ] = {\r\n\r\n\t\t\t\tname: rawStacks[ nodeID ].attrName,\r\n\t\t\t\tlayer: layer,\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn rawClips;\r\n\r\n\t}\r\n\r\n\taddClip( rawClip ) {\r\n\r\n\t\tlet tracks = [];\r\n\r\n\t\tconst scope = this;\r\n\t\trawClip.layer.forEach( function ( rawTracks ) {\r\n\r\n\t\t\ttracks = tracks.concat( scope.generateTracks( rawTracks ) );\r\n\r\n\t\t} );\r\n\r\n\t\treturn new AnimationClip( rawClip.name, - 1, tracks );\r\n\r\n\t}\r\n\r\n\tgenerateTracks( rawTracks ) {\r\n\r\n\t\tconst tracks = [];\r\n\r\n\t\tlet initialPosition = new Vector3();\r\n\t\tlet initialRotation = new Quaternion();\r\n\t\tlet initialScale = new Vector3();\r\n\r\n\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\r\n\r\n\t\tinitialPosition = initialPosition.toArray();\r\n\t\tinitialRotation = new Euler().setFromQuaternion( initialRotation, rawTracks.eulerOrder ).toArray();\r\n\t\tinitialScale = initialScale.toArray();\r\n\r\n\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\r\n\r\n\t\t\tconst positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\r\n\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\r\n\r\n\t\t}\r\n\r\n\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\r\n\r\n\t\t\tconst rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotation, rawTracks.postRotation, rawTracks.eulerOrder );\r\n\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\r\n\r\n\t\t}\r\n\r\n\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\r\n\r\n\t\t\tconst scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\r\n\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\r\n\r\n\t\t}\r\n\r\n\t\tif ( rawTracks.DeformPercent !== undefined ) {\r\n\r\n\t\t\tconst morphTrack = this.generateMorphTrack( rawTracks );\r\n\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\r\n\r\n\t\t}\r\n\r\n\t\treturn tracks;\r\n\r\n\t}\r\n\r\n\tgenerateVectorTrack( modelName, curves, initialValue, type ) {\r\n\r\n\t\tconst times = this.getTimesForAllAxes( curves );\r\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\r\n\r\n\t\treturn new VectorKeyframeTrack( modelName + '.' + type, times, values );\r\n\r\n\t}\r\n\r\n\tgenerateRotationTrack( modelName, curves, initialValue, preRotation, postRotation, eulerOrder ) {\r\n\r\n\t\tif ( curves.x !== undefined ) {\r\n\r\n\t\t\tthis.interpolateRotations( curves.x );\r\n\t\t\tcurves.x.values = curves.x.values.map( MathUtils.degToRad );\r\n\r\n\t\t}\r\n\r\n\t\tif ( curves.y !== undefined ) {\r\n\r\n\t\t\tthis.interpolateRotations( curves.y );\r\n\t\t\tcurves.y.values = curves.y.values.map( MathUtils.degToRad );\r\n\r\n\t\t}\r\n\r\n\t\tif ( curves.z !== undefined ) {\r\n\r\n\t\t\tthis.interpolateRotations( curves.z );\r\n\t\t\tcurves.z.values = curves.z.values.map( MathUtils.degToRad );\r\n\r\n\t\t}\r\n\r\n\t\tconst times = this.getTimesForAllAxes( curves );\r\n\t\tconst values = this.getKeyframeTrackValues( times, curves, initialValue );\r\n\r\n\t\tif ( preRotation !== undefined ) {\r\n\r\n\t\t\tpreRotation = preRotation.map( MathUtils.degToRad );\r\n\t\t\tpreRotation.push( eulerOrder );\r\n\r\n\t\t\tpreRotation = new Euler().fromArray( preRotation );\r\n\t\t\tpreRotation = new Quaternion().setFromEuler( preRotation );\r\n\r\n\t\t}\r\n\r\n\t\tif ( postRotation !== undefined ) {\r\n\r\n\t\t\tpostRotation = postRotation.map( MathUtils.degToRad );\r\n\t\t\tpostRotation.push( eulerOrder );\r\n\r\n\t\t\tpostRotation = new Euler().fromArray( postRotation );\r\n\t\t\tpostRotation = new Quaternion().setFromEuler( postRotation ).invert();\r\n\r\n\t\t}\r\n\r\n\t\tconst quaternion = new Quaternion();\r\n\t\tconst euler = new Euler();\r\n\r\n\t\tconst quaternionValues = [];\r\n\r\n\t\tfor ( let i = 0; i < values.length; i += 3 ) {\r\n\r\n\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], eulerOrder );\r\n\r\n\t\t\tquaternion.setFromEuler( euler );\r\n\r\n\t\t\tif ( preRotation !== undefined ) quaternion.premultiply( preRotation );\r\n\t\t\tif ( postRotation !== undefined ) quaternion.multiply( postRotation );\r\n\r\n\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\r\n\r\n\t\t}\r\n\r\n\t\treturn new QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\r\n\r\n\t}\r\n\r\n\tgenerateMorphTrack( rawTracks ) {\r\n\r\n\t\tconst curves = rawTracks.DeformPercent.curves.morph;\r\n\t\tconst values = curves.values.map( function ( val ) {\r\n\r\n\t\t\treturn val / 100;\r\n\r\n\t\t} );\r\n\r\n\t\tconst morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\r\n\r\n\t\treturn new NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\r\n\r\n\t}\r\n\r\n\t// For all animated objects, times are defined separately for each axis\r\n\t// Here we'll combine the times into one sorted array without duplicates\r\n\tgetTimesForAllAxes( curves ) {\r\n\r\n\t\tlet times = [];\r\n\r\n\t\t// first join together the times for each axis, if defined\r\n\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\r\n\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\r\n\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\r\n\r\n\t\t// then sort them\r\n\t\ttimes = times.sort( function ( a, b ) {\r\n\r\n\t\t\treturn a - b;\r\n\r\n\t\t} );\r\n\r\n\t\t// and remove duplicates\r\n\t\tif ( times.length > 1 ) {\r\n\r\n\t\t\tlet targetIndex = 1;\r\n\t\t\tlet lastValue = times[ 0 ];\r\n\t\t\tfor ( let i = 1; i < times.length; i ++ ) {\r\n\r\n\t\t\t\tconst currentValue = times[ i ];\r\n\t\t\t\tif ( currentValue !== lastValue ) {\r\n\r\n\t\t\t\t\ttimes[ targetIndex ] = currentValue;\r\n\t\t\t\t\tlastValue = currentValue;\r\n\t\t\t\t\ttargetIndex ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttimes = times.slice( 0, targetIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn times;\r\n\r\n\t}\r\n\r\n\tgetKeyframeTrackValues( times, curves, initialValue ) {\r\n\r\n\t\tconst prevValue = initialValue;\r\n\r\n\t\tconst values = [];\r\n\r\n\t\tlet xIndex = - 1;\r\n\t\tlet yIndex = - 1;\r\n\t\tlet zIndex = - 1;\r\n\r\n\t\ttimes.forEach( function ( time ) {\r\n\r\n\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\r\n\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\r\n\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\r\n\r\n\t\t\t// if there is an x value defined for this frame, use that\r\n\t\t\tif ( xIndex !== - 1 ) {\r\n\r\n\t\t\t\tconst xValue = curves.x.values[ xIndex ];\r\n\t\t\t\tvalues.push( xValue );\r\n\t\t\t\tprevValue[ 0 ] = xValue;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// otherwise use the x value from the previous frame\r\n\t\t\t\tvalues.push( prevValue[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( yIndex !== - 1 ) {\r\n\r\n\t\t\t\tconst yValue = curves.y.values[ yIndex ];\r\n\t\t\t\tvalues.push( yValue );\r\n\t\t\t\tprevValue[ 1 ] = yValue;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalues.push( prevValue[ 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( zIndex !== - 1 ) {\r\n\r\n\t\t\t\tconst zValue = curves.z.values[ zIndex ];\r\n\t\t\t\tvalues.push( zValue );\r\n\t\t\t\tprevValue[ 2 ] = zValue;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalues.push( prevValue[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn values;\r\n\r\n\t}\r\n\r\n\t// Rotations are defined as Euler angles which can have values  of any size\r\n\t// These will be converted to quaternions which don't support values greater than\r\n\t// PI, so we'll interpolate large rotations\r\n\tinterpolateRotations( curve ) {\r\n\r\n\t\tfor ( let i = 1; i < curve.values.length; i ++ ) {\r\n\r\n\t\t\tconst initialValue = curve.values[ i - 1 ];\r\n\t\t\tconst valuesSpan = curve.values[ i ] - initialValue;\r\n\r\n\t\t\tconst absoluteSpan = Math.abs( valuesSpan );\r\n\r\n\t\t\tif ( absoluteSpan >= 180 ) {\r\n\r\n\t\t\t\tconst numSubIntervals = absoluteSpan / 180;\r\n\r\n\t\t\t\tconst step = valuesSpan / numSubIntervals;\r\n\t\t\t\tlet nextValue = initialValue + step;\r\n\r\n\t\t\t\tconst initialTime = curve.times[ i - 1 ];\r\n\t\t\t\tconst timeSpan = curve.times[ i ] - initialTime;\r\n\t\t\t\tconst interval = timeSpan / numSubIntervals;\r\n\t\t\t\tlet nextTime = initialTime + interval;\r\n\r\n\t\t\t\tconst interpolatedTimes = [];\r\n\t\t\t\tconst interpolatedValues = [];\r\n\r\n\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\r\n\r\n\t\t\t\t\tinterpolatedTimes.push( nextTime );\r\n\t\t\t\t\tnextTime += interval;\r\n\r\n\t\t\t\t\tinterpolatedValues.push( nextValue );\r\n\t\t\t\t\tnextValue += step;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\r\n\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n// parse an FBX file in ASCII format\r\nclass TextParser {\r\n\r\n\tgetPrevNode() {\r\n\r\n\t\treturn this.nodeStack[ this.currentIndent - 2 ];\r\n\r\n\t}\r\n\r\n\tgetCurrentNode() {\r\n\r\n\t\treturn this.nodeStack[ this.currentIndent - 1 ];\r\n\r\n\t}\r\n\r\n\tgetCurrentProp() {\r\n\r\n\t\treturn this.currentProp;\r\n\r\n\t}\r\n\r\n\tpushStack( node ) {\r\n\r\n\t\tthis.nodeStack.push( node );\r\n\t\tthis.currentIndent += 1;\r\n\r\n\t}\r\n\r\n\tpopStack() {\r\n\r\n\t\tthis.nodeStack.pop();\r\n\t\tthis.currentIndent -= 1;\r\n\r\n\t}\r\n\r\n\tsetCurrentProp( val, name ) {\r\n\r\n\t\tthis.currentProp = val;\r\n\t\tthis.currentPropName = name;\r\n\r\n\t}\r\n\r\n\tparse( text ) {\r\n\r\n\t\tthis.currentIndent = 0;\r\n\r\n\t\tthis.allNodes = new FBXTree();\r\n\t\tthis.nodeStack = [];\r\n\t\tthis.currentProp = [];\r\n\t\tthis.currentPropName = '';\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst split = text.split( /[\\r\\n]+/ );\r\n\r\n\t\tsplit.forEach( function ( line, i ) {\r\n\r\n\t\t\tconst matchComment = line.match( /^[\\s\\t]*;/ );\r\n\t\t\tconst matchEmpty = line.match( /^[\\s\\t]*$/ );\r\n\r\n\t\t\tif ( matchComment || matchEmpty ) return;\r\n\r\n\t\t\tconst matchBeginning = line.match( '^\\\\t{' + scope.currentIndent + '}(\\\\w+):(.*){', '' );\r\n\t\t\tconst matchProperty = line.match( '^\\\\t{' + ( scope.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\r\n\t\t\tconst matchEnd = line.match( '^\\\\t{' + ( scope.currentIndent - 1 ) + '}}' );\r\n\r\n\t\t\tif ( matchBeginning ) {\r\n\r\n\t\t\t\tscope.parseNodeBegin( line, matchBeginning );\r\n\r\n\t\t\t} else if ( matchProperty ) {\r\n\r\n\t\t\t\tscope.parseNodeProperty( line, matchProperty, split[ ++ i ] );\r\n\r\n\t\t\t} else if ( matchEnd ) {\r\n\r\n\t\t\t\tscope.popStack();\r\n\r\n\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\r\n\r\n\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\r\n\t\t\t\t// if this is encountered the line needs to be joined to the previous line\r\n\t\t\t\tscope.parseNodePropertyContinued( line );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\treturn this.allNodes;\r\n\r\n\t}\r\n\r\n\tparseNodeBegin( line, property ) {\r\n\r\n\t\tconst nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\r\n\r\n\t\tconst nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\r\n\r\n\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\r\n\r\n\t\t} );\r\n\r\n\t\tconst node = { name: nodeName };\r\n\t\tconst attrs = this.parseNodeAttr( nodeAttrs );\r\n\r\n\t\tconst currentNode = this.getCurrentNode();\r\n\r\n\t\t// a top node\r\n\t\tif ( this.currentIndent === 0 ) {\r\n\r\n\t\t\tthis.allNodes.add( nodeName, node );\r\n\r\n\t\t} else { // a subnode\r\n\r\n\t\t\t// if the subnode already exists, append it\r\n\t\t\tif ( nodeName in currentNode ) {\r\n\r\n\t\t\t\t// special case Pose needs PoseNodes as an array\r\n\t\t\t\tif ( nodeName === 'PoseNode' ) {\r\n\r\n\t\t\t\t\tcurrentNode.PoseNode.push( node );\r\n\r\n\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\r\n\r\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\r\n\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\r\n\r\n\t\t\t} else if ( typeof attrs.id === 'number' ) {\r\n\r\n\t\t\t\tcurrentNode[ nodeName ] = {};\r\n\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\r\n\r\n\t\t\t} else if ( nodeName !== 'Properties70' ) {\r\n\r\n\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\r\n\t\t\t\telse currentNode[ nodeName ] = node;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\r\n\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\r\n\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\r\n\r\n\t\tthis.pushStack( node );\r\n\r\n\t}\r\n\r\n\tparseNodeAttr( attrs ) {\r\n\r\n\t\tlet id = attrs[ 0 ];\r\n\r\n\t\tif ( attrs[ 0 ] !== '' ) {\r\n\r\n\t\t\tid = parseInt( attrs[ 0 ] );\r\n\r\n\t\t\tif ( isNaN( id ) ) {\r\n\r\n\t\t\t\tid = attrs[ 0 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet name = '', type = '';\r\n\r\n\t\tif ( attrs.length > 1 ) {\r\n\r\n\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\r\n\t\t\ttype = attrs[ 2 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn { id: id, name: name, type: type };\r\n\r\n\t}\r\n\r\n\tparseNodeProperty( line, property, contentLine ) {\r\n\r\n\t\tlet propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\r\n\t\tlet propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\r\n\r\n\t\t// for special case: base64 image data follows \"Content: ,\" line\r\n\t\t//\tContent: ,\r\n\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\r\n\t\tif ( propName === 'Content' && propValue === ',' ) {\r\n\r\n\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\r\n\r\n\t\t}\r\n\r\n\t\tconst currentNode = this.getCurrentNode();\r\n\t\tconst parentName = currentNode.name;\r\n\r\n\t\tif ( parentName === 'Properties70' ) {\r\n\r\n\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// Connections\r\n\t\tif ( propName === 'C' ) {\r\n\r\n\t\t\tconst connProps = propValue.split( ',' ).slice( 1 );\r\n\t\t\tconst from = parseInt( connProps[ 0 ] );\r\n\t\t\tconst to = parseInt( connProps[ 1 ] );\r\n\r\n\t\t\tlet rest = propValue.split( ',' ).slice( 3 );\r\n\r\n\t\t\trest = rest.map( function ( elem ) {\r\n\r\n\t\t\t\treturn elem.trim().replace( /^\"/, '' );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tpropName = 'connections';\r\n\t\t\tpropValue = [ from, to ];\r\n\t\t\tappend( propValue, rest );\r\n\r\n\t\t\tif ( currentNode[ propName ] === undefined ) {\r\n\r\n\t\t\t\tcurrentNode[ propName ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Node\r\n\t\tif ( propName === 'Node' ) currentNode.id = propValue;\r\n\r\n\t\t// connections\r\n\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\r\n\r\n\t\t\tcurrentNode[ propName ].push( propValue );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\r\n\t\t\telse currentNode.a = propValue;\r\n\r\n\t\t}\r\n\r\n\t\tthis.setCurrentProp( currentNode, propName );\r\n\r\n\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\r\n\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\r\n\r\n\t\t\tcurrentNode.a = parseNumberArray( propValue );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tparseNodePropertyContinued( line ) {\r\n\r\n\t\tconst currentNode = this.getCurrentNode();\r\n\r\n\t\tcurrentNode.a += line;\r\n\r\n\t\t// if the line doesn't end in ',' we have reached the end of the property value\r\n\t\t// so convert the string to an array\r\n\t\tif ( line.slice( - 1 ) !== ',' ) {\r\n\r\n\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// parse \"Property70\"\r\n\tparseNodeSpecialProperty( line, propName, propValue ) {\r\n\r\n\t\t// split this\r\n\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\r\n\t\t// into array like below\r\n\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\r\n\t\tconst props = propValue.split( '\",' ).map( function ( prop ) {\r\n\r\n\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\r\n\r\n\t\t} );\r\n\r\n\t\tconst innerPropName = props[ 0 ];\r\n\t\tconst innerPropType1 = props[ 1 ];\r\n\t\tconst innerPropType2 = props[ 2 ];\r\n\t\tconst innerPropFlag = props[ 3 ];\r\n\t\tlet innerPropValue = props[ 4 ];\r\n\r\n\t\t// cast values where needed, otherwise leave as strings\r\n\t\tswitch ( innerPropType1 ) {\r\n\r\n\t\t\tcase 'int':\r\n\t\t\tcase 'enum':\r\n\t\t\tcase 'bool':\r\n\t\t\tcase 'ULongLong':\r\n\t\t\tcase 'double':\r\n\t\t\tcase 'Number':\r\n\t\t\tcase 'FieldOfView':\r\n\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'Color':\r\n\t\t\tcase 'ColorRGB':\r\n\t\t\tcase 'Vector3D':\r\n\t\t\tcase 'Lcl_Translation':\r\n\t\t\tcase 'Lcl_Rotation':\r\n\t\t\tcase 'Lcl_Scaling':\r\n\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\t// CAUTION: these props must append to parent's parent\r\n\t\tthis.getPrevNode()[ innerPropName ] = {\r\n\r\n\t\t\t'type': innerPropType1,\r\n\t\t\t'type2': innerPropType2,\r\n\t\t\t'flag': innerPropFlag,\r\n\t\t\t'value': innerPropValue\r\n\r\n\t\t};\r\n\r\n\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Parse an FBX file in Binary format\r\nclass BinaryParser {\r\n\r\n\tparse( buffer ) {\r\n\r\n\t\tconst reader = new BinaryReader( buffer );\r\n\t\treader.skip( 23 ); // skip magic 23 bytes\r\n\r\n\t\tconst version = reader.getUint32();\r\n\r\n\t\tif ( version < 6400 ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + version );\r\n\r\n\t\t}\r\n\r\n\t\tconst allNodes = new FBXTree();\r\n\r\n\t\twhile ( ! this.endOfContent( reader ) ) {\r\n\r\n\t\t\tconst node = this.parseNode( reader, version );\r\n\t\t\tif ( node !== null ) allNodes.add( node.name, node );\r\n\r\n\t\t}\r\n\r\n\t\treturn allNodes;\r\n\r\n\t}\r\n\r\n\t// Check if reader has reached the end of content.\r\n\tendOfContent( reader ) {\r\n\r\n\t\t// footer size: 160bytes + 16-byte alignment padding\r\n\t\t// - 16bytes: magic\r\n\t\t// - padding til 16-byte alignment (at least 1byte?)\r\n\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\r\n\t\t// - 4bytes: magic\r\n\t\t// - 4bytes: version\r\n\t\t// - 120bytes: zero\r\n\t\t// - 16bytes: magic\r\n\t\tif ( reader.size() % 16 === 0 ) {\r\n\r\n\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// recursively parse nodes until the end of the file is reached\r\n\tparseNode( reader, version ) {\r\n\r\n\t\tconst node = {};\r\n\r\n\t\t// The first three data sizes depends on version.\r\n\t\tconst endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\r\n\t\tconst numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\r\n\r\n\t\t( version >= 7500 ) ? reader.getUint64() : reader.getUint32(); // the returned propertyListLen is not used\r\n\r\n\t\tconst nameLen = reader.getUint8();\r\n\t\tconst name = reader.getString( nameLen );\r\n\r\n\t\t// Regards this node as NULL-record if endOffset is zero\r\n\t\tif ( endOffset === 0 ) return null;\r\n\r\n\t\tconst propertyList = [];\r\n\r\n\t\tfor ( let i = 0; i < numProperties; i ++ ) {\r\n\r\n\t\t\tpropertyList.push( this.parseProperty( reader ) );\r\n\r\n\t\t}\r\n\r\n\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\r\n\t\tconst id = propertyList.length > 0 ? propertyList[ 0 ] : '';\r\n\t\tconst attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\r\n\t\tconst attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\r\n\r\n\t\t// check if this node represents just a single property\r\n\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\r\n\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\r\n\r\n\t\twhile ( endOffset > reader.getOffset() ) {\r\n\r\n\t\t\tconst subNode = this.parseNode( reader, version );\r\n\r\n\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\r\n\r\n\t\t}\r\n\r\n\t\tnode.propertyList = propertyList; // raw property list used by parent\r\n\r\n\t\tif ( typeof id === 'number' ) node.id = id;\r\n\t\tif ( attrName !== '' ) node.attrName = attrName;\r\n\t\tif ( attrType !== '' ) node.attrType = attrType;\r\n\t\tif ( name !== '' ) node.name = name;\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tparseSubNode( name, node, subNode ) {\r\n\r\n\t\t// special case: child node is single property\r\n\t\tif ( subNode.singleProperty === true ) {\r\n\r\n\t\t\tconst value = subNode.propertyList[ 0 ];\r\n\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\t\tnode[ subNode.name ] = subNode;\r\n\r\n\t\t\t\tsubNode.a = value;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode[ subNode.name ] = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\r\n\r\n\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\r\n\t\t\t\tif ( i !== 0 ) array.push( property );\r\n\r\n\t\t\t} );\r\n\r\n\t\t\tif ( node.connections === undefined ) {\r\n\r\n\t\t\t\tnode.connections = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnode.connections.push( array );\r\n\r\n\t\t} else if ( subNode.name === 'Properties70' ) {\r\n\r\n\t\t\tconst keys = Object.keys( subNode );\r\n\r\n\t\t\tkeys.forEach( function ( key ) {\r\n\r\n\t\t\t\tnode[ key ] = subNode[ key ];\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\r\n\r\n\t\t\tlet innerPropName = subNode.propertyList[ 0 ];\r\n\t\t\tlet innerPropType1 = subNode.propertyList[ 1 ];\r\n\t\t\tconst innerPropType2 = subNode.propertyList[ 2 ];\r\n\t\t\tconst innerPropFlag = subNode.propertyList[ 3 ];\r\n\t\t\tlet innerPropValue;\r\n\r\n\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\r\n\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\r\n\r\n\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\r\n\r\n\t\t\t\tinnerPropValue = [\r\n\t\t\t\t\tsubNode.propertyList[ 4 ],\r\n\t\t\t\t\tsubNode.propertyList[ 5 ],\r\n\t\t\t\t\tsubNode.propertyList[ 6 ]\r\n\t\t\t\t];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// this will be copied to parent, see above\r\n\t\t\tnode[ innerPropName ] = {\r\n\r\n\t\t\t\t'type': innerPropType1,\r\n\t\t\t\t'type2': innerPropType2,\r\n\t\t\t\t'flag': innerPropFlag,\r\n\t\t\t\t'value': innerPropValue\r\n\r\n\t\t\t};\r\n\r\n\t\t} else if ( node[ subNode.name ] === undefined ) {\r\n\r\n\t\t\tif ( typeof subNode.id === 'number' ) {\r\n\r\n\t\t\t\tnode[ subNode.name ] = {};\r\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode[ subNode.name ] = subNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( subNode.name === 'PoseNode' ) {\r\n\r\n\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\r\n\r\n\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode[ subNode.name ].push( subNode );\r\n\r\n\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\r\n\r\n\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tparseProperty( reader ) {\r\n\r\n\t\tconst type = reader.getString( 1 );\r\n\t\tlet length;\r\n\r\n\t\tswitch ( type ) {\r\n\r\n\t\t\tcase 'C':\r\n\t\t\t\treturn reader.getBoolean();\r\n\r\n\t\t\tcase 'D':\r\n\t\t\t\treturn reader.getFloat64();\r\n\r\n\t\t\tcase 'F':\r\n\t\t\t\treturn reader.getFloat32();\r\n\r\n\t\t\tcase 'I':\r\n\t\t\t\treturn reader.getInt32();\r\n\r\n\t\t\tcase 'L':\r\n\t\t\t\treturn reader.getInt64();\r\n\r\n\t\t\tcase 'R':\r\n\t\t\t\tlength = reader.getUint32();\r\n\t\t\t\treturn reader.getArrayBuffer( length );\r\n\r\n\t\t\tcase 'S':\r\n\t\t\t\tlength = reader.getUint32();\r\n\t\t\t\treturn reader.getString( length );\r\n\r\n\t\t\tcase 'Y':\r\n\t\t\t\treturn reader.getInt16();\r\n\r\n\t\t\tcase 'b':\r\n\t\t\tcase 'c':\r\n\t\t\tcase 'd':\r\n\t\t\tcase 'f':\r\n\t\t\tcase 'i':\r\n\t\t\tcase 'l':\r\n\r\n\t\t\t\tconst arrayLength = reader.getUint32();\r\n\t\t\t\tconst encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\r\n\t\t\t\tconst compressedLength = reader.getUint32();\r\n\r\n\t\t\t\tif ( encoding === 0 ) {\r\n\r\n\t\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\r\n\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\r\n\r\n\t\t\t\t\t\tcase 'f':\r\n\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\r\n\r\n\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\r\n\r\n\t\t\t\t\t\tcase 'l':\r\n\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst data = fflate.unzlibSync( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) );\r\n\t\t\t\tconst reader2 = new BinaryReader( data.buffer );\r\n\r\n\t\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\t\tcase 'b':\r\n\t\t\t\t\tcase 'c':\r\n\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\r\n\r\n\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\r\n\r\n\t\t\t\t\tcase 'f':\r\n\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\r\n\r\n\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\r\n\r\n\t\t\t\t\tcase 'l':\r\n\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak; // cannot happen but is required by the DeepScan\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass BinaryReader {\r\n\r\n\tconstructor( buffer, littleEndian ) {\r\n\r\n\t\tthis.dv = new DataView( buffer );\r\n\t\tthis.offset = 0;\r\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\r\n\t\tthis._textDecoder = new TextDecoder();\r\n\r\n\t}\r\n\r\n\tgetOffset() {\r\n\r\n\t\treturn this.offset;\r\n\r\n\t}\r\n\r\n\tsize() {\r\n\r\n\t\treturn this.dv.buffer.byteLength;\r\n\r\n\t}\r\n\r\n\tskip( length ) {\r\n\r\n\t\tthis.offset += length;\r\n\r\n\t}\r\n\r\n\t// seems like true/false representation depends on exporter.\r\n\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\r\n\t// then sees LSB.\r\n\tgetBoolean() {\r\n\r\n\t\treturn ( this.getUint8() & 1 ) === 1;\r\n\r\n\t}\r\n\r\n\tgetBooleanArray( size ) {\r\n\r\n\t\tconst a = [];\r\n\r\n\t\tfor ( let i = 0; i < size; i ++ ) {\r\n\r\n\t\t\ta.push( this.getBoolean() );\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t}\r\n\r\n\tgetUint8() {\r\n\r\n\t\tconst value = this.dv.getUint8( this.offset );\r\n\t\tthis.offset += 1;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tgetInt16() {\r\n\r\n\t\tconst value = this.dv.getInt16( this.offset, this.littleEndian );\r\n\t\tthis.offset += 2;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tgetInt32() {\r\n\r\n\t\tconst value = this.dv.getInt32( this.offset, this.littleEndian );\r\n\t\tthis.offset += 4;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tgetInt32Array( size ) {\r\n\r\n\t\tconst a = [];\r\n\r\n\t\tfor ( let i = 0; i < size; i ++ ) {\r\n\r\n\t\t\ta.push( this.getInt32() );\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t}\r\n\r\n\tgetUint32() {\r\n\r\n\t\tconst value = this.dv.getUint32( this.offset, this.littleEndian );\r\n\t\tthis.offset += 4;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\t// JavaScript doesn't support 64-bit integer so calculate this here\r\n\t// 1 << 32 will return 1 so using multiply operation instead here.\r\n\t// There's a possibility that this method returns wrong value if the value\r\n\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\r\n\t// TODO: safely handle 64-bit integer\r\n\tgetInt64() {\r\n\r\n\t\tlet low, high;\r\n\r\n\t\tif ( this.littleEndian ) {\r\n\r\n\t\t\tlow = this.getUint32();\r\n\t\t\thigh = this.getUint32();\r\n\r\n\t\t} else {\r\n\r\n\t\t\thigh = this.getUint32();\r\n\t\t\tlow = this.getUint32();\r\n\r\n\t\t}\r\n\r\n\t\t// calculate negative value\r\n\t\tif ( high & 0x80000000 ) {\r\n\r\n\t\t\thigh = ~ high & 0xFFFFFFFF;\r\n\t\t\tlow = ~ low & 0xFFFFFFFF;\r\n\r\n\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\r\n\r\n\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\r\n\r\n\t\t\treturn - ( high * 0x100000000 + low );\r\n\r\n\t\t}\r\n\r\n\t\treturn high * 0x100000000 + low;\r\n\r\n\t}\r\n\r\n\tgetInt64Array( size ) {\r\n\r\n\t\tconst a = [];\r\n\r\n\t\tfor ( let i = 0; i < size; i ++ ) {\r\n\r\n\t\t\ta.push( this.getInt64() );\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t}\r\n\r\n\t// Note: see getInt64() comment\r\n\tgetUint64() {\r\n\r\n\t\tlet low, high;\r\n\r\n\t\tif ( this.littleEndian ) {\r\n\r\n\t\t\tlow = this.getUint32();\r\n\t\t\thigh = this.getUint32();\r\n\r\n\t\t} else {\r\n\r\n\t\t\thigh = this.getUint32();\r\n\t\t\tlow = this.getUint32();\r\n\r\n\t\t}\r\n\r\n\t\treturn high * 0x100000000 + low;\r\n\r\n\t}\r\n\r\n\tgetFloat32() {\r\n\r\n\t\tconst value = this.dv.getFloat32( this.offset, this.littleEndian );\r\n\t\tthis.offset += 4;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tgetFloat32Array( size ) {\r\n\r\n\t\tconst a = [];\r\n\r\n\t\tfor ( let i = 0; i < size; i ++ ) {\r\n\r\n\t\t\ta.push( this.getFloat32() );\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t}\r\n\r\n\tgetFloat64() {\r\n\r\n\t\tconst value = this.dv.getFloat64( this.offset, this.littleEndian );\r\n\t\tthis.offset += 8;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tgetFloat64Array( size ) {\r\n\r\n\t\tconst a = [];\r\n\r\n\t\tfor ( let i = 0; i < size; i ++ ) {\r\n\r\n\t\t\ta.push( this.getFloat64() );\r\n\r\n\t\t}\r\n\r\n\t\treturn a;\r\n\r\n\t}\r\n\r\n\tgetArrayBuffer( size ) {\r\n\r\n\t\tconst value = this.dv.buffer.slice( this.offset, this.offset + size );\r\n\t\tthis.offset += size;\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\tgetString( size ) {\r\n\r\n\t\tconst start = this.offset;\r\n\t\tlet a = new Uint8Array( this.dv.buffer, start, size );\r\n\r\n\t\tthis.skip( size );\r\n\r\n\t\tconst nullByte = a.indexOf( 0 );\r\n\t\tif ( nullByte >= 0 ) a = new Uint8Array( this.dv.buffer, start, nullByte );\r\n\r\n\t\treturn this._textDecoder.decode( a );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\r\n// and BinaryParser( FBX Binary format)\r\nclass FBXTree {\r\n\r\n\tadd( key, val ) {\r\n\r\n\t\tthis[ key ] = val;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// ************** UTILITY FUNCTIONS **************\r\n\r\nfunction isFbxFormatBinary( buffer ) {\r\n\r\n\tconst CORRECT = 'Kaydara\\u0020FBX\\u0020Binary\\u0020\\u0020\\0';\r\n\r\n\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\r\n\r\n}\r\n\r\nfunction isFbxFormatASCII( text ) {\r\n\r\n\tconst CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\r\n\r\n\tlet cursor = 0;\r\n\r\n\tfunction read( offset ) {\r\n\r\n\t\tconst result = text[ offset - 1 ];\r\n\t\ttext = text.slice( cursor + offset );\r\n\t\tcursor ++;\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0; i < CORRECT.length; ++ i ) {\r\n\r\n\t\tconst num = read( 1 );\r\n\t\tif ( num === CORRECT[ i ] ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nfunction getFbxVersion( text ) {\r\n\r\n\tconst versionRegExp = /FBXVersion: (\\d+)/;\r\n\tconst match = text.match( versionRegExp );\r\n\r\n\tif ( match ) {\r\n\r\n\t\tconst version = parseInt( match[ 1 ] );\r\n\t\treturn version;\r\n\r\n\t}\r\n\r\n\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\r\n\r\n}\r\n\r\n// Converts FBX ticks into real time seconds.\r\nfunction convertFBXTimeToSeconds( time ) {\r\n\r\n\treturn time / 46186158000;\r\n\r\n}\r\n\r\nconst dataArray = [];\r\n\r\n// extracts the data from the correct position in the FBX array based on indexing type\r\nfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\r\n\r\n\tlet index;\r\n\r\n\tswitch ( infoObject.mappingType ) {\r\n\r\n\t\tcase 'ByPolygonVertex' :\r\n\t\t\tindex = polygonVertexIndex;\r\n\t\t\tbreak;\r\n\t\tcase 'ByPolygon' :\r\n\t\t\tindex = polygonIndex;\r\n\t\t\tbreak;\r\n\t\tcase 'ByVertice' :\r\n\t\t\tindex = vertexIndex;\r\n\t\t\tbreak;\r\n\t\tcase 'AllSame' :\r\n\t\t\tindex = infoObject.indices[ 0 ];\r\n\t\t\tbreak;\r\n\t\tdefault :\r\n\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\r\n\r\n\t}\r\n\r\n\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\r\n\r\n\tconst from = index * infoObject.dataSize;\r\n\tconst to = from + infoObject.dataSize;\r\n\r\n\treturn slice( dataArray, infoObject.buffer, from, to );\r\n\r\n}\r\n\r\nconst tempEuler = new Euler();\r\nconst tempVec = new Vector3();\r\n\r\n// generate transformation from FBX transform data\r\n// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\r\n// ref: http://docs.autodesk.com/FBX/2014/ENU/FBX-SDK-Documentation/index.html?url=cpp_ref/_transformations_2main_8cxx-example.html,topicNumber=cpp_ref__transformations_2main_8cxx_example_htmlfc10a1e1-b18d-4e72-9dc0-70d0f1959f5e\r\nfunction generateTransform( transformData ) {\r\n\r\n\tconst lTranslationM = new Matrix4();\r\n\tconst lPreRotationM = new Matrix4();\r\n\tconst lRotationM = new Matrix4();\r\n\tconst lPostRotationM = new Matrix4();\r\n\r\n\tconst lScalingM = new Matrix4();\r\n\tconst lScalingPivotM = new Matrix4();\r\n\tconst lScalingOffsetM = new Matrix4();\r\n\tconst lRotationOffsetM = new Matrix4();\r\n\tconst lRotationPivotM = new Matrix4();\r\n\r\n\tconst lParentGX = new Matrix4();\r\n\tconst lParentLX = new Matrix4();\r\n\tconst lGlobalT = new Matrix4();\r\n\r\n\tconst inheritType = ( transformData.inheritType ) ? transformData.inheritType : 0;\r\n\r\n\tif ( transformData.translation ) lTranslationM.setPosition( tempVec.fromArray( transformData.translation ) );\r\n\r\n\tif ( transformData.preRotation ) {\r\n\r\n\t\tconst array = transformData.preRotation.map( MathUtils.degToRad );\r\n\t\tarray.push( transformData.eulerOrder || Euler.DEFAULT_ORDER );\r\n\t\tlPreRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\r\n\r\n\t}\r\n\r\n\tif ( transformData.rotation ) {\r\n\r\n\t\tconst array = transformData.rotation.map( MathUtils.degToRad );\r\n\t\tarray.push( transformData.eulerOrder || Euler.DEFAULT_ORDER );\r\n\t\tlRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\r\n\r\n\t}\r\n\r\n\tif ( transformData.postRotation ) {\r\n\r\n\t\tconst array = transformData.postRotation.map( MathUtils.degToRad );\r\n\t\tarray.push( transformData.eulerOrder || Euler.DEFAULT_ORDER );\r\n\t\tlPostRotationM.makeRotationFromEuler( tempEuler.fromArray( array ) );\r\n\t\tlPostRotationM.invert();\r\n\r\n\t}\r\n\r\n\tif ( transformData.scale ) lScalingM.scale( tempVec.fromArray( transformData.scale ) );\r\n\r\n\t// Pivots and offsets\r\n\tif ( transformData.scalingOffset ) lScalingOffsetM.setPosition( tempVec.fromArray( transformData.scalingOffset ) );\r\n\tif ( transformData.scalingPivot ) lScalingPivotM.setPosition( tempVec.fromArray( transformData.scalingPivot ) );\r\n\tif ( transformData.rotationOffset ) lRotationOffsetM.setPosition( tempVec.fromArray( transformData.rotationOffset ) );\r\n\tif ( transformData.rotationPivot ) lRotationPivotM.setPosition( tempVec.fromArray( transformData.rotationPivot ) );\r\n\r\n\t// parent transform\r\n\tif ( transformData.parentMatrixWorld ) {\r\n\r\n\t\tlParentLX.copy( transformData.parentMatrix );\r\n\t\tlParentGX.copy( transformData.parentMatrixWorld );\r\n\r\n\t}\r\n\r\n\tconst lLRM = lPreRotationM.clone().multiply( lRotationM ).multiply( lPostRotationM );\r\n\t// Global Rotation\r\n\tconst lParentGRM = new Matrix4();\r\n\tlParentGRM.extractRotation( lParentGX );\r\n\r\n\t// Global Shear*Scaling\r\n\tconst lParentTM = new Matrix4();\r\n\tlParentTM.copyPosition( lParentGX );\r\n\r\n\tconst lParentGRSM = lParentTM.clone().invert().multiply( lParentGX );\r\n\tconst lParentGSM = lParentGRM.clone().invert().multiply( lParentGRSM );\r\n\tconst lLSM = lScalingM;\r\n\r\n\tconst lGlobalRS = new Matrix4();\r\n\r\n\tif ( inheritType === 0 ) {\r\n\r\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM ).multiply( lLSM );\r\n\r\n\t} else if ( inheritType === 1 ) {\r\n\r\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lParentGSM ).multiply( lLRM ).multiply( lLSM );\r\n\r\n\t} else {\r\n\r\n\t\tconst lParentLSM = new Matrix4().scale( new Vector3().setFromMatrixScale( lParentLX ) );\r\n\t\tconst lParentLSM_inv = lParentLSM.clone().invert();\r\n\t\tconst lParentGSM_noLocal = lParentGSM.clone().multiply( lParentLSM_inv );\r\n\r\n\t\tlGlobalRS.copy( lParentGRM ).multiply( lLRM ).multiply( lParentGSM_noLocal ).multiply( lLSM );\r\n\r\n\t}\r\n\r\n\tconst lRotationPivotM_inv = lRotationPivotM.clone().invert();\r\n\tconst lScalingPivotM_inv = lScalingPivotM.clone().invert();\r\n\t// Calculate the local transform matrix\r\n\tlet lTransform = lTranslationM.clone().multiply( lRotationOffsetM ).multiply( lRotationPivotM ).multiply( lPreRotationM ).multiply( lRotationM ).multiply( lPostRotationM ).multiply( lRotationPivotM_inv ).multiply( lScalingOffsetM ).multiply( lScalingPivotM ).multiply( lScalingM ).multiply( lScalingPivotM_inv );\r\n\r\n\tconst lLocalTWithAllPivotAndOffsetInfo = new Matrix4().copyPosition( lTransform );\r\n\r\n\tconst lGlobalTranslation = lParentGX.clone().multiply( lLocalTWithAllPivotAndOffsetInfo );\r\n\tlGlobalT.copyPosition( lGlobalTranslation );\r\n\r\n\tlTransform = lGlobalT.clone().multiply( lGlobalRS );\r\n\r\n\t// from global to local\r\n\tlTransform.premultiply( lParentGX.invert() );\r\n\r\n\treturn lTransform;\r\n\r\n}\r\n\r\n// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\r\n// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\r\nfunction getEulerOrder( order ) {\r\n\r\n\torder = order || 0;\r\n\r\n\tconst enums = [\r\n\t\t'ZYX', // -> XYZ extrinsic\r\n\t\t'YZX', // -> XZY extrinsic\r\n\t\t'XZY', // -> YZX extrinsic\r\n\t\t'ZXY', // -> YXZ extrinsic\r\n\t\t'YXZ', // -> ZXY extrinsic\r\n\t\t'XYZ', // -> ZYX extrinsic\r\n\t\t//'SphericXYZ', // not possible to support\r\n\t];\r\n\r\n\tif ( order === 6 ) {\r\n\r\n\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\r\n\t\treturn enums[ 0 ];\r\n\r\n\t}\r\n\r\n\treturn enums[ order ];\r\n\r\n}\r\n\r\n// Parses comma separated list of numbers and returns them an array.\r\n// Used internally by the TextParser\r\nfunction parseNumberArray( value ) {\r\n\r\n\tconst array = value.split( ',' ).map( function ( val ) {\r\n\r\n\t\treturn parseFloat( val );\r\n\r\n\t} );\r\n\r\n\treturn array;\r\n\r\n}\r\n\r\nfunction convertArrayBufferToString( buffer, from, to ) {\r\n\r\n\tif ( from === undefined ) from = 0;\r\n\tif ( to === undefined ) to = buffer.byteLength;\r\n\r\n\treturn new TextDecoder().decode( new Uint8Array( buffer, from, to ) );\r\n\r\n}\r\n\r\nfunction append( a, b ) {\r\n\r\n\tfor ( let i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\r\n\r\n\t\ta[ j ] = b[ i ];\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction slice( a, b, from, to ) {\r\n\r\n\tfor ( let i = from, j = 0; i < to; i ++, j ++ ) {\r\n\r\n\t\ta[ j ] = b[ i ];\r\n\r\n\t}\r\n\r\n\treturn a;\r\n\r\n}\r\n\r\n// inject array a2 into array a1 at index\r\nfunction inject( a1, index, a2 ) {\r\n\r\n\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\r\n\r\n}\r\n\r\nexport { FBXLoader };\r\n"],"names":["findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcKoverI","k","i","nom","denom","calcNURBSDerivatives","P","nd","Pders","du","CK","nders","zeroArr","ders","slice","ndu","s1","s2","a","d","rk","pk","j2","calcBasisFunctionDerivatives","Pw","point","clone","w","x","y","z","multiplyScalar","add","Vector4","calcBSplineDerivatives","Aders","wders","Vector3","v","sub","divideScalar","calcRationalCurveDerivatives","fbxTree","connections","sceneGraph","NURBSCurve","_Curve","_inherits","_super","_createSuper","degree","knots","controlPoints","startKnot","endKnot","_this","_classCallCheck","call","_createClass","key","value","t","arguments","undefined","this","hpoint","C","Nj","wNj","NURBSUtils","set","tangent","copy","normalize","Curve","FBXLoader","_Loader","manager","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","loader","FileLoader","setPath","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","buffer","parse","e","console","error","itemError","FBXBuffer","CORRECT","byteLength","convertArrayBufferToString","isFbxFormatBinary","BinaryParser","FBXText","text","cursor","read","offset","result","isFbxFormatASCII","Error","getFbxVersion","TextParser","textureLoader","TextureLoader","resourcePath","setCrossOrigin","crossOrigin","FBXTreeParser","Loader","parseConnections","images","parseImages","textures","parseTextures","materials","parseMaterials","deformers","parseDeformers","geometryMap","GeometryParser","parseScene","connectionMap","Map","Connections","forEach","rawConnection","fromID","toID","relationship","has","parents","children","parentRelationship","ID","get","push","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","parseInt","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","base64Content","image","parseImage","id","filename","split","pop","type","content","fileName","extension","lastIndexOf","toLowerCase","getHandler","warn","array","Uint8Array","window","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","texture","parseTexture","textureNode","loadTexture","name","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","wrapS","RepeatWrapping","ClampToEdgeWrapping","wrapT","values","Scaling","repeat","Translation","currentPath","indexOf","FileName","materialMap","materialNodes","Material","material","parseMaterial","materialNode","ShadingModel","parameters","parseParameters","MeshPhongMaterial","MeshLambertMaterial","setValues","BumpFactor","bumpScale","Diffuse","color","Color","fromArray","DiffuseColor","DisplacementFactor","displacementScale","Emissive","emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","parseFloat","Opacity","opacity","transparent","ReflectionFactor","reflectivity","Shininess","shininess","Specular","specular","SpecularColor","child","bumpMap","getTexture","aoMap","map","encoding","sRGBEncoding","displacementMap","emissiveMap","normalMap","envMap","mapping","EquirectangularReflectionMapping","specularMap","alphaMap","LayeredTexture","skeletons","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","skeleton","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","indices","weights","transformLink","Matrix4","TransformLink","Indexes","Weights","bones","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","filter","Group","modelMap","parseModels","modelNodes","Model","model","modelNode","setLookAtProperties","connection","parent","bindSkeleton","createAmbientLight","traverse","node","userData","transformData","parentMatrix","matrix","parentMatrixWorld","matrixWorld","transform","generateTransform","applyMatrix4","updateWorldMatrix","animations","AnimationParser","isGroup","buildSkeleton","createCamera","createLight","createMesh","createCurve","Bone","PropertyBinding","sanitizeNodeName","getTransformData","bone","_loop","subBone","cameraAttribute","attr","NodeAttribute","Object3D","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","PerspectiveCamera","setFocalLength","OrthographicCamera","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","distance","FarAttenuationEnd","EnableFarAttenuation","PointLight","DirectionalLight","angle","PI","InnerAngle","MathUtils","degToRad","penumbra","OuterAngle","max","SpotLight","CastShadows","castShadow","geometry","attributes","vertexColors","FBX_Deformer","SkinnedMesh","normalizeSkinWeights","Mesh","reduce","geo","LineBasicMaterial","linewidth","Line","inheritType","InheritType","eulerOrder","getEulerOrder","RotationOrder","translation","Lcl_Translation","preRotation","PreRotation","rotation","Lcl_Rotation","postRotation","PostRotation","scale","Lcl_Scaling","scalingOffset","ScalingOffset","scalingPivot","ScalingPivot","rotationOffset","RotationOffset","rotationPivot","RotationPivot","lookAtTarget","pos","target","position","lookAt","bindMatrices","parsePoseNodes","_loop2","geoConnParent","bind","Skeleton","BindPoseNode","Pose","NbPoseNodes","poseNodes","PoseNode","Array","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","g","b","AmbientLight","negativeMaterialIndices","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","BufferGeometry","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","Float32BufferAttribute","vertex","setAttribute","colors","Uint16BufferAttribute","weightsIndices","vertexWeights","normal","normalMatrix","Matrix3","getNormalMatrix","normalAttribute","applyNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","addGroup","groups","lastGroup","lastIndex","start","count","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","uv","UV","parseUVs","weightTable","index","weight","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","data","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","_loop3","parentGeo","parentGeoNode","morphTargetsRelative","morphAttributes","rawTarget","morphGeoNode","genMorphGeometry","morphPositionsSparse","morphPositions","Float32Array","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","order","Order","isNaN","KnotVector","pointsValues","Points","l","Form","points","getPoints","setFromPoints","animationClips","rawClips","parseClips","rawClip","clip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","match","curveNode","curves","rawCurves","animationCurve","times","KeyTime","convertFBXTimeToSeconds","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","_loop4","layerCurveNodes","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","tracks","rawTracks","concat","generateTracks","AnimationClip","Quaternion","decompose","toArray","Euler","setFromQuaternion","T","Object","keys","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","VectorKeyframeTrack","interpolateRotations","setFromEuler","invert","quaternion","euler","quaternionValues","premultiply","multiply","QuaternionKeyframeTrack","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","sort","targetIndex","lastValue","currentValue","prevValue","xIndex","yIndex","zIndex","time","xValue","yValue","zValue","curve","valuesSpan","absoluteSpan","abs","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","inject","nodeStack","currentIndent","currentProp","currentPropName","allNodes","FBXTree","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","popStack","parseNodePropertyContinued","property","nodeName","trim","replace","nodeAttrs","attrs","parseNodeAttr","currentNode","getCurrentNode","pushStack","contentLine","propName","propValue","connProps","from","to","rest","append","elem","setCurrentProp","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","getPrevNode","reader","BinaryReader","skip","version","getUint32","endOfContent","parseNode","size","getOffset","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","fflate","reader2","littleEndian","dv","DataView","_textDecoder","TextDecoder","nullByte","decode","dataArray","infoObject","tempEuler","tempVec","lTranslationM","lPreRotationM","lRotationM","lPostRotationM","lScalingM","lScalingPivotM","lScalingOffsetM","lRotationOffsetM","lRotationPivotM","lParentGX","lParentLX","lGlobalT","setPosition","DEFAULT_ORDER","makeRotationFromEuler","lLRM","lParentGRM","extractRotation","lParentTM","copyPosition","lParentGRSM","lParentGSM","lLSM","lGlobalRS","lParentLSM_inv","setFromMatrixScale","lParentGSM_noLocal","lRotationPivotM_inv","lScalingPivotM_inv","lTransform","lLocalTWithAllPivotAndOffsetInfo","lGlobalTranslation","enums","a1","a2"],"sourceRoot":""}